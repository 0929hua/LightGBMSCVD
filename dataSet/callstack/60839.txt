Block 0x0
[0x0:0xa]
---
Predecessors: []
Successors: [0xb, 0xa3]
---
0x0 PUSH1 0x60
0x2 PUSH1 0x40
0x4 MSTORE
0x5 CALLDATASIZE
0x6 ISZERO
0x7 PUSH2 0xa3
0xa JUMPI
---
0x0: V0 = 0x60
0x2: V1 = 0x40
0x4: M[0x40] = 0x60
0x5: V2 = CALLDATASIZE
0x6: V3 = ISZERO V2
0x7: V4 = 0xa3
0xa: JUMPI 0xa3 V3
---
Entry stack: []
Stack pops: 0
Stack additions: []
Exit stack: []

================================

Block 0xb
[0xb:0x1e]
---
Predecessors: [0x0]
Successors: [0x1f, 0xa5]
---
0xb PUSH1 0xe0
0xd PUSH1 0x2
0xf EXP
0x10 PUSH1 0x0
0x12 CALLDATALOAD
0x13 DIV
0x14 PUSH4 0x16ece9db
0x19 DUP2
0x1a EQ
0x1b PUSH2 0xa5
0x1e JUMPI
---
0xb: V5 = 0xe0
0xd: V6 = 0x2
0xf: V7 = EXP 0x2 0xe0
0x10: V8 = 0x0
0x12: V9 = CALLDATALOAD 0x0
0x13: V10 = DIV V9 0x100000000000000000000000000000000000000000000000000000000
0x14: V11 = 0x16ece9db
0x1a: V12 = EQ V10 0x16ece9db
0x1b: V13 = 0xa5
0x1e: JUMPI 0xa5 V12
---
Entry stack: []
Stack pops: 0
Stack additions: [V10]
Exit stack: [V10]

================================

Block 0x1f
[0x1f:0x29]
---
Predecessors: [0xb]
Successors: [0x2a, 0x156]
---
0x1f DUP1
0x20 PUSH4 0x1982ed58
0x25 EQ
0x26 PUSH2 0x156
0x29 JUMPI
---
0x20: V14 = 0x1982ed58
0x25: V15 = EQ 0x1982ed58 V10
0x26: V16 = 0x156
0x29: JUMPI 0x156 V15
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x2a
[0x2a:0x34]
---
Predecessors: [0x1f]
Successors: [0x35, 0x18f]
---
0x2a DUP1
0x2b PUSH4 0x31a73991
0x30 EQ
0x31 PUSH2 0x18f
0x34 JUMPI
---
0x2b: V17 = 0x31a73991
0x30: V18 = EQ 0x31a73991 V10
0x31: V19 = 0x18f
0x34: JUMPI 0x18f V18
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x35
[0x35:0x3f]
---
Predecessors: [0x2a]
Successors: [0x40, 0x1db]
---
0x35 DUP1
0x36 PUSH4 0x3773930e
0x3b EQ
0x3c PUSH2 0x1db
0x3f JUMPI
---
0x36: V20 = 0x3773930e
0x3b: V21 = EQ 0x3773930e V10
0x3c: V22 = 0x1db
0x3f: JUMPI 0x1db V21
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x40
[0x40:0x4a]
---
Predecessors: [0x35]
Successors: [0x4b, 0x209]
---
0x40 DUP1
0x41 PUSH4 0x5f52e9fd
0x46 EQ
0x47 PUSH2 0x209
0x4a JUMPI
---
0x41: V23 = 0x5f52e9fd
0x46: V24 = EQ 0x5f52e9fd V10
0x47: V25 = 0x209
0x4a: JUMPI 0x209 V24
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x4b
[0x4b:0x55]
---
Predecessors: [0x40]
Successors: [0x56, 0x23a]
---
0x4b DUP1
0x4c PUSH4 0x6169a7ed
0x51 EQ
0x52 PUSH2 0x23a
0x55 JUMPI
---
0x4c: V26 = 0x6169a7ed
0x51: V27 = EQ 0x6169a7ed V10
0x52: V28 = 0x23a
0x55: JUMPI 0x23a V27
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x56
[0x56:0x60]
---
Predecessors: [0x4b]
Successors: [0x61, 0x243]
---
0x56 DUP1
0x57 PUSH4 0x686e8aaa
0x5c EQ
0x5d PUSH2 0x243
0x60 JUMPI
---
0x57: V29 = 0x686e8aaa
0x5c: V30 = EQ 0x686e8aaa V10
0x5d: V31 = 0x243
0x60: JUMPI 0x243 V30
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x61
[0x61:0x6b]
---
Predecessors: [0x56]
Successors: [0x6c, 0x262]
---
0x61 DUP1
0x62 PUSH4 0x79799193
0x67 EQ
0x68 PUSH2 0x262
0x6b JUMPI
---
0x62: V32 = 0x79799193
0x67: V33 = EQ 0x79799193 V10
0x68: V34 = 0x262
0x6b: JUMPI 0x262 V33
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x6c
[0x6c:0x76]
---
Predecessors: [0x61]
Successors: [0x77, 0x26b]
---
0x6c DUP1
0x6d PUSH4 0x7e7307c5
0x72 EQ
0x73 PUSH2 0x26b
0x76 JUMPI
---
0x6d: V35 = 0x7e7307c5
0x72: V36 = EQ 0x7e7307c5 V10
0x73: V37 = 0x26b
0x76: JUMPI 0x26b V36
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x77
[0x77:0x81]
---
Predecessors: [0x6c]
Successors: [0x82, 0x27f]
---
0x77 DUP1
0x78 PUSH4 0x8fe58eb9
0x7d EQ
0x7e PUSH2 0x27f
0x81 JUMPI
---
0x78: V38 = 0x8fe58eb9
0x7d: V39 = EQ 0x8fe58eb9 V10
0x7e: V40 = 0x27f
0x81: JUMPI 0x27f V39
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x82
[0x82:0x8c]
---
Predecessors: [0x77]
Successors: [0x8d, 0x2a9]
---
0x82 DUP1
0x83 PUSH4 0x9894221a
0x88 EQ
0x89 PUSH2 0x2a9
0x8c JUMPI
---
0x83: V41 = 0x9894221a
0x88: V42 = EQ 0x9894221a V10
0x89: V43 = 0x2a9
0x8c: JUMPI 0x2a9 V42
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x8d
[0x8d:0x97]
---
Predecessors: [0x82]
Successors: [0x98, 0x2b6]
---
0x8d DUP1
0x8e PUSH4 0xa9fb4385
0x93 EQ
0x94 PUSH2 0x2b6
0x97 JUMPI
---
0x8e: V44 = 0xa9fb4385
0x93: V45 = EQ 0xa9fb4385 V10
0x94: V46 = 0x2b6
0x97: JUMPI 0x2b6 V45
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x98
[0x98:0xa2]
---
Predecessors: [0x8d]
Successors: [0xa3, 0x316]
---
0x98 DUP1
0x99 PUSH4 0xd3c65384
0x9e EQ
0x9f PUSH2 0x316
0xa2 JUMPI
---
0x99: V47 = 0xd3c65384
0x9e: V48 = EQ 0xd3c65384 V10
0x9f: V49 = 0x316
0xa2: JUMPI 0x316 V48
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0xa3
[0xa3:0xa4]
---
Predecessors: [0x0, 0x98, 0x2a9, 0x37c, 0x429, 0x455, 0x47e, 0x480, 0x56a, 0x8b0]
Successors: []
---
0xa3 JUMPDEST
0xa4 STOP
---
0xa3: JUMPDEST 
0xa4: STOP 
---
Entry stack: [V10, 0xa3, S1, S0]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xa3, S1, S0]

================================

Block 0xa5
[0xa5:0x155]
---
Predecessors: [0xb]
Successors: []
---
0xa5 JUMPDEST
0xa6 PUSH2 0xffff
0xa9 PUSH1 0x4
0xab DUP1
0xac CALLDATALOAD
0xad DUP3
0xae AND
0xaf PUSH1 0x0
0xb1 DUP2
0xb2 DUP2
0xb3 MSTORE
0xb4 PUSH1 0x8
0xb6 PUSH1 0x20
0xb8 DUP2
0xb9 DUP2
0xba MSTORE
0xbb PUSH1 0x40
0xbd DUP1
0xbe DUP5
0xbf SHA3
0xc0 PUSH1 0x24
0xc2 CALLDATALOAD
0xc3 DUP9
0xc4 AND
0xc5 DUP6
0xc6 MSTORE
0xc7 PUSH1 0x1
0xc9 DUP2
0xca DUP2
0xcb ADD
0xcc DUP5
0xcd MSTORE
0xce DUP3
0xcf DUP7
0xd0 SHA3
0xd1 DUP1
0xd2 SLOAD
0xd3 SWAP9
0xd4 DUP2
0xd5 ADD
0xd6 SLOAD
0xd7 SWAP2
0xd8 DUP2
0xd9 ADD
0xda SLOAD
0xdb PUSH1 0x2
0xdd DUP3
0xde ADD
0xdf SLOAD
0xe0 PUSH1 0x3
0xe2 DUP4
0xe3 ADD
0xe4 SLOAD
0xe5 PUSH1 0x5
0xe7 DUP5
0xe8 ADD
0xe9 SLOAD
0xea PUSH1 0x6
0xec DUP6
0xed ADD
0xee SLOAD
0xef PUSH1 0x7
0xf1 SWAP6
0xf2 SWAP1
0xf3 SWAP6
0xf4 ADD
0xf5 SLOAD
0xf6 SWAP12
0xf7 SWAP1
0xf8 SWAP11
0xf9 MSTORE
0xfa SWAP8
0xfb DUP8
0xfc MSTORE
0xfd SWAP4
0xfe SLOAD
0xff DUP6
0x100 MLOAD
0x101 SWAP11
0x102 DUP12
0x103 MSTORE
0x104 SWAP6
0x105 DUP11
0x106 ADD
0x107 MSTORE
0x108 SWAP2
0x109 SWAP1
0x10a SWAP9
0x10b AND
0x10c DUP8
0x10d DUP4
0x10e ADD
0x10f MSTORE
0x110 PUSH1 0x60
0x112 DUP8
0x113 ADD
0x114 SWAP4
0x115 SWAP1
0x116 SWAP4
0x117 MSTORE
0x118 PUSH1 0xff
0x11a SWAP7
0x11b DUP8
0x11c AND
0x11d PUSH1 0x80
0x11f DUP8
0x120 ADD
0x121 MSTORE
0x122 PUSH1 0xa0
0x124 DUP7
0x125 ADD
0x126 SWAP4
0x127 SWAP1
0x128 SWAP4
0x129 MSTORE
0x12a PUSH1 0xc0
0x12c DUP6
0x12d ADD
0x12e SWAP2
0x12f SWAP1
0x130 SWAP2
0x131 MSTORE
0x132 SWAP2
0x133 SWAP1
0x134 SWAP4
0x135 AND
0x136 PUSH1 0xe0
0x138 DUP4
0x139 ADD
0x13a MSTORE
0x13b PUSH1 0x1
0x13d PUSH1 0xa0
0x13f PUSH1 0x2
0x141 EXP
0x142 SUB
0x143 AND
0x144 PUSH2 0x100
0x147 DUP3
0x148 ADD
0x149 MSTORE
0x14a SWAP1
0x14b MLOAD
0x14c SWAP1
0x14d DUP2
0x14e SWAP1
0x14f SUB
0x150 PUSH2 0x120
0x153 ADD
0x154 SWAP1
0x155 RETURN
---
0xa5: JUMPDEST 
0xa6: V50 = 0xffff
0xa9: V51 = 0x4
0xac: V52 = CALLDATALOAD 0x4
0xae: V53 = AND 0xffff V52
0xaf: V54 = 0x0
0xb3: M[0x0] = V53
0xb4: V55 = 0x8
0xb6: V56 = 0x20
0xba: M[0x20] = 0x8
0xbb: V57 = 0x40
0xbf: V58 = SHA3 0x0 0x40
0xc0: V59 = 0x24
0xc2: V60 = CALLDATALOAD 0x24
0xc4: V61 = AND 0xffff V60
0xc6: M[0x0] = V61
0xc7: V62 = 0x1
0xcb: V63 = ADD 0x1 V58
0xcd: M[0x20] = V63
0xd0: V64 = SHA3 0x0 0x40
0xd2: V65 = S[V64]
0xd5: V66 = ADD V64 0x4
0xd6: V67 = S[V66]
0xd9: V68 = ADD V64 0x1
0xda: V69 = S[V68]
0xdb: V70 = 0x2
0xde: V71 = ADD V64 0x2
0xdf: V72 = S[V71]
0xe0: V73 = 0x3
0xe3: V74 = ADD V64 0x3
0xe4: V75 = S[V74]
0xe5: V76 = 0x5
0xe8: V77 = ADD V64 0x5
0xe9: V78 = S[V77]
0xea: V79 = 0x6
0xed: V80 = ADD V64 0x6
0xee: V81 = S[V80]
0xef: V82 = 0x7
0xf4: V83 = ADD 0x7 V64
0xf5: V84 = S[V83]
0xf9: M[0x0] = V53
0xfc: M[0x20] = 0x8
0xfe: V85 = S[V58]
0x100: V86 = M[0x40]
0x103: M[V86] = V65
0x106: V87 = ADD V86 0x20
0x107: M[V87] = V69
0x10b: V88 = AND 0xffff V72
0x10e: V89 = ADD 0x40 V86
0x10f: M[V89] = V88
0x110: V90 = 0x60
0x113: V91 = ADD V86 0x60
0x117: M[V91] = V75
0x118: V92 = 0xff
0x11c: V93 = AND 0xff V67
0x11d: V94 = 0x80
0x120: V95 = ADD V86 0x80
0x121: M[V95] = V93
0x122: V96 = 0xa0
0x125: V97 = ADD V86 0xa0
0x129: M[V97] = V78
0x12a: V98 = 0xc0
0x12d: V99 = ADD V86 0xc0
0x131: M[V99] = V81
0x135: V100 = AND 0xff V84
0x136: V101 = 0xe0
0x139: V102 = ADD V86 0xe0
0x13a: M[V102] = V100
0x13b: V103 = 0x1
0x13d: V104 = 0xa0
0x13f: V105 = 0x2
0x141: V106 = EXP 0x2 0xa0
0x142: V107 = SUB 0x10000000000000000000000000000000000000000 0x1
0x143: V108 = AND 0xffffffffffffffffffffffffffffffffffffffff V85
0x144: V109 = 0x100
0x148: V110 = ADD V86 0x100
0x149: M[V110] = V108
0x14b: V111 = M[0x40]
0x14f: V112 = SUB V86 V111
0x150: V113 = 0x120
0x153: V114 = ADD 0x120 V112
0x155: RETURN V111 V114
---
Entry stack: [V10]
Stack pops: 0
Stack additions: []
Exit stack: [V10]

================================

Block 0x156
[0x156:0x18a]
---
Predecessors: [0x1f]
Successors: [0x18b, 0x349]
---
0x156 JUMPDEST
0x157 PUSH2 0xa3
0x15a PUSH1 0x4
0x15c CALLDATALOAD
0x15d PUSH1 0x24
0x15f CALLDATALOAD
0x160 PUSH1 0x44
0x162 CALLDATALOAD
0x163 PUSH2 0xffff
0x166 DUP3
0x167 AND
0x168 PUSH1 0x0
0x16a SWAP1
0x16b DUP2
0x16c MSTORE
0x16d PUSH1 0x8
0x16f PUSH1 0x20
0x171 MSTORE
0x172 PUSH1 0x40
0x174 SWAP1
0x175 SHA3
0x176 SLOAD
0x177 PUSH1 0x1
0x179 PUSH1 0xa0
0x17b PUSH1 0x2
0x17d EXP
0x17e SUB
0x17f SWAP1
0x180 DUP2
0x181 AND
0x182 CALLER
0x183 SWAP1
0x184 SWAP2
0x185 AND
0x186 EQ
0x187 PUSH2 0x349
0x18a JUMPI
---
0x156: JUMPDEST 
0x157: V115 = 0xa3
0x15a: V116 = 0x4
0x15c: V117 = CALLDATALOAD 0x4
0x15d: V118 = 0x24
0x15f: V119 = CALLDATALOAD 0x24
0x160: V120 = 0x44
0x162: V121 = CALLDATALOAD 0x44
0x163: V122 = 0xffff
0x167: V123 = AND V119 0xffff
0x168: V124 = 0x0
0x16c: M[0x0] = V123
0x16d: V125 = 0x8
0x16f: V126 = 0x20
0x171: M[0x20] = 0x8
0x172: V127 = 0x40
0x175: V128 = SHA3 0x0 0x40
0x176: V129 = S[V128]
0x177: V130 = 0x1
0x179: V131 = 0xa0
0x17b: V132 = 0x2
0x17d: V133 = EXP 0x2 0xa0
0x17e: V134 = SUB 0x10000000000000000000000000000000000000000 0x1
0x181: V135 = AND 0xffffffffffffffffffffffffffffffffffffffff V129
0x182: V136 = CALLER
0x185: V137 = AND 0xffffffffffffffffffffffffffffffffffffffff V136
0x186: V138 = EQ V137 V135
0x187: V139 = 0x349
0x18a: JUMPI 0x349 V138
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0xa3, V117, V119, V121]
Exit stack: [V10, 0xa3, V117, V119, V121]

================================

Block 0x18b
[0x18b:0x18e]
---
Predecessors: [0x156]
Successors: [0x37c]
---
0x18b PUSH2 0x37c
0x18e JUMP
---
0x18b: V140 = 0x37c
0x18e: JUMP 0x37c
---
Entry stack: [V10, 0xa3, V117, V119, V121]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xa3, V117, V119, V121]

================================

Block 0x18f
[0x18f:0x195]
---
Predecessors: [0x2a]
Successors: [0x196]
---
0x18f JUMPDEST
0x190 PUSH2 0x31f
0x193 PUSH1 0x4
0x195 CALLDATALOAD
---
0x18f: JUMPDEST 
0x190: V141 = 0x31f
0x193: V142 = 0x4
0x195: V143 = CALLDATALOAD 0x4
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x31f, V143]
Exit stack: [V10, 0x31f, V143]

================================

Block 0x196
[0x196:0x199]
---
Predecessors: [0x18f, 0x8a7]
Successors: [0x19a]
---
0x196 JUMPDEST
0x197 PUSH1 0x0
0x199 DUP1
---
0x196: JUMPDEST 
0x197: V144 = 0x0
---
Entry stack: [V10, 0xa3, V240, S8, {0xa3, 0x480}, S6, S5, S4, 0x0, S2, {0x31f, 0x71e}, S0]
Stack pops: 0
Stack additions: [0x0, 0x0]
Exit stack: [V10, 0xa3, V240, S8, {0xa3, 0x480}, S6, S5, S4, 0x0, S2, {0x31f, 0x71e}, S0, 0x0, 0x0]

================================

Block 0x19a
[0x19a:0x1ac]
---
Predecessors: [0x196, 0x38d]
Successors: [0x1ad, 0x381]
---
0x19a JUMPDEST
0x19b PUSH1 0x7
0x19d SLOAD
0x19e PUSH2 0xffff
0x1a1 SWAP1
0x1a2 DUP2
0x1a3 AND
0x1a4 SWAP1
0x1a5 DUP3
0x1a6 AND
0x1a7 LT
0x1a8 ISZERO
0x1a9 PUSH2 0x381
0x1ac JUMPI
---
0x19a: JUMPDEST 
0x19b: V145 = 0x7
0x19d: V146 = S[0x7]
0x19e: V147 = 0xffff
0x1a3: V148 = AND 0xffff V146
0x1a6: V149 = AND S0 0xffff
0x1a7: V150 = LT V149 V148
0x1a8: V151 = ISZERO V150
0x1a9: V152 = 0x381
0x1ac: JUMPI 0x381 V151
---
Entry stack: [V10, 0xa3, V240, S10, {0xa3, 0x480}, S8, S7, S6, 0x0, S4, {0x31f, 0x71e}, S2, 0x0, S0]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10, 0xa3, V240, S10, {0xa3, 0x480}, S8, S7, S6, 0x0, S4, {0x31f, 0x71e}, S2, 0x0, S0]

================================

Block 0x1ad
[0x1ad:0x1d3]
---
Predecessors: [0x19a]
Successors: [0x1d4, 0x38d]
---
0x1ad PUSH2 0xffff
0x1b0 DUP2
0x1b1 AND
0x1b2 PUSH1 0x0
0x1b4 SWAP1
0x1b5 DUP2
0x1b6 MSTORE
0x1b7 PUSH1 0x8
0x1b9 PUSH1 0x20
0x1bb MSTORE
0x1bc PUSH1 0x40
0x1be SWAP1
0x1bf SHA3
0x1c0 SLOAD
0x1c1 PUSH1 0x1
0x1c3 PUSH1 0xa0
0x1c5 PUSH1 0x2
0x1c7 EXP
0x1c8 SUB
0x1c9 DUP5
0x1ca DUP2
0x1cb AND
0x1cc SWAP2
0x1cd AND
0x1ce EQ
0x1cf ISZERO
0x1d0 PUSH2 0x38d
0x1d3 JUMPI
---
0x1ad: V153 = 0xffff
0x1b1: V154 = AND S0 0xffff
0x1b2: V155 = 0x0
0x1b6: M[0x0] = V154
0x1b7: V156 = 0x8
0x1b9: V157 = 0x20
0x1bb: M[0x20] = 0x8
0x1bc: V158 = 0x40
0x1bf: V159 = SHA3 0x0 0x40
0x1c0: V160 = S[V159]
0x1c1: V161 = 0x1
0x1c3: V162 = 0xa0
0x1c5: V163 = 0x2
0x1c7: V164 = EXP 0x2 0xa0
0x1c8: V165 = SUB 0x10000000000000000000000000000000000000000 0x1
0x1cb: V166 = AND 0xffffffffffffffffffffffffffffffffffffffff S2
0x1cd: V167 = AND V160 0xffffffffffffffffffffffffffffffffffffffff
0x1ce: V168 = EQ V167 V166
0x1cf: V169 = ISZERO V168
0x1d0: V170 = 0x38d
0x1d3: JUMPI 0x38d V169
---
Entry stack: [V10, 0xa3, V240, S10, {0xa3, 0x480}, S8, S7, S6, 0x0, S4, {0x31f, 0x71e}, S2, 0x0, S0]
Stack pops: 3
Stack additions: [S2, S1, S0]
Exit stack: [V10, 0xa3, V240, S10, {0xa3, 0x480}, S8, S7, S6, 0x0, S4, {0x31f, 0x71e}, S2, 0x0, S0]

================================

Block 0x1d4
[0x1d4:0x1da]
---
Predecessors: [0x1ad]
Successors: [0x387]
---
0x1d4 DUP1
0x1d5 SWAP2
0x1d6 POP
0x1d7 PUSH2 0x387
0x1da JUMP
---
0x1d7: V171 = 0x387
0x1da: JUMP 0x387
---
Entry stack: [V10, 0xa3, V240, S10, {0xa3, 0x480}, S8, S7, S6, 0x0, S4, {0x31f, 0x71e}, S2, 0x0, S0]
Stack pops: 2
Stack additions: [S0, S0]
Exit stack: [V10, 0xa3, V240, S10, {0xa3, 0x480}, S8, S7, S6, 0x0, S4, {0x31f, 0x71e}, S2, S0, S0]

================================

Block 0x1db
[0x1db:0x204]
---
Predecessors: [0x35]
Successors: [0x205, 0x395]
---
0x1db JUMPDEST
0x1dc PUSH2 0xa3
0x1df PUSH1 0x4
0x1e1 CALLDATALOAD
0x1e2 PUSH1 0x24
0x1e4 CALLDATALOAD
0x1e5 PUSH1 0x44
0x1e7 CALLDATALOAD
0x1e8 PUSH1 0x64
0x1ea CALLDATALOAD
0x1eb PUSH1 0x84
0x1ed CALLDATALOAD
0x1ee PUSH1 0x0
0x1f0 SLOAD
0x1f1 PUSH1 0x1
0x1f3 PUSH1 0xa0
0x1f5 PUSH1 0x2
0x1f7 EXP
0x1f8 SUB
0x1f9 SWAP1
0x1fa DUP2
0x1fb AND
0x1fc CALLER
0x1fd SWAP1
0x1fe SWAP2
0x1ff AND
0x200 EQ
0x201 PUSH2 0x395
0x204 JUMPI
---
0x1db: JUMPDEST 
0x1dc: V172 = 0xa3
0x1df: V173 = 0x4
0x1e1: V174 = CALLDATALOAD 0x4
0x1e2: V175 = 0x24
0x1e4: V176 = CALLDATALOAD 0x24
0x1e5: V177 = 0x44
0x1e7: V178 = CALLDATALOAD 0x44
0x1e8: V179 = 0x64
0x1ea: V180 = CALLDATALOAD 0x64
0x1eb: V181 = 0x84
0x1ed: V182 = CALLDATALOAD 0x84
0x1ee: V183 = 0x0
0x1f0: V184 = S[0x0]
0x1f1: V185 = 0x1
0x1f3: V186 = 0xa0
0x1f5: V187 = 0x2
0x1f7: V188 = EXP 0x2 0xa0
0x1f8: V189 = SUB 0x10000000000000000000000000000000000000000 0x1
0x1fb: V190 = AND 0xffffffffffffffffffffffffffffffffffffffff V184
0x1fc: V191 = CALLER
0x1ff: V192 = AND 0xffffffffffffffffffffffffffffffffffffffff V191
0x200: V193 = EQ V192 V190
0x201: V194 = 0x395
0x204: JUMPI 0x395 V193
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0xa3, V174, V176, V178, V180, V182]
Exit stack: [V10, 0xa3, V174, V176, V178, V180, V182]

================================

Block 0x205
[0x205:0x208]
---
Predecessors: [0x1db]
Successors: [0x429]
---
0x205 PUSH2 0x429
0x208 JUMP
---
0x205: V195 = 0x429
0x208: JUMP 0x429
---
Entry stack: [V10, 0xa3, V174, V176, V178, V180, V182]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xa3, V174, V176, V178, V180, V182]

================================

Block 0x209
[0x209:0x228]
---
Predecessors: [0x40]
Successors: [0x229, 0x230]
---
0x209 JUMPDEST
0x20a PUSH2 0xa3
0x20d PUSH1 0x4
0x20f CALLDATALOAD
0x210 PUSH1 0x0
0x212 SLOAD
0x213 PUSH1 0x1
0x215 PUSH1 0xa0
0x217 PUSH1 0x2
0x219 EXP
0x21a SUB
0x21b SWAP1
0x21c DUP2
0x21d AND
0x21e CALLER
0x21f SWAP1
0x220 SWAP2
0x221 AND
0x222 EQ
0x223 ISZERO
0x224 DUP1
0x225 PUSH2 0x230
0x228 JUMPI
---
0x209: JUMPDEST 
0x20a: V196 = 0xa3
0x20d: V197 = 0x4
0x20f: V198 = CALLDATALOAD 0x4
0x210: V199 = 0x0
0x212: V200 = S[0x0]
0x213: V201 = 0x1
0x215: V202 = 0xa0
0x217: V203 = 0x2
0x219: V204 = EXP 0x2 0xa0
0x21a: V205 = SUB 0x10000000000000000000000000000000000000000 0x1
0x21d: V206 = AND 0xffffffffffffffffffffffffffffffffffffffff V200
0x21e: V207 = CALLER
0x221: V208 = AND 0xffffffffffffffffffffffffffffffffffffffff V207
0x222: V209 = EQ V208 V206
0x223: V210 = ISZERO V209
0x225: V211 = 0x230
0x228: JUMPI 0x230 V210
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0xa3, V198, V210]
Exit stack: [V10, 0xa3, V198, V210]

================================

Block 0x229
[0x229:0x22f]
---
Predecessors: [0x209]
Successors: [0x230]
---
0x229 POP
0x22a PUSH1 0x5
0x22c SLOAD
0x22d DUP2
0x22e SWAP1
0x22f LT
---
0x22a: V212 = 0x5
0x22c: V213 = S[0x5]
0x22f: V214 = LT V213 V198
---
Entry stack: [V10, 0xa3, V198, V210]
Stack pops: 2
Stack additions: [S1, V214]
Exit stack: [V10, 0xa3, V198, V214]

================================

Block 0x230
[0x230:0x235]
---
Predecessors: [0x209, 0x229]
Successors: [0x236, 0x430]
---
0x230 JUMPDEST
0x231 ISZERO
0x232 PUSH2 0x430
0x235 JUMPI
---
0x230: JUMPDEST 
0x231: V215 = ISZERO S0
0x232: V216 = 0x430
0x235: JUMPI 0x430 V215
---
Entry stack: [V10, 0xa3, V198, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V10, 0xa3, V198]

================================

Block 0x236
[0x236:0x239]
---
Predecessors: [0x230]
Successors: [0x455]
---
0x236 PUSH2 0x455
0x239 JUMP
---
0x236: V217 = 0x455
0x239: JUMP 0x455
---
Entry stack: [V10, 0xa3, V198]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xa3, V198]

================================

Block 0x23a
[0x23a:0x242]
---
Predecessors: [0x4b]
Successors: [0x337]
---
0x23a JUMPDEST
0x23b PUSH2 0x337
0x23e PUSH1 0x5
0x240 SLOAD
0x241 DUP2
0x242 JUMP
---
0x23a: JUMPDEST 
0x23b: V218 = 0x337
0x23e: V219 = 0x5
0x240: V220 = S[0x5]
0x242: JUMP 0x337
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x337, V220]
Exit stack: [V10, 0x337, V220]

================================

Block 0x243
[0x243:0x25d]
---
Predecessors: [0x56]
Successors: [0x25e, 0x458]
---
0x243 JUMPDEST
0x244 PUSH2 0xa3
0x247 PUSH1 0x0
0x249 SLOAD
0x24a PUSH1 0x1
0x24c PUSH1 0xa0
0x24e PUSH1 0x2
0x250 EXP
0x251 SUB
0x252 SWAP1
0x253 DUP2
0x254 AND
0x255 CALLER
0x256 SWAP1
0x257 SWAP2
0x258 AND
0x259 EQ
0x25a PUSH2 0x458
0x25d JUMPI
---
0x243: JUMPDEST 
0x244: V221 = 0xa3
0x247: V222 = 0x0
0x249: V223 = S[0x0]
0x24a: V224 = 0x1
0x24c: V225 = 0xa0
0x24e: V226 = 0x2
0x250: V227 = EXP 0x2 0xa0
0x251: V228 = SUB 0x10000000000000000000000000000000000000000 0x1
0x254: V229 = AND 0xffffffffffffffffffffffffffffffffffffffff V223
0x255: V230 = CALLER
0x258: V231 = AND 0xffffffffffffffffffffffffffffffffffffffff V230
0x259: V232 = EQ V231 V229
0x25a: V233 = 0x458
0x25d: JUMPI 0x458 V232
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0xa3]
Exit stack: [V10, 0xa3]

================================

Block 0x25e
[0x25e:0x261]
---
Predecessors: [0x243]
Successors: [0x47e]
---
0x25e PUSH2 0x47e
0x261 JUMP
---
0x25e: V234 = 0x47e
0x261: JUMP 0x47e
---
Entry stack: [V10, 0xa3]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xa3]

================================

Block 0x262
[0x262:0x26a]
---
Predecessors: [0x61]
Successors: [0x337]
---
0x262 JUMPDEST
0x263 PUSH2 0x337
0x266 PUSH1 0x6
0x268 SLOAD
0x269 DUP2
0x26a JUMP
---
0x262: JUMPDEST 
0x263: V235 = 0x337
0x266: V236 = 0x6
0x268: V237 = S[0x6]
0x26a: JUMP 0x337
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x337, V237]
Exit stack: [V10, 0x337, V237]

================================

Block 0x26b
[0x26b:0x27e]
---
Predecessors: [0x6c]
Successors: [0x2c3]
---
0x26b JUMPDEST
0x26c PUSH2 0xa3
0x26f PUSH1 0x4
0x271 CALLDATALOAD
0x272 PUSH1 0x24
0x274 CALLDATALOAD
0x275 PUSH2 0x480
0x278 DUP3
0x279 DUP3
0x27a CALLER
0x27b PUSH2 0x2c3
0x27e JUMP
---
0x26b: JUMPDEST 
0x26c: V238 = 0xa3
0x26f: V239 = 0x4
0x271: V240 = CALLDATALOAD 0x4
0x272: V241 = 0x24
0x274: V242 = CALLDATALOAD 0x24
0x275: V243 = 0x480
0x27a: V244 = CALLER
0x27b: V245 = 0x2c3
0x27e: JUMP 0x2c3
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0xa3, V240, V242, 0x480, V240, V242, V244]
Exit stack: [V10, 0xa3, V240, V242, 0x480, V240, V242, V244]

================================

Block 0x27f
[0x27f:0x2a4]
---
Predecessors: [0x77]
Successors: [0x2a5, 0x484]
---
0x27f JUMPDEST
0x280 PUSH2 0xa3
0x283 PUSH1 0x0
0x285 DUP1
0x286 SLOAD
0x287 DUP2
0x288 SWAP1
0x289 DUP2
0x28a SWAP1
0x28b DUP2
0x28c SWAP1
0x28d DUP2
0x28e SWAP1
0x28f DUP2
0x290 SWAP1
0x291 PUSH1 0x1
0x293 PUSH1 0xa0
0x295 PUSH1 0x2
0x297 EXP
0x298 SUB
0x299 SWAP1
0x29a DUP2
0x29b AND
0x29c CALLER
0x29d SWAP1
0x29e SWAP2
0x29f AND
0x2a0 EQ
0x2a1 PUSH2 0x484
0x2a4 JUMPI
---
0x27f: JUMPDEST 
0x280: V246 = 0xa3
0x283: V247 = 0x0
0x286: V248 = S[0x0]
0x291: V249 = 0x1
0x293: V250 = 0xa0
0x295: V251 = 0x2
0x297: V252 = EXP 0x2 0xa0
0x298: V253 = SUB 0x10000000000000000000000000000000000000000 0x1
0x29b: V254 = AND 0xffffffffffffffffffffffffffffffffffffffff V248
0x29c: V255 = CALLER
0x29f: V256 = AND 0xffffffffffffffffffffffffffffffffffffffff V255
0x2a0: V257 = EQ V256 V254
0x2a1: V258 = 0x484
0x2a4: JUMPI 0x484 V257
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
Exit stack: [V10, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]

================================

Block 0x2a5
[0x2a5:0x2a8]
---
Predecessors: [0x27f]
Successors: [0x56a]
---
0x2a5 PUSH2 0x56a
0x2a8 JUMP
---
0x2a5: V259 = 0x56a
0x2a8: JUMP 0x56a
---
Entry stack: [V10, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]

================================

Block 0x2a9
[0x2a9:0x2b5]
---
Predecessors: [0x82]
Successors: [0xa3]
---
0x2a9 JUMPDEST
0x2aa PUSH2 0xa3
0x2ad PUSH1 0x5
0x2af DUP1
0x2b0 SLOAD
0x2b1 CALLVALUE
0x2b2 ADD
0x2b3 SWAP1
0x2b4 SSTORE
0x2b5 JUMP
---
0x2a9: JUMPDEST 
0x2aa: V260 = 0xa3
0x2ad: V261 = 0x5
0x2b0: V262 = S[0x5]
0x2b1: V263 = CALLVALUE
0x2b2: V264 = ADD V263 V262
0x2b4: S[0x5] = V264
0x2b5: JUMP 0xa3
---
Entry stack: [V10]
Stack pops: 0
Stack additions: []
Exit stack: [V10]

================================

Block 0x2b6
[0x2b6:0x2c2]
---
Predecessors: [0x8d]
Successors: [0x2c3]
---
0x2b6 JUMPDEST
0x2b7 PUSH2 0xa3
0x2ba PUSH1 0x4
0x2bc CALLDATALOAD
0x2bd PUSH1 0x24
0x2bf CALLDATALOAD
0x2c0 PUSH1 0x44
0x2c2 CALLDATALOAD
---
0x2b6: JUMPDEST 
0x2b7: V265 = 0xa3
0x2ba: V266 = 0x4
0x2bc: V267 = CALLDATALOAD 0x4
0x2bd: V268 = 0x24
0x2bf: V269 = CALLDATALOAD 0x24
0x2c0: V270 = 0x44
0x2c2: V271 = CALLDATALOAD 0x44
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0xa3, V267, V269, V271]
Exit stack: [V10, 0xa3, V267, V269, V271]

================================

Block 0x2c3
[0x2c3:0x2d0]
---
Predecessors: [0x26b, 0x2b6]
Successors: [0x2d1, 0x2d9]
---
0x2c3 JUMPDEST
0x2c4 PUSH1 0x0
0x2c6 PUSH1 0x0
0x2c8 CALLVALUE
0x2c9 PUSH1 0x0
0x2cb EQ
0x2cc DUP1
0x2cd PUSH2 0x2d9
0x2d0 JUMPI
---
0x2c3: JUMPDEST 
0x2c4: V272 = 0x0
0x2c6: V273 = 0x0
0x2c8: V274 = CALLVALUE
0x2c9: V275 = 0x0
0x2cb: V276 = EQ 0x0 V274
0x2cd: V277 = 0x2d9
0x2d0: JUMPI 0x2d9 V276
---
Entry stack: [V10, 0xa3, V240, S4, {0xa3, 0x480}, S2, S1, S0]
Stack pops: 0
Stack additions: [0x0, 0x0, V276]
Exit stack: [V10, 0xa3, V240, S4, {0xa3, 0x480}, S2, S1, S0, 0x0, 0x0, V276]

================================

Block 0x2d1
[0x2d1:0x2d8]
---
Predecessors: [0x2c3]
Successors: [0x2d9]
---
0x2d1 POP
0x2d2 PUSH1 0x64
0x2d4 DUP5
0x2d5 PUSH1 0xff
0x2d7 AND
0x2d8 GT
---
0x2d2: V278 = 0x64
0x2d5: V279 = 0xff
0x2d7: V280 = AND 0xff S4
0x2d8: V281 = GT V280 0x64
---
Entry stack: [V10, 0xa3, V240, S7, {0xa3, 0x480}, S5, S4, S3, 0x0, 0x0, V276]
Stack pops: 5
Stack additions: [S4, S3, S2, S1, V281]
Exit stack: [V10, 0xa3, V240, S7, {0xa3, 0x480}, S5, S4, S3, 0x0, 0x0, V281]

================================

Block 0x2d9
[0x2d9:0x2de]
---
Predecessors: [0x2c3, 0x2d1]
Successors: [0x2df, 0x2eb]
---
0x2d9 JUMPDEST
0x2da DUP1
0x2db PUSH2 0x2eb
0x2de JUMPI
---
0x2d9: JUMPDEST 
0x2db: V282 = 0x2eb
0x2de: JUMPI 0x2eb S0
---
Entry stack: [V10, 0xa3, V240, S7, {0xa3, 0x480}, S5, S4, S3, 0x0, 0x0, S0]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10, 0xa3, V240, S7, {0xa3, 0x480}, S5, S4, S3, 0x0, 0x0, S0]

================================

Block 0x2df
[0x2df:0x2ea]
---
Predecessors: [0x2d9]
Successors: [0x2eb]
---
0x2df POP
0x2e0 PUSH1 0x3
0x2e2 SLOAD
0x2e3 PUSH1 0x4
0x2e5 SLOAD
0x2e6 CALLVALUE
0x2e7 SWAP1
0x2e8 SWAP2
0x2e9 ADD
0x2ea GT
---
0x2e0: V283 = 0x3
0x2e2: V284 = S[0x3]
0x2e3: V285 = 0x4
0x2e5: V286 = S[0x4]
0x2e6: V287 = CALLVALUE
0x2e9: V288 = ADD V284 V287
0x2ea: V289 = GT V288 V286
---
Entry stack: [V10, 0xa3, V240, S7, {0xa3, 0x480}, S5, S4, S3, 0x0, 0x0, S0]
Stack pops: 1
Stack additions: [V289]
Exit stack: [V10, 0xa3, V240, S7, {0xa3, 0x480}, S5, S4, S3, 0x0, 0x0, V289]

================================

Block 0x2eb
[0x2eb:0x2f0]
---
Predecessors: [0x2d9, 0x2df]
Successors: [0x2f1, 0x8a7]
---
0x2eb JUMPDEST
0x2ec ISZERO
0x2ed PUSH2 0x8a7
0x2f0 JUMPI
---
0x2eb: JUMPDEST 
0x2ec: V290 = ISZERO S0
0x2ed: V291 = 0x8a7
0x2f0: JUMPI 0x8a7 V290
---
Entry stack: [V10, 0xa3, V240, S7, {0xa3, 0x480}, S5, S4, S3, 0x0, 0x0, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V10, 0xa3, V240, S7, {0xa3, 0x480}, S5, S4, S3, 0x0, 0x0]

================================

Block 0x2f1
[0x2f1:0x315]
---
Predecessors: [0x2eb]
Successors: [0x429]
---
0x2f1 PUSH1 0x40
0x2f3 MLOAD
0x2f4 PUSH1 0x1
0x2f6 PUSH1 0xa0
0x2f8 PUSH1 0x2
0x2fa EXP
0x2fb SUB
0x2fc DUP5
0x2fd AND
0x2fe SWAP1
0x2ff PUSH1 0x0
0x301 SWAP1
0x302 CALLVALUE
0x303 SWAP1
0x304 DUP3
0x305 DUP2
0x306 DUP2
0x307 DUP2
0x308 DUP6
0x309 DUP9
0x30a DUP4
0x30b CALL
0x30c SWAP4
0x30d POP
0x30e POP
0x30f POP
0x310 POP
0x311 POP
0x312 PUSH2 0x429
0x315 JUMP
---
0x2f1: V292 = 0x40
0x2f3: V293 = M[0x40]
0x2f4: V294 = 0x1
0x2f6: V295 = 0xa0
0x2f8: V296 = 0x2
0x2fa: V297 = EXP 0x2 0xa0
0x2fb: V298 = SUB 0x10000000000000000000000000000000000000000 0x1
0x2fd: V299 = AND S2 0xffffffffffffffffffffffffffffffffffffffff
0x2ff: V300 = 0x0
0x302: V301 = CALLVALUE
0x30b: V302 = CALL 0x0 V299 V301 V293 0x0 V293 0x0
0x312: V303 = 0x429
0x315: JUMP 0x429
---
Entry stack: [V10, 0xa3, V240, S6, {0xa3, 0x480}, S4, S3, S2, 0x0, 0x0]
Stack pops: 3
Stack additions: [S2, S1, S0]
Exit stack: [V10, 0xa3, V240, S6, {0xa3, 0x480}, S4, S3, S2, 0x0, 0x0]

================================

Block 0x316
[0x316:0x31e]
---
Predecessors: [0x98]
Successors: [0x337]
---
0x316 JUMPDEST
0x317 PUSH2 0x337
0x31a PUSH1 0x3
0x31c SLOAD
0x31d DUP2
0x31e JUMP
---
0x316: JUMPDEST 
0x317: V304 = 0x337
0x31a: V305 = 0x3
0x31c: V306 = S[0x3]
0x31e: JUMP 0x337
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x337, V306]
Exit stack: [V10, 0x337, V306]

================================

Block 0x31f
[0x31f:0x336]
---
Predecessors: [0x387]
Successors: []
---
0x31f JUMPDEST
0x320 PUSH1 0x40
0x322 DUP1
0x323 MLOAD
0x324 PUSH2 0xffff
0x327 SWAP3
0x328 SWAP1
0x329 SWAP3
0x32a AND
0x32b DUP3
0x32c MSTORE
0x32d MLOAD
0x32e SWAP1
0x32f DUP2
0x330 SWAP1
0x331 SUB
0x332 PUSH1 0x20
0x334 ADD
0x335 SWAP1
0x336 RETURN
---
0x31f: JUMPDEST 
0x320: V307 = 0x40
0x323: V308 = M[0x40]
0x324: V309 = 0xffff
0x32a: V310 = AND 0xffff S0
0x32c: M[V308] = V310
0x32d: V311 = M[0x40]
0x331: V312 = SUB V308 V311
0x332: V313 = 0x20
0x334: V314 = ADD 0x20 V312
0x336: RETURN V311 V314
---
Entry stack: [V10, 0xa3, V240, S7, {0xa3, 0x480}, S5, S4, S3, 0x0, S1, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V10, 0xa3, V240, S7, {0xa3, 0x480}, S5, S4, S3, 0x0, S1]

================================

Block 0x337
[0x337:0x348]
---
Predecessors: [0x23a, 0x262, 0x316]
Successors: []
---
0x337 JUMPDEST
0x338 PUSH1 0x40
0x33a DUP1
0x33b MLOAD
0x33c SWAP2
0x33d DUP3
0x33e MSTORE
0x33f MLOAD
0x340 SWAP1
0x341 DUP2
0x342 SWAP1
0x343 SUB
0x344 PUSH1 0x20
0x346 ADD
0x347 SWAP1
0x348 RETURN
---
0x337: JUMPDEST 
0x338: V315 = 0x40
0x33b: V316 = M[0x40]
0x33e: M[V316] = S0
0x33f: V317 = M[0x40]
0x343: V318 = SUB V316 V317
0x344: V319 = 0x20
0x346: V320 = ADD 0x20 V318
0x348: RETURN V317 V320
---
Entry stack: [V10, 0x337, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V10, 0x337]

================================

Block 0x349
[0x349:0x37b]
---
Predecessors: [0x156]
Successors: [0x37c]
---
0x349 JUMPDEST
0x34a PUSH2 0xffff
0x34d DUP3
0x34e DUP2
0x34f AND
0x350 PUSH1 0x0
0x352 SWAP1
0x353 DUP2
0x354 MSTORE
0x355 PUSH1 0x8
0x357 PUSH1 0x20
0x359 SWAP1
0x35a DUP2
0x35b MSTORE
0x35c PUSH1 0x40
0x35e DUP1
0x35f DUP4
0x360 SHA3
0x361 SWAP4
0x362 DUP6
0x363 AND
0x364 DUP4
0x365 MSTORE
0x366 PUSH1 0x1
0x368 SWAP4
0x369 SWAP1
0x36a SWAP4
0x36b ADD
0x36c SWAP1
0x36d MSTORE
0x36e SHA3
0x36f PUSH1 0x4
0x371 ADD
0x372 DUP1
0x373 SLOAD
0x374 PUSH1 0xff
0x376 NOT
0x377 AND
0x378 DUP5
0x379 OR
0x37a SWAP1
0x37b SSTORE
---
0x349: JUMPDEST 
0x34a: V321 = 0xffff
0x34f: V322 = AND 0xffff V119
0x350: V323 = 0x0
0x354: M[0x0] = V322
0x355: V324 = 0x8
0x357: V325 = 0x20
0x35b: M[0x20] = 0x8
0x35c: V326 = 0x40
0x360: V327 = SHA3 0x0 0x40
0x363: V328 = AND V121 0xffff
0x365: M[0x0] = V328
0x366: V329 = 0x1
0x36b: V330 = ADD 0x1 V327
0x36d: M[0x20] = V330
0x36e: V331 = SHA3 0x0 0x40
0x36f: V332 = 0x4
0x371: V333 = ADD 0x4 V331
0x373: V334 = S[V333]
0x374: V335 = 0xff
0x376: V336 = NOT 0xff
0x377: V337 = AND 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00 V334
0x379: V338 = OR V117 V337
0x37b: S[V333] = V338
---
Entry stack: [V10, 0xa3, V117, V119, V121]
Stack pops: 3
Stack additions: [S2, S1, S0]
Exit stack: [V10, 0xa3, V117, V119, V121]

================================

Block 0x37c
[0x37c:0x380]
---
Predecessors: [0x18b, 0x349]
Successors: [0xa3]
---
0x37c JUMPDEST
0x37d POP
0x37e POP
0x37f POP
0x380 JUMP
---
0x37c: JUMPDEST 
0x380: JUMP 0xa3
---
Entry stack: [V10, 0xa3, V117, V119, V121]
Stack pops: 4
Stack additions: []
Exit stack: [V10]

================================

Block 0x381
[0x381:0x386]
---
Predecessors: [0x19a]
Successors: [0x387]
---
0x381 JUMPDEST
0x382 PUSH2 0xffff
0x385 SWAP2
0x386 POP
---
0x381: JUMPDEST 
0x382: V339 = 0xffff
---
Entry stack: [V10, 0xa3, V240, S10, {0xa3, 0x480}, S8, S7, S6, 0x0, S4, {0x31f, 0x71e}, S2, 0x0, S0]
Stack pops: 2
Stack additions: [0xffff, S0]
Exit stack: [V10, 0xa3, V240, S10, {0xa3, 0x480}, S8, S7, S6, 0x0, S4, {0x31f, 0x71e}, S2, 0xffff, S0]

================================

Block 0x387
[0x387:0x38c]
---
Predecessors: [0x1d4, 0x381]
Successors: [0x31f, 0x71e]
---
0x387 JUMPDEST
0x388 POP
0x389 SWAP2
0x38a SWAP1
0x38b POP
0x38c JUMP
---
0x387: JUMPDEST 
0x38c: JUMP {0x31f, 0x71e}
---
Entry stack: [V10, 0xa3, V240, S10, {0xa3, 0x480}, S8, S7, S6, 0x0, S4, {0x31f, 0x71e}, S2, S1, S0]
Stack pops: 4
Stack additions: [S1]
Exit stack: [V10, 0xa3, V240, S10, {0xa3, 0x480}, S8, S7, S6, 0x0, S4, S1]

================================

Block 0x38d
[0x38d:0x394]
---
Predecessors: [0x1ad]
Successors: [0x19a]
---
0x38d JUMPDEST
0x38e PUSH1 0x1
0x390 ADD
0x391 PUSH2 0x19a
0x394 JUMP
---
0x38d: JUMPDEST 
0x38e: V340 = 0x1
0x390: V341 = ADD 0x1 S0
0x391: V342 = 0x19a
0x394: JUMP 0x19a
---
Entry stack: [V10, 0xa3, V240, S10, {0xa3, 0x480}, S8, S7, S6, 0x0, S4, {0x31f, 0x71e}, S2, 0x0, S0]
Stack pops: 1
Stack additions: [V341]
Exit stack: [V10, 0xa3, V240, S10, {0xa3, 0x480}, S8, S7, S6, 0x0, S4, {0x31f, 0x71e}, S2, 0x0, V341]

================================

Block 0x395
[0x395:0x428]
---
Predecessors: [0x1db]
Successors: [0x429]
---
0x395 JUMPDEST
0x396 PUSH1 0x1
0x398 DUP1
0x399 SLOAD
0x39a PUSH1 0x4
0x39c DUP7
0x39d SWAP1
0x39e SSTORE
0x39f PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x3b4 NOT
0x3b5 AND
0x3b6 DUP7
0x3b7 OR
0x3b8 PUSH32 0xffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff
0x3d9 AND
0x3da PUSH2 0xffff
0x3dd DUP6
0x3de DUP2
0x3df AND
0x3e0 PUSH1 0xa0
0x3e2 PUSH1 0x2
0x3e4 EXP
0x3e5 MUL
0x3e6 SWAP2
0x3e7 SWAP1
0x3e8 SWAP2
0x3e9 OR
0x3ea SWAP1
0x3eb SWAP2
0x3ec SSTORE
0x3ed PUSH1 0x2
0x3ef DUP1
0x3f0 SLOAD
0x3f1 DUP5
0x3f2 DUP4
0x3f3 AND
0x3f4 PUSH8 0xffffffffffffffff
0x3fd NOT
0x3fe SWAP1
0x3ff SWAP2
0x400 AND
0x401 OR
0x402 PUSH16 0xffffffffffffffff0000000000000000
0x413 NOT
0x414 AND
0x415 SWAP2
0x416 DUP4
0x417 AND
0x418 PUSH9 0x10000000000000000
0x422 MUL
0x423 SWAP2
0x424 SWAP1
0x425 SWAP2
0x426 OR
0x427 SWAP1
0x428 SSTORE
---
0x395: JUMPDEST 
0x396: V343 = 0x1
0x399: V344 = S[0x1]
0x39a: V345 = 0x4
0x39e: S[0x4] = V176
0x39f: V346 = 0xffffffffffffffffffffffffffffffffffffffff
0x3b4: V347 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0x3b5: V348 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V344
0x3b7: V349 = OR V174 V348
0x3b8: V350 = 0xffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff
0x3d9: V351 = AND 0xffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff V349
0x3da: V352 = 0xffff
0x3df: V353 = AND 0xffff V178
0x3e0: V354 = 0xa0
0x3e2: V355 = 0x2
0x3e4: V356 = EXP 0x2 0xa0
0x3e5: V357 = MUL 0x10000000000000000000000000000000000000000 V353
0x3e9: V358 = OR V357 V351
0x3ec: S[0x1] = V358
0x3ed: V359 = 0x2
0x3f0: V360 = S[0x2]
0x3f3: V361 = AND 0xffff V180
0x3f4: V362 = 0xffffffffffffffff
0x3fd: V363 = NOT 0xffffffffffffffff
0x400: V364 = AND V360 0xffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000
0x401: V365 = OR V364 V361
0x402: V366 = 0xffffffffffffffff0000000000000000
0x413: V367 = NOT 0xffffffffffffffff0000000000000000
0x414: V368 = AND 0xffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff V365
0x417: V369 = AND V182 0xffff
0x418: V370 = 0x10000000000000000
0x422: V371 = MUL 0x10000000000000000 V369
0x426: V372 = OR V371 V368
0x428: S[0x2] = V372
---
Entry stack: [V10, 0xa3, V174, V176, V178, V180, V182]
Stack pops: 5
Stack additions: [S4, S3, S2, S1, S0]
Exit stack: [V10, 0xa3, V174, V176, V178, V180, V182]

================================

Block 0x429
[0x429:0x42f]
---
Predecessors: [0x205, 0x2f1, 0x395]
Successors: [0xa3, 0x480]
---
0x429 JUMPDEST
0x42a POP
0x42b POP
0x42c POP
0x42d POP
0x42e POP
0x42f JUMP
---
0x429: JUMPDEST 
0x42f: JUMP {0xa3, 0x480}
---
Entry stack: [V10, 0xa3, V240, S6, {0xa3, 0x480}, S4, S3, S2, S1, S0]
Stack pops: 6
Stack additions: []
Exit stack: [V10, 0xa3, V240, S6]

================================

Block 0x430
[0x430:0x454]
---
Predecessors: [0x230]
Successors: [0x455]
---
0x430 JUMPDEST
0x431 PUSH1 0x0
0x433 DUP1
0x434 SLOAD
0x435 PUSH1 0x40
0x437 MLOAD
0x438 PUSH1 0x1
0x43a PUSH1 0xa0
0x43c PUSH1 0x2
0x43e EXP
0x43f SUB
0x440 SWAP2
0x441 SWAP1
0x442 SWAP2
0x443 AND
0x444 SWAP2
0x445 SWAP1
0x446 DUP4
0x447 SWAP1
0x448 DUP3
0x449 DUP2
0x44a DUP2
0x44b DUP2
0x44c DUP6
0x44d DUP9
0x44e DUP4
0x44f CALL
0x450 POP
0x451 POP
0x452 POP
0x453 POP
0x454 POP
---
0x430: JUMPDEST 
0x431: V373 = 0x0
0x434: V374 = S[0x0]
0x435: V375 = 0x40
0x437: V376 = M[0x40]
0x438: V377 = 0x1
0x43a: V378 = 0xa0
0x43c: V379 = 0x2
0x43e: V380 = EXP 0x2 0xa0
0x43f: V381 = SUB 0x10000000000000000000000000000000000000000 0x1
0x443: V382 = AND 0xffffffffffffffffffffffffffffffffffffffff V374
0x44f: V383 = CALL 0x0 V382 V198 V376 0x0 V376 0x0
---
Entry stack: [V10, 0xa3, V198]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10, 0xa3, V198]

================================

Block 0x455
[0x455:0x457]
---
Predecessors: [0x236, 0x430]
Successors: [0xa3]
---
0x455 JUMPDEST
0x456 POP
0x457 JUMP
---
0x455: JUMPDEST 
0x457: JUMP 0xa3
---
Entry stack: [V10, 0xa3, V198]
Stack pops: 2
Stack additions: []
Exit stack: [V10]

================================

Block 0x458
[0x458:0x47d]
---
Predecessors: [0x243]
Successors: [0x47e]
---
0x458 JUMPDEST
0x459 PUSH1 0x0
0x45b DUP1
0x45c SLOAD
0x45d PUSH1 0x40
0x45f MLOAD
0x460 PUSH1 0x1
0x462 PUSH1 0xa0
0x464 PUSH1 0x2
0x466 EXP
0x467 SUB
0x468 SWAP2
0x469 DUP3
0x46a AND
0x46b SWAP3
0x46c SWAP2
0x46d ADDRESS
0x46e AND
0x46f BALANCE
0x470 SWAP1
0x471 DUP3
0x472 DUP2
0x473 DUP2
0x474 DUP2
0x475 DUP6
0x476 DUP9
0x477 DUP4
0x478 CALL
0x479 POP
0x47a POP
0x47b POP
0x47c POP
0x47d POP
---
0x458: JUMPDEST 
0x459: V384 = 0x0
0x45c: V385 = S[0x0]
0x45d: V386 = 0x40
0x45f: V387 = M[0x40]
0x460: V388 = 0x1
0x462: V389 = 0xa0
0x464: V390 = 0x2
0x466: V391 = EXP 0x2 0xa0
0x467: V392 = SUB 0x10000000000000000000000000000000000000000 0x1
0x46a: V393 = AND 0xffffffffffffffffffffffffffffffffffffffff V385
0x46d: V394 = ADDRESS
0x46e: V395 = AND V394 0xffffffffffffffffffffffffffffffffffffffff
0x46f: V396 = BALANCE V395
0x478: V397 = CALL 0x0 V393 V396 V387 0x0 V387 0x0
---
Entry stack: [V10, 0xa3]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xa3]

================================

Block 0x47e
[0x47e:0x47f]
---
Predecessors: [0x25e, 0x458]
Successors: [0xa3]
---
0x47e JUMPDEST
0x47f JUMP
---
0x47e: JUMPDEST 
0x47f: JUMP 0xa3
---
Entry stack: [V10, 0xa3]
Stack pops: 1
Stack additions: []
Exit stack: [V10]

================================

Block 0x480
[0x480:0x483]
---
Predecessors: [0x429, 0x8b0]
Successors: [0xa3]
---
0x480 JUMPDEST
0x481 POP
0x482 POP
0x483 JUMP
---
0x480: JUMPDEST 
0x483: JUMP 0xa3
---
Entry stack: [V10, 0xa3, S1, S0]
Stack pops: 3
Stack additions: []
Exit stack: [V10]

================================

Block 0x484
[0x484:0x4a3]
---
Predecessors: [0x27f]
Successors: [0x4a4]
---
0x484 JUMPDEST
0x485 PUSH1 0x5
0x487 SLOAD
0x488 PUSH1 0x6
0x48a SLOAD
0x48b ADDRESS
0x48c PUSH1 0x1
0x48e PUSH1 0xa0
0x490 PUSH1 0x2
0x492 EXP
0x493 SUB
0x494 AND
0x495 BALANCE
0x496 SWAP2
0x497 SWAP1
0x498 SWAP2
0x499 SUB
0x49a SUB
0x49b SWAP6
0x49c POP
0x49d PUSH1 0x0
0x49f SWAP5
0x4a0 POP
0x4a1 DUP5
0x4a2 SWAP4
0x4a3 POP
---
0x484: JUMPDEST 
0x485: V398 = 0x5
0x487: V399 = S[0x5]
0x488: V400 = 0x6
0x48a: V401 = S[0x6]
0x48b: V402 = ADDRESS
0x48c: V403 = 0x1
0x48e: V404 = 0xa0
0x490: V405 = 0x2
0x492: V406 = EXP 0x2 0xa0
0x493: V407 = SUB 0x10000000000000000000000000000000000000000 0x1
0x494: V408 = AND 0xffffffffffffffffffffffffffffffffffffffff V402
0x495: V409 = BALANCE V408
0x499: V410 = SUB V409 V399
0x49a: V411 = SUB V410 V401
0x49d: V412 = 0x0
---
Entry stack: [V10, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
Stack pops: 6
Stack additions: [V411, 0x0, 0x0, S2, S1, S0]
Exit stack: [V10, 0xa3, V411, 0x0, 0x0, 0x0, 0x0, 0x0]

================================

Block 0x4a4
[0x4a4:0x4b6]
---
Predecessors: [0x484, 0x572]
Successors: [0x4b7, 0x53d]
---
0x4a4 JUMPDEST
0x4a5 PUSH1 0x7
0x4a7 SLOAD
0x4a8 PUSH2 0xffff
0x4ab SWAP1
0x4ac DUP2
0x4ad AND
0x4ae SWAP1
0x4af DUP6
0x4b0 AND
0x4b1 LT
0x4b2 ISZERO
0x4b3 PUSH2 0x53d
0x4b6 JUMPI
---
0x4a4: JUMPDEST 
0x4a5: V413 = 0x7
0x4a7: V414 = S[0x7]
0x4a8: V415 = 0xffff
0x4ad: V416 = AND 0xffff V414
0x4b0: V417 = AND S3 0xffff
0x4b1: V418 = LT V417 V416
0x4b2: V419 = ISZERO V418
0x4b3: V420 = 0x53d
0x4b6: JUMPI 0x53d V419
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, S1, S0]
Stack pops: 4
Stack additions: [S3, S2, S1, S0]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, S1, S0]

================================

Block 0x4b7
[0x4b7:0x4ba]
---
Predecessors: [0x4a4]
Successors: [0x4bb]
---
0x4b7 PUSH1 0x0
0x4b9 SWAP3
0x4ba POP
---
0x4b7: V421 = 0x0
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, S1, S0]
Stack pops: 3
Stack additions: [0x0, S1, S0]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, 0x0, S1, S0]

================================

Block 0x4bb
[0x4bb:0x4e2]
---
Predecessors: [0x4b7, 0x89b]
Successors: [0x4e3, 0x572]
---
0x4bb JUMPDEST
0x4bc PUSH2 0xffff
0x4bf DUP5
0x4c0 DUP2
0x4c1 AND
0x4c2 PUSH1 0x0
0x4c4 SWAP1
0x4c5 DUP2
0x4c6 MSTORE
0x4c7 PUSH1 0x8
0x4c9 PUSH1 0x20
0x4cb MSTORE
0x4cc PUSH1 0x40
0x4ce SWAP1
0x4cf SHA3
0x4d0 SLOAD
0x4d1 PUSH1 0xa0
0x4d3 PUSH1 0x2
0x4d5 EXP
0x4d6 SWAP1
0x4d7 DIV
0x4d8 DUP2
0x4d9 AND
0x4da SWAP1
0x4db DUP5
0x4dc AND
0x4dd LT
0x4de ISZERO
0x4df PUSH2 0x572
0x4e2 JUMPI
---
0x4bb: JUMPDEST 
0x4bc: V422 = 0xffff
0x4c1: V423 = AND 0xffff S3
0x4c2: V424 = 0x0
0x4c6: M[0x0] = V423
0x4c7: V425 = 0x8
0x4c9: V426 = 0x20
0x4cb: M[0x20] = 0x8
0x4cc: V427 = 0x40
0x4cf: V428 = SHA3 0x0 0x40
0x4d0: V429 = S[V428]
0x4d1: V430 = 0xa0
0x4d3: V431 = 0x2
0x4d5: V432 = EXP 0x2 0xa0
0x4d7: V433 = DIV V429 0x10000000000000000000000000000000000000000
0x4d9: V434 = AND 0xffff V433
0x4dc: V435 = AND S2 0xffff
0x4dd: V436 = LT V435 V434
0x4de: V437 = ISZERO V436
0x4df: V438 = 0x572
0x4e2: JUMPI 0x572 V437
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, S1, S0]
Stack pops: 4
Stack additions: [S3, S2, S1, S0]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, S1, S0]

================================

Block 0x4e3
[0x4e3:0x508]
---
Predecessors: [0x4bb]
Successors: [0x509, 0x51d]
---
0x4e3 PUSH1 0x40
0x4e5 PUSH1 0x0
0x4e7 DUP2
0x4e8 DUP2
0x4e9 SHA3
0x4ea PUSH2 0xffff
0x4ed DUP7
0x4ee AND
0x4ef DUP3
0x4f0 MSTORE
0x4f1 PUSH1 0x1
0x4f3 ADD
0x4f4 PUSH1 0x20
0x4f6 MSTORE
0x4f7 SHA3
0x4f8 PUSH1 0x7
0x4fa DUP2
0x4fb ADD
0x4fc SLOAD
0x4fd SWAP1
0x4fe SWAP3
0x4ff POP
0x500 PUSH1 0xff
0x502 AND
0x503 DUP1
0x504 ISZERO
0x505 PUSH2 0x51d
0x508 JUMPI
---
0x4e3: V439 = 0x40
0x4e5: V440 = 0x0
0x4e9: V441 = SHA3 0x0 0x40
0x4ea: V442 = 0xffff
0x4ee: V443 = AND S2 0xffff
0x4f0: M[0x0] = V443
0x4f1: V444 = 0x1
0x4f3: V445 = ADD 0x1 V441
0x4f4: V446 = 0x20
0x4f6: M[0x20] = V445
0x4f7: V447 = SHA3 0x0 0x40
0x4f8: V448 = 0x7
0x4fb: V449 = ADD V447 0x7
0x4fc: V450 = S[V449]
0x500: V451 = 0xff
0x502: V452 = AND 0xff V450
0x504: V453 = ISZERO V452
0x505: V454 = 0x51d
0x508: JUMPI 0x51d V453
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, S1, S0]
Stack pops: 3
Stack additions: [S2, V447, S0, V452]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, S0, V452]

================================

Block 0x509
[0x509:0x51c]
---
Predecessors: [0x4e3]
Successors: [0x51d]
---
0x509 POP
0x50a PUSH1 0x5
0x50c DUP3
0x50d ADD
0x50e SLOAD
0x50f PUSH1 0x6
0x511 DUP4
0x512 ADD
0x513 SLOAD
0x514 PUSH3 0x69780
0x518 SWAP2
0x519 SWAP1
0x51a SWAP2
0x51b ADD
0x51c EQ
---
0x50a: V455 = 0x5
0x50d: V456 = ADD V447 0x5
0x50e: V457 = S[V456]
0x50f: V458 = 0x6
0x512: V459 = ADD V447 0x6
0x513: V460 = S[V459]
0x514: V461 = 0x69780
0x51b: V462 = ADD 0x69780 V457
0x51c: V463 = EQ V462 V460
---
Entry stack: [V10, 0xa3, S6, {0x0, 0x1}, S4, S3, V447, S1, V452]
Stack pops: 3
Stack additions: [S2, S1, V463]
Exit stack: [V10, 0xa3, S6, {0x0, 0x1}, S4, S3, V447, S1, V463]

================================

Block 0x51d
[0x51d:0x522]
---
Predecessors: [0x4e3, 0x509]
Successors: [0x523, 0x533]
---
0x51d JUMPDEST
0x51e DUP1
0x51f PUSH2 0x533
0x522 JUMPI
---
0x51d: JUMPDEST 
0x51f: V464 = 0x533
0x522: JUMPI 0x533 S0
---
Entry stack: [V10, 0xa3, S6, {0x0, 0x1}, S4, S3, V447, S1, S0]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10, 0xa3, S6, {0x0, 0x1}, S4, S3, V447, S1, S0]

================================

Block 0x523
[0x523:0x532]
---
Predecessors: [0x51d]
Successors: [0x533]
---
0x523 POP
0x524 PUSH3 0x15180
0x528 DUP3
0x529 PUSH1 0x6
0x52b ADD
0x52c PUSH1 0x0
0x52e POP
0x52f SLOAD
0x530 TIMESTAMP
0x531 SUB
0x532 LT
---
0x524: V465 = 0x15180
0x529: V466 = 0x6
0x52b: V467 = ADD 0x6 V447
0x52c: V468 = 0x0
0x52f: V469 = S[V467]
0x530: V470 = TIMESTAMP
0x531: V471 = SUB V470 V469
0x532: V472 = LT V471 0x15180
---
Entry stack: [V10, 0xa3, S6, {0x0, 0x1}, S4, S3, V447, S1, S0]
Stack pops: 3
Stack additions: [S2, S1, V472]
Exit stack: [V10, 0xa3, S6, {0x0, 0x1}, S4, S3, V447, S1, V472]

================================

Block 0x533
[0x533:0x538]
---
Predecessors: [0x51d, 0x523]
Successors: [0x539, 0x57e]
---
0x533 JUMPDEST
0x534 ISZERO
0x535 PUSH2 0x57e
0x538 JUMPI
---
0x533: JUMPDEST 
0x534: V473 = ISZERO S0
0x535: V474 = 0x57e
0x538: JUMPI 0x57e V473
---
Entry stack: [V10, 0xa3, S6, {0x0, 0x1}, S4, S3, V447, S1, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V10, 0xa3, S6, {0x0, 0x1}, S4, S3, V447, S1]

================================

Block 0x539
[0x539:0x53c]
---
Predecessors: [0x533]
Successors: [0x89b]
---
0x539 PUSH2 0x89b
0x53c JUMP
---
0x539: V475 = 0x89b
0x53c: JUMP 0x89b
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, S0]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, S0]

================================

Block 0x53d
[0x53d:0x544]
---
Predecessors: [0x4a4]
Successors: [0x545, 0x56a]
---
0x53d JUMPDEST
0x53e DUP5
0x53f ISZERO
0x540 ISZERO
0x541 PUSH2 0x56a
0x544 JUMPI
---
0x53d: JUMPDEST 
0x53f: V476 = ISZERO {0x0, 0x1}
0x540: V477 = ISZERO V476
0x541: V478 = 0x56a
0x544: JUMPI 0x56a V477
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, S1, S0]
Stack pops: 5
Stack additions: [S4, S3, S2, S1, S0]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, S1, S0]

================================

Block 0x545
[0x545:0x569]
---
Predecessors: [0x53d]
Successors: [0x56a]
---
0x545 PUSH1 0x1
0x547 SLOAD
0x548 PUSH1 0x40
0x54a MLOAD
0x54b PUSH1 0x1
0x54d PUSH1 0xa0
0x54f PUSH1 0x2
0x551 EXP
0x552 SUB
0x553 SWAP2
0x554 SWAP1
0x555 SWAP2
0x556 AND
0x557 SWAP1
0x558 PUSH1 0x0
0x55a SWAP1
0x55b DUP9
0x55c SWAP1
0x55d DUP3
0x55e DUP2
0x55f DUP2
0x560 DUP2
0x561 DUP6
0x562 DUP9
0x563 DUP4
0x564 CALL
0x565 POP
0x566 POP
0x567 POP
0x568 POP
0x569 POP
---
0x545: V479 = 0x1
0x547: V480 = S[0x1]
0x548: V481 = 0x40
0x54a: V482 = M[0x40]
0x54b: V483 = 0x1
0x54d: V484 = 0xa0
0x54f: V485 = 0x2
0x551: V486 = EXP 0x2 0xa0
0x552: V487 = SUB 0x10000000000000000000000000000000000000000 0x1
0x556: V488 = AND 0xffffffffffffffffffffffffffffffffffffffff V480
0x558: V489 = 0x0
0x564: V490 = CALL 0x0 V488 S5 V482 0x0 V482 0x0
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, S1, S0]
Stack pops: 6
Stack additions: [S5, S4, S3, S2, S1, S0]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, S1, S0]

================================

Block 0x56a
[0x56a:0x571]
---
Predecessors: [0x2a5, 0x53d, 0x545]
Successors: [0xa3]
---
0x56a JUMPDEST
0x56b POP
0x56c POP
0x56d POP
0x56e POP
0x56f POP
0x570 POP
0x571 JUMP
---
0x56a: JUMPDEST 
0x571: JUMP 0xa3
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, S1, S0]
Stack pops: 7
Stack additions: []
Exit stack: [V10]

================================

Block 0x572
[0x572:0x57d]
---
Predecessors: [0x4bb]
Successors: [0x4a4]
---
0x572 JUMPDEST
0x573 PUSH1 0x1
0x575 SWAP4
0x576 SWAP1
0x577 SWAP4
0x578 ADD
0x579 SWAP3
0x57a PUSH2 0x4a4
0x57d JUMP
---
0x572: JUMPDEST 
0x573: V491 = 0x1
0x578: V492 = ADD 0x1 S3
0x57a: V493 = 0x4a4
0x57d: JUMP 0x4a4
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, S1, S0]
Stack pops: 4
Stack additions: [V492, S2, S1, S0]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, V492, S2, S1, S0]

================================

Block 0x57e
[0x57e:0x59f]
---
Predecessors: [0x533]
Successors: [0x5a0, 0x668]
---
0x57e JUMPDEST
0x57f POP
0x580 PUSH1 0x5
0x582 DUP2
0x583 ADD
0x584 SLOAD
0x585 PUSH1 0x6
0x587 DUP3
0x588 ADD
0x589 SLOAD
0x58a PUSH3 0x15180
0x58e TIMESTAMP
0x58f SWAP2
0x590 DUP3
0x591 SUB
0x592 DIV
0x593 SWAP2
0x594 PUSH3 0x69780
0x598 ADD
0x599 SWAP1
0x59a GT
0x59b ISZERO
0x59c PUSH2 0x668
0x59f JUMPI
---
0x57e: JUMPDEST 
0x580: V494 = 0x5
0x583: V495 = ADD V447 0x5
0x584: V496 = S[V495]
0x585: V497 = 0x6
0x588: V498 = ADD V447 0x6
0x589: V499 = S[V498]
0x58a: V500 = 0x15180
0x58e: V501 = TIMESTAMP
0x591: V502 = SUB V501 V499
0x592: V503 = DIV V502 0x15180
0x594: V504 = 0x69780
0x598: V505 = ADD 0x69780 V496
0x59a: V506 = GT V501 V505
0x59b: V507 = ISZERO V506
0x59c: V508 = 0x668
0x59f: JUMPI 0x668 V507
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, S0]
Stack pops: 2
Stack additions: [S1, V503]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, V503]

================================

Block 0x5a0
[0x5a0:0x5c7]
---
Predecessors: [0x57e]
Successors: [0x5c8, 0x668]
---
0x5a0 POP
0x5a1 PUSH1 0x5
0x5a3 DUP2
0x5a4 ADD
0x5a5 SLOAD
0x5a6 PUSH1 0x6
0x5a8 DUP3
0x5a9 ADD
0x5aa SLOAD
0x5ab PUSH1 0x7
0x5ad DUP4
0x5ae ADD
0x5af SLOAD
0x5b0 PUSH3 0x15180
0x5b4 SWAP2
0x5b5 SWAP1
0x5b6 SWAP3
0x5b7 SUB
0x5b8 PUSH3 0x69780
0x5bc ADD
0x5bd DIV
0x5be SWAP1
0x5bf PUSH1 0xff
0x5c1 AND
0x5c2 ISZERO
0x5c3 ISZERO
0x5c4 PUSH2 0x668
0x5c7 JUMPI
---
0x5a1: V509 = 0x5
0x5a4: V510 = ADD V447 0x5
0x5a5: V511 = S[V510]
0x5a6: V512 = 0x6
0x5a9: V513 = ADD V447 0x6
0x5aa: V514 = S[V513]
0x5ab: V515 = 0x7
0x5ae: V516 = ADD V447 0x7
0x5af: V517 = S[V516]
0x5b0: V518 = 0x15180
0x5b7: V519 = SUB V511 V514
0x5b8: V520 = 0x69780
0x5bc: V521 = ADD 0x69780 V519
0x5bd: V522 = DIV V521 0x15180
0x5bf: V523 = 0xff
0x5c1: V524 = AND 0xff V517
0x5c2: V525 = ISZERO V524
0x5c3: V526 = ISZERO V525
0x5c4: V527 = 0x668
0x5c7: JUMPI 0x668 V526
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, V503]
Stack pops: 2
Stack additions: [S1, V522]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, V522]

================================

Block 0x5c8
[0x5c8:0x5d4]
---
Predecessors: [0x5a0]
Successors: [0x5d5, 0x5ea]
---
0x5c8 PUSH1 0x4
0x5ca DUP3
0x5cb ADD
0x5cc SLOAD
0x5cd PUSH1 0xff
0x5cf AND
0x5d0 ISZERO
0x5d1 PUSH2 0x5ea
0x5d4 JUMPI
---
0x5c8: V528 = 0x4
0x5cb: V529 = ADD V447 0x4
0x5cc: V530 = S[V529]
0x5cd: V531 = 0xff
0x5cf: V532 = AND 0xff V530
0x5d0: V533 = ISZERO V532
0x5d1: V534 = 0x5ea
0x5d4: JUMPI 0x5ea V533
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, V522]
Stack pops: 2
Stack additions: [S1, S0]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, V522]

================================

Block 0x5d5
[0x5d5:0x5e9]
---
Predecessors: [0x5c8]
Successors: [0x78f]
---
0x5d5 DUP2
0x5d6 SLOAD
0x5d7 PUSH1 0x1
0x5d9 DUP4
0x5da DUP2
0x5db ADD
0x5dc SLOAD
0x5dd PUSH2 0x70a
0x5e0 SWAP3
0x5e1 DUP8
0x5e2 SWAP3
0x5e3 SWAP1
0x5e4 SWAP2
0x5e5 SWAP1
0x5e6 PUSH2 0x78f
0x5e9 JUMP
---
0x5d6: V535 = S[V447]
0x5d7: V536 = 0x1
0x5db: V537 = ADD 0x1 V447
0x5dc: V538 = S[V537]
0x5dd: V539 = 0x70a
0x5e6: V540 = 0x78f
0x5e9: JUMP 0x78f
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, V522]
Stack pops: 4
Stack additions: [S3, S2, S1, S0, 0x70a, S3, V535, V538, 0x1]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, V522, 0x70a, S3, V535, V538, 0x1]

================================

Block 0x5ea
[0x5ea:0x5f4]
---
Predecessors: [0x5c8]
Successors: [0x5f5, 0x668]
---
0x5ea JUMPDEST
0x5eb DUP2
0x5ec SLOAD
0x5ed PUSH1 0x5
0x5ef SLOAD
0x5f0 LT
0x5f1 PUSH2 0x668
0x5f4 JUMPI
---
0x5ea: JUMPDEST 
0x5ec: V541 = S[V447]
0x5ed: V542 = 0x5
0x5ef: V543 = S[0x5]
0x5f0: V544 = LT V543 V541
0x5f1: V545 = 0x668
0x5f4: JUMPI 0x668 V544
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, V522]
Stack pops: 2
Stack additions: [S1, S0]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, V522]

================================

Block 0x5f5
[0x5f5:0x667]
---
Predecessors: [0x5ea]
Successors: [0x668]
---
0x5f5 DUP2
0x5f6 SLOAD
0x5f7 PUSH1 0x5
0x5f9 DUP1
0x5fa SLOAD
0x5fb SWAP2
0x5fc SWAP1
0x5fd SWAP2
0x5fe SUB
0x5ff SWAP1
0x600 SSTORE
0x601 PUSH1 0x1
0x603 DUP3
0x604 ADD
0x605 DUP1
0x606 SLOAD
0x607 PUSH1 0x6
0x609 DUP1
0x60a SLOAD
0x60b SWAP2
0x60c SWAP1
0x60d SWAP2
0x60e SUB
0x60f SWAP1
0x610 SSTORE
0x611 DUP3
0x612 SLOAD
0x613 DUP2
0x614 SLOAD
0x615 PUSH1 0x3
0x617 DUP1
0x618 SLOAD
0x619 SWAP2
0x61a SWAP1
0x61b SWAP3
0x61c ADD
0x61d SWAP1
0x61e SUB
0x61f SWAP1
0x620 SSTORE
0x621 PUSH2 0xffff
0x624 DUP6
0x625 AND
0x626 PUSH1 0x0
0x628 SWAP1
0x629 DUP2
0x62a MSTORE
0x62b PUSH1 0x8
0x62d PUSH1 0x20
0x62f MSTORE
0x630 SWAP1
0x631 SLOAD
0x632 DUP4
0x633 SLOAD
0x634 PUSH1 0x40
0x636 DUP1
0x637 MLOAD
0x638 SWAP1
0x639 DUP5
0x63a SHA3
0x63b SLOAD
0x63c PUSH1 0x1
0x63e PUSH1 0xa0
0x640 PUSH1 0x2
0x642 EXP
0x643 SUB
0x644 AND
0x645 SWAP4
0x646 SWAP3
0x647 SWAP2
0x648 SWAP1
0x649 SWAP2
0x64a ADD
0x64b SWAP1
0x64c DUP3
0x64d DUP2
0x64e DUP2
0x64f DUP2
0x650 DUP6
0x651 DUP9
0x652 DUP4
0x653 CALL
0x654 POP
0x655 POP
0x656 POP
0x657 POP
0x658 PUSH1 0x7
0x65a DUP4
0x65b ADD
0x65c DUP1
0x65d SLOAD
0x65e PUSH1 0xff
0x660 NOT
0x661 AND
0x662 PUSH1 0x1
0x664 OR
0x665 SWAP1
0x666 SSTORE
0x667 POP
---
0x5f6: V546 = S[V447]
0x5f7: V547 = 0x5
0x5fa: V548 = S[0x5]
0x5fe: V549 = SUB V548 V546
0x600: S[0x5] = V549
0x601: V550 = 0x1
0x604: V551 = ADD V447 0x1
0x606: V552 = S[V551]
0x607: V553 = 0x6
0x60a: V554 = S[0x6]
0x60e: V555 = SUB V554 V552
0x610: S[0x6] = V555
0x612: V556 = S[V447]
0x614: V557 = S[V551]
0x615: V558 = 0x3
0x618: V559 = S[0x3]
0x61c: V560 = ADD V556 V557
0x61e: V561 = SUB V559 V560
0x620: S[0x3] = V561
0x621: V562 = 0xffff
0x625: V563 = AND S3 0xffff
0x626: V564 = 0x0
0x62a: M[0x0] = V563
0x62b: V565 = 0x8
0x62d: V566 = 0x20
0x62f: M[0x20] = 0x8
0x631: V567 = S[V551]
0x633: V568 = S[V447]
0x634: V569 = 0x40
0x637: V570 = M[0x40]
0x63a: V571 = SHA3 0x0 0x40
0x63b: V572 = S[V571]
0x63c: V573 = 0x1
0x63e: V574 = 0xa0
0x640: V575 = 0x2
0x642: V576 = EXP 0x2 0xa0
0x643: V577 = SUB 0x10000000000000000000000000000000000000000 0x1
0x644: V578 = AND 0xffffffffffffffffffffffffffffffffffffffff V572
0x64a: V579 = ADD V567 V568
0x653: V580 = CALL 0x0 V578 V579 V570 0x0 V570 0x0
0x658: V581 = 0x7
0x65b: V582 = ADD V447 0x7
0x65d: V583 = S[V582]
0x65e: V584 = 0xff
0x660: V585 = NOT 0xff
0x661: V586 = AND 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00 V583
0x662: V587 = 0x1
0x664: V588 = OR 0x1 V586
0x666: S[V582] = V588
---
Entry stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, V522]
Stack pops: 4
Stack additions: [S3, S2, S1, S0]
Exit stack: [V10, 0xa3, S5, {0x0, 0x1}, S3, S2, V447, V522]

================================

Block 0x668
[0x668:0x67b]
---
Predecessors: [0x57e, 0x5a0, 0x5ea, 0x5f5, 0x70a]
Successors: [0x67c, 0x6a6]
---
0x668 JUMPDEST
0x669 PUSH1 0x3
0x66b DUP3
0x66c ADD
0x66d SLOAD
0x66e PUSH1 0xff
0x670 DUP3
0x671 AND
0x672 MUL
0x673 DUP7
0x674 LT
0x675 DUP1
0x676 ISZERO
0x677 SWAP1
0x678 PUSH2 0x6a6
0x67b JUMPI
---
0x668: JUMPDEST 
0x669: V589 = 0x3
0x66c: V590 = ADD S1 0x3
0x66d: V591 = S[V590]
0x66e: V592 = 0xff
0x671: V593 = AND S0 0xff
0x672: V594 = MUL V593 V591
0x674: V595 = LT S5 V594
0x676: V596 = ISZERO V595
0x678: V597 = 0x6a6
0x67b: JUMPI 0x6a6 V595
---
Entry stack: [V10, 0xa3, S7, S6, S5, S4, S3, S2, S1, S0]
Stack pops: 6
Stack additions: [S5, S4, S3, S2, S1, S0, V596]
Exit stack: [V10, 0xa3, S7, S6, S5, S4, S3, S2, S1, S0, V596]

================================

Block 0x67c
[0x67c:0x698]
---
Predecessors: [0x668]
Successors: [0x699, 0x6a6]
---
0x67c POP
0x67d PUSH8 0x16345785d8a0000
0x686 DUP2
0x687 PUSH1 0xff
0x689 AND
0x68a DUP4
0x68b PUSH1 0x3
0x68d ADD
0x68e PUSH1 0x0
0x690 POP
0x691 SLOAD
0x692 MUL
0x693 GT
0x694 DUP1
0x695 PUSH2 0x6a6
0x698 JUMPI
---
0x67d: V598 = 0x16345785d8a0000
0x687: V599 = 0xff
0x689: V600 = AND 0xff S1
0x68b: V601 = 0x3
0x68d: V602 = ADD 0x3 S2
0x68e: V603 = 0x0
0x691: V604 = S[V602]
0x692: V605 = MUL V604 V600
0x693: V606 = GT V605 0x16345785d8a0000
0x695: V607 = 0x6a6
0x698: JUMPI 0x6a6 V606
---
Entry stack: [V10, 0xa3, S8, S7, S6, S5, S4, S3, S2, S1, V596]
Stack pops: 3
Stack additions: [S2, S1, V606]
Exit stack: [V10, 0xa3, S8, S7, S6, S5, S4, S3, S2, S1, V606]

================================

Block 0x699
[0x699:0x6a5]
---
Predecessors: [0x67c]
Successors: [0x6a6]
---
0x699 POP
0x69a PUSH1 0x5
0x69c DUP3
0x69d ADD
0x69e SLOAD
0x69f PUSH3 0x69780
0x6a3 ADD
0x6a4 TIMESTAMP
0x6a5 GT
---
0x69a: V608 = 0x5
0x69d: V609 = ADD S2 0x5
0x69e: V610 = S[V609]
0x69f: V611 = 0x69780
0x6a3: V612 = ADD 0x69780 V610
0x6a4: V613 = TIMESTAMP
0x6a5: V614 = GT V613 V612
---
Entry stack: [V10, 0xa3, S8, S7, S6, S5, S4, S3, S2, S1, V606]
Stack pops: 3
Stack additions: [S2, S1, V614]
Exit stack: [V10, 0xa3, S8, S7, S6, S5, S4, S3, S2, S1, V614]

================================

Block 0x6a6
[0x6a6:0x6ab]
---
Predecessors: [0x668, 0x67c, 0x699]
Successors: [0x6ac, 0x896]
---
0x6a6 JUMPDEST
0x6a7 ISZERO
0x6a8 PUSH2 0x896
0x6ab JUMPI
---
0x6a6: JUMPDEST 
0x6a7: V615 = ISZERO S0
0x6a8: V616 = 0x896
0x6ab: JUMPI 0x896 V615
---
Entry stack: [V10, 0xa3, S8, S7, S6, S5, S4, S3, S2, S1, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V10, 0xa3, S8, S7, S6, S5, S4, S3, S2, S1]

================================

Block 0x6ac
[0x6ac:0x709]
---
Predecessors: [0x6a6]
Successors: [0x89b]
---
0x6ac PUSH1 0x3
0x6ae DUP3
0x6af ADD
0x6b0 SLOAD
0x6b1 PUSH2 0xffff
0x6b4 DUP6
0x6b5 AND
0x6b6 PUSH1 0x0
0x6b8 SWAP1
0x6b9 DUP2
0x6ba MSTORE
0x6bb PUSH1 0x8
0x6bd PUSH1 0x20
0x6bf MSTORE
0x6c0 PUSH1 0x40
0x6c2 DUP1
0x6c3 MLOAD
0x6c4 SWAP1
0x6c5 DUP3
0x6c6 SHA3
0x6c7 SLOAD
0x6c8 PUSH1 0xff
0x6ca DUP6
0x6cb AND
0x6cc SWAP1
0x6cd SWAP4
0x6ce MUL
0x6cf SWAP9
0x6d0 DUP10
0x6d1 SWAP1
0x6d2 SUB
0x6d3 SWAP9
0x6d4 PUSH1 0x1
0x6d6 PUSH1 0xa0
0x6d8 PUSH1 0x2
0x6da EXP
0x6db SUB
0x6dc SWAP4
0x6dd SWAP1
0x6de SWAP4
0x6df AND
0x6e0 SWAP3
0x6e1 SWAP1
0x6e2 DUP3
0x6e3 DUP2
0x6e4 DUP2
0x6e5 DUP2
0x6e6 DUP6
0x6e7 DUP9
0x6e8 DUP4
0x6e9 CALL
0x6ea POP
0x6eb POP
0x6ec POP
0x6ed POP
0x6ee PUSH1 0x6
0x6f0 DUP4
0x6f1 ADD
0x6f2 DUP1
0x6f3 SLOAD
0x6f4 PUSH1 0xff
0x6f6 DUP5
0x6f7 AND
0x6f8 PUSH3 0x15180
0x6fc MUL
0x6fd PUSH3 0xffffff
0x701 AND
0x702 ADD
0x703 SWAP1
0x704 SSTORE
0x705 POP
0x706 PUSH2 0x89b
0x709 JUMP
---
0x6ac: V617 = 0x3
0x6af: V618 = ADD S1 0x3
0x6b0: V619 = S[V618]
0x6b1: V620 = 0xffff
0x6b5: V621 = AND S3 0xffff
0x6b6: V622 = 0x0
0x6ba: M[0x0] = V621
0x6bb: V623 = 0x8
0x6bd: V624 = 0x20
0x6bf: M[0x20] = 0x8
0x6c0: V625 = 0x40
0x6c3: V626 = M[0x40]
0x6c6: V627 = SHA3 0x0 0x40
0x6c7: V628 = S[V627]
0x6c8: V629 = 0xff
0x6cb: V630 = AND S0 0xff
0x6ce: V631 = MUL V619 V630
0x6d2: V632 = SUB S5 V631
0x6d4: V633 = 0x1
0x6d6: V634 = 0xa0
0x6d8: V635 = 0x2
0x6da: V636 = EXP 0x2 0xa0
0x6db: V637 = SUB 0x10000000000000000000000000000000000000000 0x1
0x6df: V638 = AND 0xffffffffffffffffffffffffffffffffffffffff V628
0x6e9: V639 = CALL 0x0 V638 V631 V626 0x0 V626 0x0
0x6ee: V640 = 0x6
0x6f1: V641 = ADD S1 0x6
0x6f3: V642 = S[V641]
0x6f4: V643 = 0xff
0x6f7: V644 = AND S0 0xff
0x6f8: V645 = 0x15180
0x6fc: V646 = MUL 0x15180 V644
0x6fd: V647 = 0xffffff
0x701: V648 = AND 0xffffff V646
0x702: V649 = ADD V648 V642
0x704: S[V641] = V649
0x706: V650 = 0x89b
0x709: JUMP 0x89b
---
Entry stack: [V10, 0xa3, S7, S6, S5, S4, S3, S2, S1, S0]
Stack pops: 6
Stack additions: [V632, S4, S3, S2, S1, S0]
Exit stack: [V10, 0xa3, S7, S6, V632, S4, S3, S2, S1, S0]

================================

Block 0x70a
[0x70a:0x71d]
---
Predecessors: [0x78f]
Successors: [0x668]
---
0x70a JUMPDEST
0x70b PUSH1 0x7
0x70d DUP3
0x70e ADD
0x70f DUP1
0x710 SLOAD
0x711 PUSH1 0xff
0x713 NOT
0x714 AND
0x715 PUSH1 0x1
0x717 OR
0x718 SWAP1
0x719 SSTORE
0x71a PUSH2 0x668
0x71d JUMP
---
0x70a: JUMPDEST 
0x70b: V651 = 0x7
0x70e: V652 = ADD S1 0x7
0x710: V653 = S[V652]
0x711: V654 = 0xff
0x713: V655 = NOT 0xff
0x714: V656 = AND 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00 V653
0x715: V657 = 0x1
0x717: V658 = OR 0x1 V656
0x719: S[V652] = V658
0x71a: V659 = 0x668
0x71d: JUMP 0x668
---
Entry stack: [V10, 0xa3, S7, S6, S5, S4, S3, S2, S1, S0]
Stack pops: 2
Stack additions: [S1, S0]
Exit stack: [V10, 0xa3, S7, S6, S5, S4, S3, S2, S1, S0]

================================

Block 0x71e
[0x71e:0x72e]
---
Predecessors: [0x387]
Successors: [0x72f, 0x77a]
---
0x71e JUMPDEST
0x71f SWAP2
0x720 POP
0x721 DUP2
0x722 PUSH2 0xffff
0x725 AND
0x726 PUSH2 0xffff
0x729 EQ
0x72a ISZERO
0x72b PUSH2 0x77a
0x72e JUMPI
---
0x71e: JUMPDEST 
0x722: V660 = 0xffff
0x725: V661 = AND 0xffff S0
0x726: V662 = 0xffff
0x729: V663 = EQ 0xffff V661
0x72a: V664 = ISZERO V663
0x72b: V665 = 0x77a
0x72e: JUMPI 0x77a V664
---
Entry stack: [V10, 0xa3, V240, S7, {0xa3, 0x480}, S5, S4, S3, 0x0, S1, S0]
Stack pops: 3
Stack additions: [S0, S1]
Exit stack: [V10, 0xa3, V240, S7, {0xa3, 0x480}, S5, S4, S3, S0, S1]

================================

Block 0x72f
[0x72f:0x779]
---
Predecessors: [0x71e]
Successors: [0x77a]
---
0x72f PUSH1 0x7
0x731 DUP1
0x732 SLOAD
0x733 PUSH2 0xffff
0x736 SWAP1
0x737 DUP2
0x738 AND
0x739 PUSH1 0x0
0x73b DUP2
0x73c DUP2
0x73d MSTORE
0x73e PUSH1 0x8
0x740 PUSH1 0x20
0x742 MSTORE
0x743 PUSH1 0x40
0x745 SWAP1
0x746 SHA3
0x747 DUP1
0x748 SLOAD
0x749 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x75e NOT
0x75f AND
0x760 DUP8
0x761 OR
0x762 SWAP1
0x763 SSTORE
0x764 DUP3
0x765 SLOAD
0x766 PUSH2 0xffff
0x769 NOT
0x76a DUP2
0x76b AND
0x76c SWAP3
0x76d AND
0x76e PUSH1 0x1
0x770 ADD
0x771 SWAP2
0x772 SWAP1
0x773 SWAP2
0x774 OR
0x775 SWAP1
0x776 SWAP2
0x777 SSTORE
0x778 SWAP2
0x779 POP
---
0x72f: V666 = 0x7
0x732: V667 = S[0x7]
0x733: V668 = 0xffff
0x738: V669 = AND 0xffff V667
0x739: V670 = 0x0
0x73d: M[0x0] = V669
0x73e: V671 = 0x8
0x740: V672 = 0x20
0x742: M[0x20] = 0x8
0x743: V673 = 0x40
0x746: V674 = SHA3 0x0 0x40
0x748: V675 = S[V674]
0x749: V676 = 0xffffffffffffffffffffffffffffffffffffffff
0x75e: V677 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0x75f: V678 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V675
0x761: V679 = OR S2 V678
0x763: S[V674] = V679
0x765: V680 = S[0x7]
0x766: V681 = 0xffff
0x769: V682 = NOT 0xffff
0x76b: V683 = AND V680 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000
0x76d: V684 = AND 0xffff V680
0x76e: V685 = 0x1
0x770: V686 = ADD 0x1 V684
0x774: V687 = OR V686 V683
0x777: S[0x7] = V687
---
Entry stack: [V10, 0xa3, V240, S6, {0xa3, 0x480}, S4, S3, S2, S1, S0]
Stack pops: 3
Stack additions: [S2, V669, S0]
Exit stack: [V10, 0xa3, V240, S6, {0xa3, 0x480}, S4, S3, S2, V669, S0]

================================

Block 0x77a
[0x77a:0x78e]
---
Predecessors: [0x71e, 0x72f]
Successors: [0x78f]
---
0x77a JUMPDEST
0x77b DUP4
0x77c PUSH1 0xff
0x77e AND
0x77f PUSH1 0x64
0x781 CALLVALUE
0x782 DIV
0x783 MUL
0x784 SWAP1
0x785 POP
0x786 PUSH2 0x8b0
0x789 DUP3
0x78a DUP3
0x78b CALLVALUE
0x78c SUB
0x78d DUP4
0x78e DUP9
---
0x77a: JUMPDEST 
0x77c: V688 = 0xff
0x77e: V689 = AND 0xff S3
0x77f: V690 = 0x64
0x781: V691 = CALLVALUE
0x782: V692 = DIV V691 0x64
0x783: V693 = MUL V692 V689
0x786: V694 = 0x8b0
0x78b: V695 = CALLVALUE
0x78c: V696 = SUB V695 V693
---
Entry stack: [V10, 0xa3, V240, S6, {0xa3, 0x480}, S4, S3, S2, S1, S0]
Stack pops: 5
Stack additions: [S4, S3, S2, S1, V693, 0x8b0, S1, V696, V693, S4]
Exit stack: [V10, 0xa3, V240, S6, {0xa3, 0x480}, S4, S3, S2, S1, V693, 0x8b0, S1, V696, V693, S4]

================================

Block 0x78f
[0x78f:0x895]
---
Predecessors: [0x5d5, 0x77a]
Successors: [0x70a, 0x8b0]
---
0x78f JUMPDEST
0x790 PUSH2 0xffff
0x793 SWAP4
0x794 DUP5
0x795 AND
0x796 PUSH1 0x0
0x798 DUP2
0x799 DUP2
0x79a MSTORE
0x79b PUSH1 0x8
0x79d PUSH1 0x20
0x79f DUP2
0x7a0 DUP2
0x7a1 MSTORE
0x7a2 PUSH1 0x40
0x7a4 DUP1
0x7a5 DUP5
0x7a6 SHA3
0x7a7 DUP1
0x7a8 SLOAD
0x7a9 PUSH1 0xa0
0x7ab PUSH1 0x2
0x7ad EXP
0x7ae SWAP1
0x7af DUP2
0x7b0 SWAP1
0x7b1 DIV
0x7b2 DUP12
0x7b3 AND
0x7b4 DUP7
0x7b5 MSTORE
0x7b6 PUSH1 0x1
0x7b8 DUP3
0x7b9 DUP2
0x7ba ADD
0x7bb DUP6
0x7bc MSTORE
0x7bd SWAP3
0x7be DUP7
0x7bf SHA3
0x7c0 DUP11
0x7c1 DUP2
0x7c2 SSTORE
0x7c3 DUP1
0x7c4 DUP5
0x7c5 ADD
0x7c6 DUP11
0x7c7 SWAP1
0x7c8 SSTORE
0x7c9 PUSH1 0x2
0x7cb DUP1
0x7cc SLOAD
0x7cd DUP6
0x7ce SLOAD
0x7cf SWAP2
0x7d0 DUP4
0x7d1 ADD
0x7d2 DUP1
0x7d3 SLOAD
0x7d4 PUSH2 0x2710
0x7d7 SWAP14
0x7d8 DUP16
0x7d9 ADD
0x7da PUSH1 0x64
0x7dc SWAP16
0x7dd SWAP1
0x7de SWAP16
0x7df MUL
0x7e0 DUP16
0x7e1 SWAP1
0x7e2 DIV
0x7e3 PUSH1 0xff
0x7e5 AND
0x7e6 PUSH8 0xffffffffffffffff
0x7ef DUP5
0x7f0 DUP2
0x7f1 AND
0x7f2 DUP3
0x7f3 MUL
0x7f4 SWAP6
0x7f5 DUP9
0x7f6 SWAP1
0x7f7 DIV
0x7f8 DUP2
0x7f9 AND
0x7fa DUP3
0x7fb MUL
0x7fc SWAP1
0x7fd SWAP2
0x7fe MUL
0x7ff SWAP5
0x800 SWAP1
0x801 SWAP5
0x802 ADD
0x803 PUSH9 0x10000000000000000
0x80d SWAP1
0x80e SWAP4
0x80f DIV
0x810 DUP5
0x811 AND
0x812 SWAP3
0x813 SWAP1
0x814 SWAP3
0x815 ADD
0x816 SWAP1
0x817 SWAP3
0x818 AND
0x819 DUP13
0x81a SWAP1
0x81b DIV
0x81c PUSH2 0xffff
0x81f NOT
0x820 SWAP2
0x821 SWAP1
0x822 SWAP2
0x823 AND
0x824 OR
0x825 SWAP1
0x826 DUP2
0x827 SWAP1
0x828 SSTORE
0x829 PUSH1 0x5
0x82b SWAP1
0x82c DUP14
0x82d AND
0x82e SWAP11
0x82f SWAP1
0x830 SWAP12
0x831 DIV
0x832 SWAP10
0x833 SWAP1
0x834 SWAP10
0x835 MUL
0x836 DUP11
0x837 SWAP1
0x838 DIV
0x839 PUSH1 0x3
0x83b DUP11
0x83c ADD
0x83d SSTORE
0x83e PUSH1 0x4
0x840 DUP10
0x841 ADD
0x842 DUP1
0x843 SLOAD
0x844 PUSH1 0xff
0x846 NOT
0x847 AND
0x848 SWAP9
0x849 SWAP1
0x84a SWAP9
0x84b OR
0x84c SWAP1
0x84d SWAP8
0x84e SSTORE
0x84f TIMESTAMP
0x850 SWAP9
0x851 DUP9
0x852 ADD
0x853 DUP10
0x854 SWAP1
0x855 SSTORE
0x856 PUSH1 0x6
0x858 SWAP8
0x859 SWAP1
0x85a SWAP8
0x85b ADD
0x85c SWAP8
0x85d SWAP1
0x85e SWAP8
0x85f SSTORE
0x860 SWAP3
0x861 SWAP1
0x862 SWAP2
0x863 MSTORE
0x864 SWAP1
0x865 MSTORE
0x866 DUP2
0x867 SLOAD
0x868 PUSH22 0xffff0000000000000000000000000000000000000000
0x87f NOT
0x880 DUP2
0x881 AND
0x882 SWAP1
0x883 DUP3
0x884 SWAP1
0x885 DIV
0x886 SWAP1
0x887 SWAP5
0x888 AND
0x889 SWAP1
0x88a SWAP3
0x88b ADD
0x88c SWAP1
0x88d SWAP2
0x88e MUL
0x88f SWAP2
0x890 SWAP1
0x891 SWAP2
0x892 OR
0x893 SWAP1
0x894 SSTORE
0x895 JUMP
---
0x78f: JUMPDEST 
0x790: V697 = 0xffff
0x795: V698 = AND 0xffff S3
0x796: V699 = 0x0
0x79a: M[0x0] = V698
0x79b: V700 = 0x8
0x79d: V701 = 0x20
0x7a1: M[0x20] = 0x8
0x7a2: V702 = 0x40
0x7a6: V703 = SHA3 0x0 0x40
0x7a8: V704 = S[V703]
0x7a9: V705 = 0xa0
0x7ab: V706 = 0x2
0x7ad: V707 = EXP 0x2 0xa0
0x7b1: V708 = DIV V704 0x10000000000000000000000000000000000000000
0x7b3: V709 = AND 0xffff V708
0x7b5: M[0x0] = V709
0x7b6: V710 = 0x1
0x7ba: V711 = ADD 0x1 V703
0x7bc: M[0x20] = V711
0x7bf: V712 = SHA3 0x0 0x40
0x7c2: S[V712] = S2
0x7c5: V713 = ADD 0x1 V712
0x7c8: S[V713] = S1
0x7c9: V714 = 0x2
0x7cc: V715 = S[0x2]
0x7ce: V716 = S[0x1]
0x7d1: V717 = ADD V712 0x2
0x7d3: V718 = S[V717]
0x7d4: V719 = 0x2710
0x7d9: V720 = ADD S2 S1
0x7da: V721 = 0x64
0x7df: V722 = MUL 0x64 S2
0x7e2: V723 = DIV V722 V720
0x7e3: V724 = 0xff
0x7e5: V725 = AND 0xff V723
0x7e6: V726 = 0xffffffffffffffff
0x7f1: V727 = AND 0xffffffffffffffff V715
0x7f3: V728 = MUL V725 V727
0x7f7: V729 = DIV V716 0x10000000000000000000000000000000000000000
0x7f9: V730 = AND 0xffffffffffffffff V729
0x7fb: V731 = MUL V725 V730
0x7fe: V732 = MUL V725 V731
0x802: V733 = ADD V732 V728
0x803: V734 = 0x10000000000000000
0x80f: V735 = DIV V715 0x10000000000000000
0x811: V736 = AND 0xffffffffffffffff V735
0x815: V737 = ADD V736 V733
0x818: V738 = AND 0xffffffffffffffff V737
0x81b: V739 = DIV V738 0x2710
0x81c: V740 = 0xffff
0x81f: V741 = NOT 0xffff
0x823: V742 = AND 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000 V718
0x824: V743 = OR V742 V739
0x828: S[V717] = V743
0x829: V744 = 0x5
0x82d: V745 = AND 0xffff V743
0x831: V746 = DIV V720 0x2710
0x835: V747 = MUL V746 V745
0x838: V748 = DIV V747 0x5
0x839: V749 = 0x3
0x83c: V750 = ADD V712 0x3
0x83d: S[V750] = V748
0x83e: V751 = 0x4
0x841: V752 = ADD V712 0x4
0x843: V753 = S[V752]
0x844: V754 = 0xff
0x846: V755 = NOT 0xff
0x847: V756 = AND 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00 V753
0x84b: V757 = OR V756 S0
0x84e: S[V752] = V757
0x84f: V758 = TIMESTAMP
0x852: V759 = ADD V712 0x5
0x855: S[V759] = V758
0x856: V760 = 0x6
0x85b: V761 = ADD 0x6 V712
0x85f: S[V761] = V758
0x863: M[0x0] = V698
0x865: M[0x20] = 0x8
0x867: V762 = S[V703]
0x868: V763 = 0xffff0000000000000000000000000000000000000000
0x87f: V764 = NOT 0xffff0000000000000000000000000000000000000000
0x881: V765 = AND V762 0xffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff
0x885: V766 = DIV V762 0x10000000000000000000000000000000000000000
0x888: V767 = AND 0xffff V766
0x88b: V768 = ADD 0x1 V767
0x88e: V769 = MUL 0x10000000000000000000000000000000000000000 V768
0x892: V770 = OR V769 V765
0x894: S[V703] = V770
0x895: JUMP {0x70a, 0x8b0}
---
Entry stack: [V10, 0xa3, S12, S11, S10, S9, S8, S7, S6, S5, {0x70a, 0x8b0}, S3, S2, S1, S0]
Stack pops: 5
Stack additions: []
Exit stack: [V10, 0xa3, S12, S11, S10, S9, S8, S7, S6, S5]

================================

Block 0x896
[0x896:0x89a]
---
Predecessors: [0x6a6]
Successors: [0x89b]
---
0x896 JUMPDEST
0x897 PUSH1 0x1
0x899 SWAP5
0x89a POP
---
0x896: JUMPDEST 
0x897: V771 = 0x1
---
Entry stack: [V10, 0xa3, S7, S6, S5, S4, S3, S2, S1, S0]
Stack pops: 5
Stack additions: [0x1, S3, S2, S1, S0]
Exit stack: [V10, 0xa3, S7, S6, S5, 0x1, S3, S2, S1, S0]

================================

Block 0x89b
[0x89b:0x8a6]
---
Predecessors: [0x539, 0x6ac, 0x896]
Successors: [0x4bb]
---
0x89b JUMPDEST
0x89c PUSH1 0x1
0x89e SWAP3
0x89f SWAP1
0x8a0 SWAP3
0x8a1 ADD
0x8a2 SWAP2
0x8a3 PUSH2 0x4bb
0x8a6 JUMP
---
0x89b: JUMPDEST 
0x89c: V772 = 0x1
0x8a1: V773 = ADD 0x1 S2
0x8a3: V774 = 0x4bb
0x8a6: JUMP 0x4bb
---
Entry stack: [V10, 0xa3, S7, S6, S5, S4, S3, S2, S1, S0]
Stack pops: 3
Stack additions: [V773, S1, S0]
Exit stack: [V10, 0xa3, S7, S6, S5, S4, S3, V773, S1, S0]

================================

Block 0x8a7
[0x8a7:0x8af]
---
Predecessors: [0x2eb]
Successors: [0x196]
---
0x8a7 JUMPDEST
0x8a8 PUSH2 0x71e
0x8ab DUP4
0x8ac PUSH2 0x196
0x8af JUMP
---
0x8a7: JUMPDEST 
0x8a8: V775 = 0x71e
0x8ac: V776 = 0x196
0x8af: JUMP 0x196
---
Entry stack: [V10, 0xa3, V240, S6, {0xa3, 0x480}, S4, S3, S2, 0x0, 0x0]
Stack pops: 3
Stack additions: [S2, S1, S0, 0x71e, S2]
Exit stack: [V10, 0xa3, V240, S6, {0xa3, 0x480}, S4, S3, S2, 0x0, 0x0, 0x71e, S2]

================================

Block 0x8b0
[0x8b0:0x8f1]
---
Predecessors: [0x78f]
Successors: [0xa3, 0x480]
---
0x8b0 JUMPDEST
0x8b1 PUSH1 0x6
0x8b3 DUP1
0x8b4 SLOAD
0x8b5 DUP3
0x8b6 ADD
0x8b7 SWAP1
0x8b8 SSTORE
0x8b9 PUSH1 0x3
0x8bb DUP1
0x8bc SLOAD
0x8bd CALLVALUE
0x8be SWAP1
0x8bf DUP2
0x8c0 ADD
0x8c1 SWAP1
0x8c2 SWAP2
0x8c3 SSTORE
0x8c4 PUSH1 0x1
0x8c6 SLOAD
0x8c7 PUSH1 0x40
0x8c9 MLOAD
0x8ca PUSH1 0x1
0x8cc PUSH1 0xa0
0x8ce PUSH1 0x2
0x8d0 EXP
0x8d1 SUB
0x8d2 SWAP2
0x8d3 SWAP1
0x8d4 SWAP2
0x8d5 AND
0x8d6 SWAP2
0x8d7 PUSH1 0x0
0x8d9 SWAP2
0x8da SWAP1
0x8db DUP5
0x8dc SWAP1
0x8dd SUB
0x8de SWAP1
0x8df DUP3
0x8e0 DUP2
0x8e1 DUP2
0x8e2 DUP2
0x8e3 DUP6
0x8e4 DUP9
0x8e5 DUP4
0x8e6 CALL
0x8e7 POP
0x8e8 POP
0x8e9 POP
0x8ea POP
0x8eb POP
0x8ec POP
0x8ed POP
0x8ee POP
0x8ef POP
0x8f0 POP
0x8f1 JUMP
---
0x8b0: JUMPDEST 
0x8b1: V777 = 0x6
0x8b4: V778 = S[0x6]
0x8b6: V779 = ADD S0 V778
0x8b8: S[0x6] = V779
0x8b9: V780 = 0x3
0x8bc: V781 = S[0x3]
0x8bd: V782 = CALLVALUE
0x8c0: V783 = ADD V782 V781
0x8c3: S[0x3] = V783
0x8c4: V784 = 0x1
0x8c6: V785 = S[0x1]
0x8c7: V786 = 0x40
0x8c9: V787 = M[0x40]
0x8ca: V788 = 0x1
0x8cc: V789 = 0xa0
0x8ce: V790 = 0x2
0x8d0: V791 = EXP 0x2 0xa0
0x8d1: V792 = SUB 0x10000000000000000000000000000000000000000 0x1
0x8d5: V793 = AND 0xffffffffffffffffffffffffffffffffffffffff V785
0x8d7: V794 = 0x0
0x8dd: V795 = SUB V782 S0
0x8e6: V796 = CALL 0x0 V793 V795 V787 0x0 V787 0x0
0x8f1: JUMP S5
---
Entry stack: [V10, 0xa3, S7, S6, S5, S4, S3, S2, S1, S0]
Stack pops: 6
Stack additions: []
Exit stack: [V10, 0xa3, S7, S6]

================================

Function 0:
Public function signature: 0x16ece9db
Entry block: 0xa5
Exit block: 0xa5
Body: 0xa5

Function 1:
Public function signature: 0x1982ed58
Entry block: 0x156
Exit block: 0xa3
Body: 0xa3, 0x156, 0x18b, 0x349, 0x37c

Function 2:
Public function signature: 0x31a73991
Entry block: 0x18f
Exit block: 0x31f
Body: 0x18f, 0x31f

Function 3:
Public function signature: 0x3773930e
Entry block: 0x1db
Exit block: 0xa3
Body: 0xa3, 0x1db, 0x205, 0x395

Function 4:
Public function signature: 0x5f52e9fd
Entry block: 0x209
Exit block: 0xa3
Body: 0xa3, 0x209, 0x229, 0x230, 0x236, 0x430, 0x455

Function 5:
Public function signature: 0x6169a7ed
Entry block: 0x23a
Exit block: 0x337
Body: 0x23a, 0x337

Function 6:
Public function signature: 0x686e8aaa
Entry block: 0x243
Exit block: 0xa3
Body: 0xa3, 0x243, 0x25e, 0x458, 0x47e

Function 7:
Public function signature: 0x79799193
Entry block: 0x262
Exit block: 0x337
Body: 0x262, 0x337

Function 8:
Public function signature: 0x7e7307c5
Entry block: 0x26b
Exit block: 0xa3
Body: 0xa3, 0x26b, 0x480

Function 9:
Public function signature: 0x8fe58eb9
Entry block: 0x27f
Exit block: 0xa3
Body: 0xa3, 0x27f, 0x2a5, 0x484, 0x4a4, 0x4b7, 0x4bb, 0x4e3, 0x509, 0x51d, 0x523, 0x533, 0x539, 0x53d, 0x545, 0x56a, 0x572, 0x57e, 0x5a0, 0x5c8, 0x5d5, 0x5ea, 0x5f5, 0x668, 0x67c, 0x699, 0x6a6, 0x6ac, 0x70a, 0x896, 0x89b

Function 10:
Public function signature: 0x9894221a
Entry block: 0x2a9
Exit block: 0xa3
Body: 0xa3, 0x2a9

Function 11:
Public function signature: 0xa9fb4385
Entry block: 0x2b6
Exit block: 0xa3
Body: 0xa3, 0x2b6

Function 12:
Public function signature: 0xd3c65384
Entry block: 0x316
Exit block: 0x337
Body: 0x316, 0x337

Function 13:
Public fallback function
Entry block: 0xa3
Exit block: 0xa3
Body: 0xa3

Function 14:
Private function
Entry block: 0x196
Exit block: 0x387
Body: 0x196, 0x19a, 0x1ad, 0x1d4, 0x381, 0x387, 0x38d

Function 15:
Private function
Entry block: 0x2c3
Exit block: 0x8b0
Body: 0x2c3, 0x2d1, 0x2d9, 0x2df, 0x2eb, 0x2f1, 0x429, 0x71e, 0x72f, 0x77a, 0x77a, 0x8a7, 0x8b0

