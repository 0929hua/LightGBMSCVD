Block 0x0
[0x0:0xc]
---
Predecessors: []
Successors: [0xd, 0x41]
---
0x0 PUSH1 0x80
0x2 PUSH1 0x40
0x4 MSTORE
0x5 PUSH1 0x4
0x7 CALLDATASIZE
0x8 LT
0x9 PUSH2 0x41
0xc JUMPI
---
0x0: V0 = 0x80
0x2: V1 = 0x40
0x4: M[0x40] = 0x80
0x5: V2 = 0x4
0x7: V3 = CALLDATASIZE
0x8: V4 = LT V3 0x4
0x9: V5 = 0x41
0xc: JUMPI 0x41 V4
---
Entry stack: []
Stack pops: 0
Stack additions: []
Exit stack: []

================================

Block 0xd
[0xd:0x40]
---
Predecessors: [0x0]
Successors: [0x41, 0x254]
---
0xd PUSH1 0x0
0xf CALLDATALOAD
0x10 PUSH29 0x100000000000000000000000000000000000000000000000000000000
0x2e SWAP1
0x2f DIV
0x30 PUSH4 0xffffffff
0x35 AND
0x36 DUP1
0x37 PUSH4 0x8da5cb5b
0x3c EQ
0x3d PUSH2 0x254
0x40 JUMPI
---
0xd: V6 = 0x0
0xf: V7 = CALLDATALOAD 0x0
0x10: V8 = 0x100000000000000000000000000000000000000000000000000000000
0x2f: V9 = DIV V7 0x100000000000000000000000000000000000000000000000000000000
0x30: V10 = 0xffffffff
0x35: V11 = AND 0xffffffff V9
0x37: V12 = 0x8da5cb5b
0x3c: V13 = EQ 0x8da5cb5b V11
0x3d: V14 = 0x254
0x40: JUMPI 0x254 V13
---
Entry stack: []
Stack pops: 0
Stack additions: [V11]
Exit stack: [V11]

================================

Block 0x41
[0x41:0x8c]
---
Predecessors: [0x0, 0xd]
Successors: [0x8d, 0x1c0]
---
0x41 JUMPDEST
0x42 PUSH1 0x0
0x44 DUP1
0x45 PUSH1 0x0
0x47 DUP1
0x48 PUSH1 0x0
0x4a CALLER
0x4b PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x60 AND
0x61 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x76 AND
0x77 DUP2
0x78 MSTORE
0x79 PUSH1 0x20
0x7b ADD
0x7c SWAP1
0x7d DUP2
0x7e MSTORE
0x7f PUSH1 0x20
0x81 ADD
0x82 PUSH1 0x0
0x84 SHA3
0x85 SLOAD
0x86 EQ
0x87 ISZERO
0x88 ISZERO
0x89 PUSH2 0x1c0
0x8c JUMPI
---
0x41: JUMPDEST 
0x42: V15 = 0x0
0x45: V16 = 0x0
0x48: V17 = 0x0
0x4a: V18 = CALLER
0x4b: V19 = 0xffffffffffffffffffffffffffffffffffffffff
0x60: V20 = AND 0xffffffffffffffffffffffffffffffffffffffff V18
0x61: V21 = 0xffffffffffffffffffffffffffffffffffffffff
0x76: V22 = AND 0xffffffffffffffffffffffffffffffffffffffff V20
0x78: M[0x0] = V22
0x79: V23 = 0x20
0x7b: V24 = ADD 0x20 0x0
0x7e: M[0x20] = 0x0
0x7f: V25 = 0x20
0x81: V26 = ADD 0x20 0x20
0x82: V27 = 0x0
0x84: V28 = SHA3 0x0 0x40
0x85: V29 = S[V28]
0x86: V30 = EQ V29 0x0
0x87: V31 = ISZERO V30
0x88: V32 = ISZERO V31
0x89: V33 = 0x1c0
0x8c: JUMPI 0x1c0 V32
---
Entry stack: [V11]
Stack pops: 0
Stack additions: [0x0, 0x0]
Exit stack: [V11, 0x0, 0x0]

================================

Block 0x8d
[0x8d:0xab]
---
Predecessors: [0x41]
Successors: [0xac, 0xe6]
---
0x8d DUP2
0x8e ADDRESS
0x8f PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0xa4 AND
0xa5 BALANCE
0xa6 LT
0xa7 ISZERO
0xa8 PUSH2 0xe6
0xab JUMPI
---
0x8e: V34 = ADDRESS
0x8f: V35 = 0xffffffffffffffffffffffffffffffffffffffff
0xa4: V36 = AND 0xffffffffffffffffffffffffffffffffffffffff V34
0xa5: V37 = BALANCE V36
0xa6: V38 = LT V37 0x0
0xa7: V39 = ISZERO V38
0xa8: V40 = 0xe6
0xab: JUMPI 0xe6 V39
---
Entry stack: [V11, 0x0, 0x0]
Stack pops: 2
Stack additions: [S1, S0]
Exit stack: [V11, 0x0, 0x0]

================================

Block 0xac
[0xac:0xe5]
---
Predecessors: [0x8d]
Successors: []
---
0xac PUSH1 0x2
0xae PUSH1 0x0
0xb0 SWAP1
0xb1 SLOAD
0xb2 SWAP1
0xb3 PUSH2 0x100
0xb6 EXP
0xb7 SWAP1
0xb8 DIV
0xb9 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0xce AND
0xcf PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0xe4 AND
0xe5 SELFDESTRUCT
---
0xac: V41 = 0x2
0xae: V42 = 0x0
0xb1: V43 = S[0x2]
0xb3: V44 = 0x100
0xb6: V45 = EXP 0x100 0x0
0xb8: V46 = DIV V43 0x1
0xb9: V47 = 0xffffffffffffffffffffffffffffffffffffffff
0xce: V48 = AND 0xffffffffffffffffffffffffffffffffffffffff V46
0xcf: V49 = 0xffffffffffffffffffffffffffffffffffffffff
0xe4: V50 = AND 0xffffffffffffffffffffffffffffffffffffffff V48
0xe5: SELFDESTRUCT V50
---
Entry stack: [V11, 0x0, 0x0]
Stack pops: 0
Stack additions: []
Exit stack: [V11, 0x0, 0x0]

================================

Block 0xe6
[0xe6:0x176]
---
Predecessors: [0x8d]
Successors: [0x177, 0x178]
---
0xe6 JUMPDEST
0xe7 PUSH2 0x170c
0xea PUSH1 0x1
0xec PUSH1 0x0
0xee CALLER
0xef PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x104 AND
0x105 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x11a AND
0x11b DUP2
0x11c MSTORE
0x11d PUSH1 0x20
0x11f ADD
0x120 SWAP1
0x121 DUP2
0x122 MSTORE
0x123 PUSH1 0x20
0x125 ADD
0x126 PUSH1 0x0
0x128 SHA3
0x129 SLOAD
0x12a NUMBER
0x12b SUB
0x12c PUSH1 0x64
0x12e PUSH1 0x4
0x130 PUSH1 0x0
0x132 DUP1
0x133 CALLER
0x134 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x149 AND
0x14a PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x15f AND
0x160 DUP2
0x161 MSTORE
0x162 PUSH1 0x20
0x164 ADD
0x165 SWAP1
0x166 DUP2
0x167 MSTORE
0x168 PUSH1 0x20
0x16a ADD
0x16b PUSH1 0x0
0x16d SHA3
0x16e SLOAD
0x16f MUL
0x170 DUP2
0x171 ISZERO
0x172 ISZERO
0x173 PUSH2 0x178
0x176 JUMPI
---
0xe6: JUMPDEST 
0xe7: V51 = 0x170c
0xea: V52 = 0x1
0xec: V53 = 0x0
0xee: V54 = CALLER
0xef: V55 = 0xffffffffffffffffffffffffffffffffffffffff
0x104: V56 = AND 0xffffffffffffffffffffffffffffffffffffffff V54
0x105: V57 = 0xffffffffffffffffffffffffffffffffffffffff
0x11a: V58 = AND 0xffffffffffffffffffffffffffffffffffffffff V56
0x11c: M[0x0] = V58
0x11d: V59 = 0x20
0x11f: V60 = ADD 0x20 0x0
0x122: M[0x20] = 0x1
0x123: V61 = 0x20
0x125: V62 = ADD 0x20 0x20
0x126: V63 = 0x0
0x128: V64 = SHA3 0x0 0x40
0x129: V65 = S[V64]
0x12a: V66 = NUMBER
0x12b: V67 = SUB V66 V65
0x12c: V68 = 0x64
0x12e: V69 = 0x4
0x130: V70 = 0x0
0x133: V71 = CALLER
0x134: V72 = 0xffffffffffffffffffffffffffffffffffffffff
0x149: V73 = AND 0xffffffffffffffffffffffffffffffffffffffff V71
0x14a: V74 = 0xffffffffffffffffffffffffffffffffffffffff
0x15f: V75 = AND 0xffffffffffffffffffffffffffffffffffffffff V73
0x161: M[0x0] = V75
0x162: V76 = 0x20
0x164: V77 = ADD 0x20 0x0
0x167: M[0x20] = 0x0
0x168: V78 = 0x20
0x16a: V79 = ADD 0x20 0x20
0x16b: V80 = 0x0
0x16d: V81 = SHA3 0x0 0x40
0x16e: V82 = S[V81]
0x16f: V83 = MUL V82 0x4
0x171: V84 = ISZERO 0x64
0x172: V85 = ISZERO 0x0
0x173: V86 = 0x178
0x176: JUMPI 0x178 0x1
---
Entry stack: [V11, 0x0, 0x0]
Stack pops: 0
Stack additions: [0x170c, V67, 0x64, V83]
Exit stack: [V11, 0x0, 0x0, 0x170c, V67, 0x64, V83]

================================

Block 0x177
[0x177:0x177]
---
Predecessors: [0xe6]
Successors: []
---
0x177 INVALID
---
0x177: INVALID 
---
Entry stack: [V11, 0x0, 0x0, 0x170c, V67, 0x64, V83]
Stack pops: 0
Stack additions: []
Exit stack: [V11, 0x0, 0x0, 0x170c, V67, 0x64, V83]

================================

Block 0x178
[0x178:0x181]
---
Predecessors: [0xe6]
Successors: [0x182, 0x183]
---
0x178 JUMPDEST
0x179 DIV
0x17a MUL
0x17b DUP2
0x17c ISZERO
0x17d ISZERO
0x17e PUSH2 0x183
0x181 JUMPI
---
0x178: JUMPDEST 
0x179: V87 = DIV V83 0x64
0x17a: V88 = MUL V87 V67
0x17c: V89 = ISZERO 0x170c
0x17d: V90 = ISZERO 0x0
0x17e: V91 = 0x183
0x181: JUMPI 0x183 0x1
---
Entry stack: [V11, 0x0, 0x0, 0x170c, V67, 0x64, V83]
Stack pops: 4
Stack additions: [S3, V88]
Exit stack: [V11, 0x0, 0x0, 0x170c, V88]

================================

Block 0x182
[0x182:0x182]
---
Predecessors: [0x178]
Successors: []
---
0x182 INVALID
---
0x182: INVALID 
---
Entry stack: [V11, 0x0, 0x0, 0x170c, V88]
Stack pops: 0
Stack additions: []
Exit stack: [V11, 0x0, 0x0, 0x170c, V88]

================================

Block 0x183
[0x183:0x1bf]
---
Predecessors: [0x178]
Successors: [0x1c0]
---
0x183 JUMPDEST
0x184 DIV
0x185 SWAP2
0x186 POP
0x187 CALLER
0x188 SWAP1
0x189 POP
0x18a DUP1
0x18b PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x1a0 AND
0x1a1 PUSH2 0x8fc
0x1a4 DUP4
0x1a5 SWAP1
0x1a6 DUP2
0x1a7 ISZERO
0x1a8 MUL
0x1a9 SWAP1
0x1aa PUSH1 0x40
0x1ac MLOAD
0x1ad PUSH1 0x0
0x1af PUSH1 0x40
0x1b1 MLOAD
0x1b2 DUP1
0x1b3 DUP4
0x1b4 SUB
0x1b5 DUP2
0x1b6 DUP6
0x1b7 DUP9
0x1b8 DUP9
0x1b9 CALL
0x1ba SWAP4
0x1bb POP
0x1bc POP
0x1bd POP
0x1be POP
0x1bf POP
---
0x183: JUMPDEST 
0x184: V92 = DIV V88 0x170c
0x187: V93 = CALLER
0x18b: V94 = 0xffffffffffffffffffffffffffffffffffffffff
0x1a0: V95 = AND 0xffffffffffffffffffffffffffffffffffffffff V93
0x1a1: V96 = 0x8fc
0x1a7: V97 = ISZERO V92
0x1a8: V98 = MUL V97 0x8fc
0x1aa: V99 = 0x40
0x1ac: V100 = M[0x40]
0x1ad: V101 = 0x0
0x1af: V102 = 0x40
0x1b1: V103 = M[0x40]
0x1b4: V104 = SUB V100 V103
0x1b9: V105 = CALL V98 V95 V92 V103 V104 V103 0x0
---
Entry stack: [V11, 0x0, 0x0, 0x170c, V88]
Stack pops: 4
Stack additions: [V92, V93]
Exit stack: [V11, V92, V93]

================================

Block 0x1c0
[0x1c0:0x253]
---
Predecessors: [0x41, 0x183]
Successors: []
---
0x1c0 JUMPDEST
0x1c1 NUMBER
0x1c2 PUSH1 0x1
0x1c4 PUSH1 0x0
0x1c6 CALLER
0x1c7 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x1dc AND
0x1dd PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x1f2 AND
0x1f3 DUP2
0x1f4 MSTORE
0x1f5 PUSH1 0x20
0x1f7 ADD
0x1f8 SWAP1
0x1f9 DUP2
0x1fa MSTORE
0x1fb PUSH1 0x20
0x1fd ADD
0x1fe PUSH1 0x0
0x200 SHA3
0x201 DUP2
0x202 SWAP1
0x203 SSTORE
0x204 POP
0x205 CALLVALUE
0x206 PUSH1 0x0
0x208 DUP1
0x209 CALLER
0x20a PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x21f AND
0x220 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x235 AND
0x236 DUP2
0x237 MSTORE
0x238 PUSH1 0x20
0x23a ADD
0x23b SWAP1
0x23c DUP2
0x23d MSTORE
0x23e PUSH1 0x20
0x240 ADD
0x241 PUSH1 0x0
0x243 SHA3
0x244 PUSH1 0x0
0x246 DUP3
0x247 DUP3
0x248 SLOAD
0x249 ADD
0x24a SWAP3
0x24b POP
0x24c POP
0x24d DUP2
0x24e SWAP1
0x24f SSTORE
0x250 POP
0x251 POP
0x252 POP
0x253 STOP
---
0x1c0: JUMPDEST 
0x1c1: V106 = NUMBER
0x1c2: V107 = 0x1
0x1c4: V108 = 0x0
0x1c6: V109 = CALLER
0x1c7: V110 = 0xffffffffffffffffffffffffffffffffffffffff
0x1dc: V111 = AND 0xffffffffffffffffffffffffffffffffffffffff V109
0x1dd: V112 = 0xffffffffffffffffffffffffffffffffffffffff
0x1f2: V113 = AND 0xffffffffffffffffffffffffffffffffffffffff V111
0x1f4: M[0x0] = V113
0x1f5: V114 = 0x20
0x1f7: V115 = ADD 0x20 0x0
0x1fa: M[0x20] = 0x1
0x1fb: V116 = 0x20
0x1fd: V117 = ADD 0x20 0x20
0x1fe: V118 = 0x0
0x200: V119 = SHA3 0x0 0x40
0x203: S[V119] = V106
0x205: V120 = CALLVALUE
0x206: V121 = 0x0
0x209: V122 = CALLER
0x20a: V123 = 0xffffffffffffffffffffffffffffffffffffffff
0x21f: V124 = AND 0xffffffffffffffffffffffffffffffffffffffff V122
0x220: V125 = 0xffffffffffffffffffffffffffffffffffffffff
0x235: V126 = AND 0xffffffffffffffffffffffffffffffffffffffff V124
0x237: M[0x0] = V126
0x238: V127 = 0x20
0x23a: V128 = ADD 0x20 0x0
0x23d: M[0x20] = 0x0
0x23e: V129 = 0x20
0x240: V130 = ADD 0x20 0x20
0x241: V131 = 0x0
0x243: V132 = SHA3 0x0 0x40
0x244: V133 = 0x0
0x248: V134 = S[V132]
0x249: V135 = ADD V134 V120
0x24f: S[V132] = V135
0x253: STOP 
---
Entry stack: [V11, S1, S0]
Stack pops: 2
Stack additions: []
Exit stack: [V11]

================================

Block 0x254
[0x254:0x25b]
---
Predecessors: [0xd]
Successors: [0x25c, 0x260]
---
0x254 JUMPDEST
0x255 CALLVALUE
0x256 DUP1
0x257 ISZERO
0x258 PUSH2 0x260
0x25b JUMPI
---
0x254: JUMPDEST 
0x255: V136 = CALLVALUE
0x257: V137 = ISZERO V136
0x258: V138 = 0x260
0x25b: JUMPI 0x260 V137
---
Entry stack: [V11]
Stack pops: 0
Stack additions: [V136]
Exit stack: [V11, V136]

================================

Block 0x25c
[0x25c:0x25f]
---
Predecessors: [0x254]
Successors: []
---
0x25c PUSH1 0x0
0x25e DUP1
0x25f REVERT
---
0x25c: V139 = 0x0
0x25f: REVERT 0x0 0x0
---
Entry stack: [V11, V136]
Stack pops: 0
Stack additions: []
Exit stack: [V11, V136]

================================

Block 0x260
[0x260:0x268]
---
Predecessors: [0x254]
Successors: [0x2ab]
---
0x260 JUMPDEST
0x261 POP
0x262 PUSH2 0x269
0x265 PUSH2 0x2ab
0x268 JUMP
---
0x260: JUMPDEST 
0x262: V140 = 0x269
0x265: V141 = 0x2ab
0x268: JUMP 0x2ab
---
Entry stack: [V11, V136]
Stack pops: 1
Stack additions: [0x269]
Exit stack: [V11, 0x269]

================================

Block 0x269
[0x269:0x2aa]
---
Predecessors: [0x2ab]
Successors: []
---
0x269 JUMPDEST
0x26a PUSH1 0x40
0x26c MLOAD
0x26d DUP1
0x26e DUP3
0x26f PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x284 AND
0x285 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x29a AND
0x29b DUP2
0x29c MSTORE
0x29d PUSH1 0x20
0x29f ADD
0x2a0 SWAP2
0x2a1 POP
0x2a2 POP
0x2a3 PUSH1 0x40
0x2a5 MLOAD
0x2a6 DUP1
0x2a7 SWAP2
0x2a8 SUB
0x2a9 SWAP1
0x2aa RETURN
---
0x269: JUMPDEST 
0x26a: V142 = 0x40
0x26c: V143 = M[0x40]
0x26f: V144 = 0xffffffffffffffffffffffffffffffffffffffff
0x284: V145 = AND 0xffffffffffffffffffffffffffffffffffffffff V160
0x285: V146 = 0xffffffffffffffffffffffffffffffffffffffff
0x29a: V147 = AND 0xffffffffffffffffffffffffffffffffffffffff V145
0x29c: M[V143] = V147
0x29d: V148 = 0x20
0x29f: V149 = ADD 0x20 V143
0x2a3: V150 = 0x40
0x2a5: V151 = M[0x40]
0x2a8: V152 = SUB V149 V151
0x2aa: RETURN V151 V152
---
Entry stack: [V11, 0x269, V160]
Stack pops: 1
Stack additions: []
Exit stack: [V11, 0x269]

================================

Block 0x2ab
[0x2ab:0x2d0]
---
Predecessors: [0x260]
Successors: [0x269]
---
0x2ab JUMPDEST
0x2ac PUSH1 0x2
0x2ae PUSH1 0x0
0x2b0 SWAP1
0x2b1 SLOAD
0x2b2 SWAP1
0x2b3 PUSH2 0x100
0x2b6 EXP
0x2b7 SWAP1
0x2b8 DIV
0x2b9 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x2ce AND
0x2cf DUP2
0x2d0 JUMP
---
0x2ab: JUMPDEST 
0x2ac: V153 = 0x2
0x2ae: V154 = 0x0
0x2b1: V155 = S[0x2]
0x2b3: V156 = 0x100
0x2b6: V157 = EXP 0x100 0x0
0x2b8: V158 = DIV V155 0x1
0x2b9: V159 = 0xffffffffffffffffffffffffffffffffffffffff
0x2ce: V160 = AND 0xffffffffffffffffffffffffffffffffffffffff V158
0x2d0: JUMP 0x269
---
Entry stack: [V11, 0x269]
Stack pops: 1
Stack additions: [S0, V160]
Exit stack: [V11, 0x269, V160]

================================

Block 0x2d1
[0x2d1:0x301]
---
Predecessors: []
Successors: []
---
0x2d1 STOP
0x2d2 LOG1
0x2d3 PUSH6 0x627a7a723058
0x2da SHA3
0x2db MISSING 0xb1
0x2dc MISSING 0xcf
0x2dd MULMOD
0x2de MISSING 0xdf
0x2df SHR
0x2e0 LOG1
0x2e1 MISSING 0xa6
0x2e2 PC
0x2e3 EXTCODECOPY
0x2e4 PUSH29 0xc5f42d012ec5f621ddb1221523e6e2b904155fcb54430029
---
0x2d1: STOP 
0x2d2: LOG S0 S1 S2
0x2d3: V161 = 0x627a7a723058
0x2da: V162 = SHA3 0x627a7a723058 S3
0x2db: MISSING 0xb1
0x2dc: MISSING 0xcf
0x2dd: V163 = MULMOD S0 S1 S2
0x2de: MISSING 0xdf
0x2df: V164 = SHR S0 S1
0x2e0: LOG V164 S2 S3
0x2e1: MISSING 0xa6
0x2e2: V165 = PC
0x2e3: EXTCODECOPY V165 S0 S1 S2
0x2e4: V166 = 0xc5f42d012ec5f621ddb1221523e6e2b904155fcb54430029
---
Entry stack: []
Stack pops: 0
Stack additions: [V162, V163, 0xc5f42d012ec5f621ddb1221523e6e2b904155fcb54430029]
Exit stack: []

================================

Function 0:
Public function signature: 0x8da5cb5b
Entry block: 0x254
Exit block: 0x269
Body: 0x254, 0x25c, 0x260, 0x269, 0x2ab

Function 1:
Public fallback function
Entry block: 0x41
Exit block: 0x1c0
Body: 0x41, 0x8d, 0xac, 0xe6, 0x177, 0x178, 0x182, 0x183, 0x1c0

