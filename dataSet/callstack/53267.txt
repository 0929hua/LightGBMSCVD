Block 0x0
[0x0:0xa]
---
Predecessors: []
Successors: [0xb, 0x46]
---
0x0 PUSH1 0x60
0x2 PUSH1 0x40
0x4 MSTORE
0x5 CALLDATASIZE
0x6 ISZERO
0x7 PUSH2 0x46
0xa JUMPI
---
0x0: V0 = 0x60
0x2: V1 = 0x40
0x4: M[0x40] = 0x60
0x5: V2 = CALLDATASIZE
0x6: V3 = ISZERO V2
0x7: V4 = 0x46
0xa: JUMPI 0x46 V3
---
Entry stack: []
Stack pops: 0
Stack additions: []
Exit stack: []

================================

Block 0xb
[0xb:0x24]
---
Predecessors: [0x0]
Successors: [0x25, 0x4f]
---
0xb PUSH4 0xffffffff
0x10 PUSH1 0xe0
0x12 PUSH1 0x2
0x14 EXP
0x15 PUSH1 0x0
0x17 CALLDATALOAD
0x18 DIV
0x19 AND
0x1a PUSH4 0x12e905b0
0x1f DUP2
0x20 EQ
0x21 PUSH2 0x4f
0x24 JUMPI
---
0xb: V5 = 0xffffffff
0x10: V6 = 0xe0
0x12: V7 = 0x2
0x14: V8 = EXP 0x2 0xe0
0x15: V9 = 0x0
0x17: V10 = CALLDATALOAD 0x0
0x18: V11 = DIV V10 0x100000000000000000000000000000000000000000000000000000000
0x19: V12 = AND V11 0xffffffff
0x1a: V13 = 0x12e905b0
0x20: V14 = EQ V12 0x12e905b0
0x21: V15 = 0x4f
0x24: JUMPI 0x4f V14
---
Entry stack: []
Stack pops: 0
Stack additions: [V12]
Exit stack: [V12]

================================

Block 0x25
[0x25:0x2f]
---
Predecessors: [0xb]
Successors: [0x30, 0x7e]
---
0x25 DUP1
0x26 PUSH4 0x1ed4f3e5
0x2b EQ
0x2c PUSH2 0x7e
0x2f JUMPI
---
0x26: V16 = 0x1ed4f3e5
0x2b: V17 = EQ 0x1ed4f3e5 V12
0x2c: V18 = 0x7e
0x2f: JUMPI 0x7e V17
---
Entry stack: [V12]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V12]

================================

Block 0x30
[0x30:0x3a]
---
Predecessors: [0x25]
Successors: [0x3b, 0xad]
---
0x30 DUP1
0x31 PUSH4 0x45d364c0
0x36 EQ
0x37 PUSH2 0xad
0x3a JUMPI
---
0x31: V19 = 0x45d364c0
0x36: V20 = EQ 0x45d364c0 V12
0x37: V21 = 0xad
0x3a: JUMPI 0xad V20
---
Entry stack: [V12]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V12]

================================

Block 0x3b
[0x3b:0x45]
---
Predecessors: [0x30]
Successors: [0x46, 0xdc]
---
0x3b DUP1
0x3c PUSH4 0xd6febde8
0x41 EQ
0x42 PUSH2 0xdc
0x45 JUMPI
---
0x3c: V22 = 0xd6febde8
0x41: V23 = EQ 0xd6febde8 V12
0x42: V24 = 0xdc
0x45: JUMPI 0xdc V23
---
Entry stack: [V12]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V12]

================================

Block 0x46
[0x46:0x49]
---
Predecessors: [0x0, 0x3b]
Successors: [0x4a]
---
0x46 JUMPDEST
0x47 PUSH2 0x4d
---
0x46: JUMPDEST 
0x47: V25 = 0x4d
---
Entry stack: [V12]
Stack pops: 0
Stack additions: [0x4d]
Exit stack: [V12, 0x4d]

================================

Block 0x4a
[0x4a:0x4a]
---
Predecessors: [0x46]
Successors: [0x4b]
---
0x4a JUMPDEST
---
0x4a: JUMPDEST 
---
Entry stack: [V12, 0x4d]
Stack pops: 0
Stack additions: []
Exit stack: [V12, 0x4d]

================================

Block 0x4b
[0x4b:0x4c]
---
Predecessors: [0x4a]
Successors: [0x4d]
---
0x4b JUMPDEST
0x4c JUMP
---
0x4b: JUMPDEST 
0x4c: JUMP 0x4d
---
Entry stack: [V12, 0x4d]
Stack pops: 1
Stack additions: []
Exit stack: [V12]

================================

Block 0x4d
[0x4d:0x4e]
---
Predecessors: [0x4b, 0x4ef]
Successors: []
---
0x4d JUMPDEST
0x4e STOP
---
0x4d: JUMPDEST 
0x4e: STOP 
---
Entry stack: [V12]
Stack pops: 0
Stack additions: []
Exit stack: [V12]

================================

Block 0x4f
[0x4f:0x55]
---
Predecessors: [0xb]
Successors: [0x56, 0x5a]
---
0x4f JUMPDEST
0x50 CALLVALUE
0x51 ISZERO
0x52 PUSH2 0x5a
0x55 JUMPI
---
0x4f: JUMPDEST 
0x50: V26 = CALLVALUE
0x51: V27 = ISZERO V26
0x52: V28 = 0x5a
0x55: JUMPI 0x5a V27
---
Entry stack: [V12]
Stack pops: 0
Stack additions: []
Exit stack: [V12]

================================

Block 0x56
[0x56:0x59]
---
Predecessors: [0x4f]
Successors: []
---
0x56 PUSH1 0x0
0x58 DUP1
0x59 REVERT
---
0x56: V29 = 0x0
0x59: REVERT 0x0 0x0
---
Entry stack: [V12]
Stack pops: 0
Stack additions: []
Exit stack: [V12]

================================

Block 0x5a
[0x5a:0x61]
---
Predecessors: [0x4f]
Successors: [0xf7]
---
0x5a JUMPDEST
0x5b PUSH2 0x62
0x5e PUSH2 0xf7
0x61 JUMP
---
0x5a: JUMPDEST 
0x5b: V30 = 0x62
0x5e: V31 = 0xf7
0x61: JUMP 0xf7
---
Entry stack: [V12]
Stack pops: 0
Stack additions: [0x62]
Exit stack: [V12, 0x62]

================================

Block 0x62
[0x62:0x7d]
---
Predecessors: [0xf7, 0x106, 0x115]
Successors: []
---
0x62 JUMPDEST
0x63 PUSH1 0x40
0x65 MLOAD
0x66 PUSH1 0x1
0x68 PUSH1 0xa0
0x6a PUSH1 0x2
0x6c EXP
0x6d SUB
0x6e SWAP1
0x6f SWAP2
0x70 AND
0x71 DUP2
0x72 MSTORE
0x73 PUSH1 0x20
0x75 ADD
0x76 PUSH1 0x40
0x78 MLOAD
0x79 DUP1
0x7a SWAP2
0x7b SUB
0x7c SWAP1
0x7d RETURN
---
0x62: JUMPDEST 
0x63: V32 = 0x40
0x65: V33 = M[0x40]
0x66: V34 = 0x1
0x68: V35 = 0xa0
0x6a: V36 = 0x2
0x6c: V37 = EXP 0x2 0xa0
0x6d: V38 = SUB 0x10000000000000000000000000000000000000000 0x1
0x70: V39 = AND S0 0xffffffffffffffffffffffffffffffffffffffff
0x72: M[V33] = V39
0x73: V40 = 0x20
0x75: V41 = ADD 0x20 V33
0x76: V42 = 0x40
0x78: V43 = M[0x40]
0x7b: V44 = SUB V41 V43
0x7d: RETURN V43 V44
---
Entry stack: [V12, 0x62, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V12, 0x62]

================================

Block 0x7e
[0x7e:0x84]
---
Predecessors: [0x25]
Successors: [0x85, 0x89]
---
0x7e JUMPDEST
0x7f CALLVALUE
0x80 ISZERO
0x81 PUSH2 0x89
0x84 JUMPI
---
0x7e: JUMPDEST 
0x7f: V45 = CALLVALUE
0x80: V46 = ISZERO V45
0x81: V47 = 0x89
0x84: JUMPI 0x89 V46
---
Entry stack: [V12]
Stack pops: 0
Stack additions: []
Exit stack: [V12]

================================

Block 0x85
[0x85:0x88]
---
Predecessors: [0x7e]
Successors: []
---
0x85 PUSH1 0x0
0x87 DUP1
0x88 REVERT
---
0x85: V48 = 0x0
0x88: REVERT 0x0 0x0
---
Entry stack: [V12]
Stack pops: 0
Stack additions: []
Exit stack: [V12]

================================

Block 0x89
[0x89:0x90]
---
Predecessors: [0x7e]
Successors: [0x106]
---
0x89 JUMPDEST
0x8a PUSH2 0x62
0x8d PUSH2 0x106
0x90 JUMP
---
0x89: JUMPDEST 
0x8a: V49 = 0x62
0x8d: V50 = 0x106
0x90: JUMP 0x106
---
Entry stack: [V12]
Stack pops: 0
Stack additions: [0x62]
Exit stack: [V12, 0x62]

================================

Block 0x91
[0x91:0xac]
---
Predecessors: []
Successors: []
---
0x91 JUMPDEST
0x92 PUSH1 0x40
0x94 MLOAD
0x95 PUSH1 0x1
0x97 PUSH1 0xa0
0x99 PUSH1 0x2
0x9b EXP
0x9c SUB
0x9d SWAP1
0x9e SWAP2
0x9f AND
0xa0 DUP2
0xa1 MSTORE
0xa2 PUSH1 0x20
0xa4 ADD
0xa5 PUSH1 0x40
0xa7 MLOAD
0xa8 DUP1
0xa9 SWAP2
0xaa SUB
0xab SWAP1
0xac RETURN
---
0x91: JUMPDEST 
0x92: V51 = 0x40
0x94: V52 = M[0x40]
0x95: V53 = 0x1
0x97: V54 = 0xa0
0x99: V55 = 0x2
0x9b: V56 = EXP 0x2 0xa0
0x9c: V57 = SUB 0x10000000000000000000000000000000000000000 0x1
0x9f: V58 = AND S0 0xffffffffffffffffffffffffffffffffffffffff
0xa1: M[V52] = V58
0xa2: V59 = 0x20
0xa4: V60 = ADD 0x20 V52
0xa5: V61 = 0x40
0xa7: V62 = M[0x40]
0xaa: V63 = SUB V60 V62
0xac: RETURN V62 V63
---
Entry stack: []
Stack pops: 1
Stack additions: []
Exit stack: []

================================

Block 0xad
[0xad:0xb3]
---
Predecessors: [0x30]
Successors: [0xb4, 0xb8]
---
0xad JUMPDEST
0xae CALLVALUE
0xaf ISZERO
0xb0 PUSH2 0xb8
0xb3 JUMPI
---
0xad: JUMPDEST 
0xae: V64 = CALLVALUE
0xaf: V65 = ISZERO V64
0xb0: V66 = 0xb8
0xb3: JUMPI 0xb8 V65
---
Entry stack: [V12]
Stack pops: 0
Stack additions: []
Exit stack: [V12]

================================

Block 0xb4
[0xb4:0xb7]
---
Predecessors: [0xad]
Successors: []
---
0xb4 PUSH1 0x0
0xb6 DUP1
0xb7 REVERT
---
0xb4: V67 = 0x0
0xb7: REVERT 0x0 0x0
---
Entry stack: [V12]
Stack pops: 0
Stack additions: []
Exit stack: [V12]

================================

Block 0xb8
[0xb8:0xbf]
---
Predecessors: [0xad]
Successors: [0x115]
---
0xb8 JUMPDEST
0xb9 PUSH2 0x62
0xbc PUSH2 0x115
0xbf JUMP
---
0xb8: JUMPDEST 
0xb9: V68 = 0x62
0xbc: V69 = 0x115
0xbf: JUMP 0x115
---
Entry stack: [V12]
Stack pops: 0
Stack additions: [0x62]
Exit stack: [V12, 0x62]

================================

Block 0xc0
[0xc0:0xdb]
---
Predecessors: []
Successors: []
---
0xc0 JUMPDEST
0xc1 PUSH1 0x40
0xc3 MLOAD
0xc4 PUSH1 0x1
0xc6 PUSH1 0xa0
0xc8 PUSH1 0x2
0xca EXP
0xcb SUB
0xcc SWAP1
0xcd SWAP2
0xce AND
0xcf DUP2
0xd0 MSTORE
0xd1 PUSH1 0x20
0xd3 ADD
0xd4 PUSH1 0x40
0xd6 MLOAD
0xd7 DUP1
0xd8 SWAP2
0xd9 SUB
0xda SWAP1
0xdb RETURN
---
0xc0: JUMPDEST 
0xc1: V70 = 0x40
0xc3: V71 = M[0x40]
0xc4: V72 = 0x1
0xc6: V73 = 0xa0
0xc8: V74 = 0x2
0xca: V75 = EXP 0x2 0xa0
0xcb: V76 = SUB 0x10000000000000000000000000000000000000000 0x1
0xce: V77 = AND S0 0xffffffffffffffffffffffffffffffffffffffff
0xd0: M[V71] = V77
0xd1: V78 = 0x20
0xd3: V79 = ADD 0x20 V71
0xd4: V80 = 0x40
0xd6: V81 = M[0x40]
0xd9: V82 = SUB V79 V81
0xdb: RETURN V81 V82
---
Entry stack: []
Stack pops: 1
Stack additions: []
Exit stack: []

================================

Block 0xdc
[0xdc:0xe2]
---
Predecessors: [0x3b]
Successors: [0xe3, 0xe7]
---
0xdc JUMPDEST
0xdd CALLVALUE
0xde ISZERO
0xdf PUSH2 0xe7
0xe2 JUMPI
---
0xdc: JUMPDEST 
0xdd: V83 = CALLVALUE
0xde: V84 = ISZERO V83
0xdf: V85 = 0xe7
0xe2: JUMPI 0xe7 V84
---
Entry stack: [V12]
Stack pops: 0
Stack additions: []
Exit stack: [V12]

================================

Block 0xe3
[0xe3:0xe6]
---
Predecessors: [0xdc]
Successors: []
---
0xe3 PUSH1 0x0
0xe5 DUP1
0xe6 REVERT
---
0xe3: V86 = 0x0
0xe6: REVERT 0x0 0x0
---
Entry stack: [V12]
Stack pops: 0
Stack additions: []
Exit stack: [V12]

================================

Block 0xe7
[0xe7:0xf4]
---
Predecessors: [0xdc]
Successors: [0x124]
---
0xe7 JUMPDEST
0xe8 PUSH2 0x4d
0xeb PUSH1 0x4
0xed CALLDATALOAD
0xee PUSH1 0x24
0xf0 CALLDATALOAD
0xf1 PUSH2 0x124
0xf4 JUMP
---
0xe7: JUMPDEST 
0xe8: V87 = 0x4d
0xeb: V88 = 0x4
0xed: V89 = CALLDATALOAD 0x4
0xee: V90 = 0x24
0xf0: V91 = CALLDATALOAD 0x24
0xf1: V92 = 0x124
0xf4: JUMP 0x124
---
Entry stack: [V12]
Stack pops: 0
Stack additions: [0x4d, V89, V91]
Exit stack: [V12, 0x4d, V89, V91]

================================

Block 0xf5
[0xf5:0xf6]
---
Predecessors: []
Successors: []
---
0xf5 JUMPDEST
0xf6 STOP
---
0xf5: JUMPDEST 
0xf6: STOP 
---
Entry stack: []
Stack pops: 0
Stack additions: []
Exit stack: []

================================

Block 0xf7
[0xf7:0x105]
---
Predecessors: [0x5a]
Successors: [0x62]
---
0xf7 JUMPDEST
0xf8 PUSH1 0x0
0xfa SLOAD
0xfb PUSH1 0x1
0xfd PUSH1 0xa0
0xff PUSH1 0x2
0x101 EXP
0x102 SUB
0x103 AND
0x104 DUP2
0x105 JUMP
---
0xf7: JUMPDEST 
0xf8: V93 = 0x0
0xfa: V94 = S[0x0]
0xfb: V95 = 0x1
0xfd: V96 = 0xa0
0xff: V97 = 0x2
0x101: V98 = EXP 0x2 0xa0
0x102: V99 = SUB 0x10000000000000000000000000000000000000000 0x1
0x103: V100 = AND 0xffffffffffffffffffffffffffffffffffffffff V94
0x105: JUMP 0x62
---
Entry stack: [V12, 0x62]
Stack pops: 1
Stack additions: [S0, V100]
Exit stack: [V12, 0x62, V100]

================================

Block 0x106
[0x106:0x114]
---
Predecessors: [0x89]
Successors: [0x62]
---
0x106 JUMPDEST
0x107 PUSH1 0x2
0x109 SLOAD
0x10a PUSH1 0x1
0x10c PUSH1 0xa0
0x10e PUSH1 0x2
0x110 EXP
0x111 SUB
0x112 AND
0x113 DUP2
0x114 JUMP
---
0x106: JUMPDEST 
0x107: V101 = 0x2
0x109: V102 = S[0x2]
0x10a: V103 = 0x1
0x10c: V104 = 0xa0
0x10e: V105 = 0x2
0x110: V106 = EXP 0x2 0xa0
0x111: V107 = SUB 0x10000000000000000000000000000000000000000 0x1
0x112: V108 = AND 0xffffffffffffffffffffffffffffffffffffffff V102
0x114: JUMP 0x62
---
Entry stack: [V12, 0x62]
Stack pops: 1
Stack additions: [S0, V108]
Exit stack: [V12, 0x62, V108]

================================

Block 0x115
[0x115:0x123]
---
Predecessors: [0xb8]
Successors: [0x62]
---
0x115 JUMPDEST
0x116 PUSH1 0x1
0x118 SLOAD
0x119 PUSH1 0x1
0x11b PUSH1 0xa0
0x11d PUSH1 0x2
0x11f EXP
0x120 SUB
0x121 AND
0x122 DUP2
0x123 JUMP
---
0x115: JUMPDEST 
0x116: V109 = 0x1
0x118: V110 = S[0x1]
0x119: V111 = 0x1
0x11b: V112 = 0xa0
0x11d: V113 = 0x2
0x11f: V114 = EXP 0x2 0xa0
0x120: V115 = SUB 0x10000000000000000000000000000000000000000 0x1
0x121: V116 = AND 0xffffffffffffffffffffffffffffffffffffffff V110
0x123: JUMP 0x62
---
Entry stack: [V12, 0x62]
Stack pops: 1
Stack additions: [S0, V116]
Exit stack: [V12, 0x62, V116]

================================

Block 0x124
[0x124:0x12d]
---
Predecessors: [0xe7]
Successors: [0x12e, 0x1ba]
---
0x124 JUMPDEST
0x125 PUSH1 0x1
0x127 DUP3
0x128 ISZERO
0x129 ISZERO
0x12a PUSH2 0x1ba
0x12d JUMPI
---
0x124: JUMPDEST 
0x125: V117 = 0x1
0x128: V118 = ISZERO V89
0x129: V119 = ISZERO V118
0x12a: V120 = 0x1ba
0x12d: JUMPI 0x1ba V119
---
Entry stack: [V12, 0x4d, V89, V91]
Stack pops: 2
Stack additions: [S1, S0, 0x1]
Exit stack: [V12, 0x4d, V89, V91, 0x1]

================================

Block 0x12e
[0x12e:0x1b9]
---
Predecessors: [0x124]
Successors: [0x4e9]
---
0x12e PUSH1 0x1
0x130 SLOAD
0x131 PUSH1 0x1
0x133 PUSH1 0xa0
0x135 PUSH1 0x2
0x137 EXP
0x138 SUB
0x139 AND
0x13a PUSH3 0x30d40
0x13e PUSH1 0x40
0x140 MLOAD
0x141 PUSH1 0x0
0x143 DUP1
0x144 MLOAD
0x145 PUSH1 0x20
0x147 PUSH2 0x4f5
0x14a DUP4
0x14b CODECOPY
0x14c DUP2
0x14d MLOAD
0x14e SWAP2
0x14f MSTORE
0x150 DUP2
0x151 MSTORE
0x152 PUSH1 0x1b
0x154 ADD
0x155 PUSH1 0x40
0x157 MLOAD
0x158 SWAP1
0x159 DUP2
0x15a SWAP1
0x15b SUB
0x15c SWAP1
0x15d SHA3
0x15e PUSH1 0x3
0x160 SLOAD
0x161 PUSH1 0xe0
0x163 PUSH1 0x2
0x165 EXP
0x166 SWAP1
0x167 SWAP2
0x168 DIV
0x169 SWAP2
0x16a SWAP1
0x16b CALLVALUE
0x16c SWAP1
0x16d PUSH1 0x1
0x16f PUSH1 0xa0
0x171 PUSH1 0x2
0x173 EXP
0x174 SUB
0x175 AND
0x176 PUSH1 0x40
0x178 MLOAD
0x179 PUSH1 0xe0
0x17b PUSH1 0x2
0x17d EXP
0x17e PUSH4 0xffffffff
0x183 DUP7
0x184 AND
0x185 MUL
0x186 DUP2
0x187 MSTORE
0x188 PUSH1 0x4
0x18a DUP2
0x18b ADD
0x18c SWAP3
0x18d SWAP1
0x18e SWAP3
0x18f MSTORE
0x190 PUSH1 0x1
0x192 PUSH1 0xa0
0x194 PUSH1 0x2
0x196 EXP
0x197 SUB
0x198 AND
0x199 PUSH1 0x24
0x19b DUP3
0x19c ADD
0x19d MSTORE
0x19e PUSH1 0x44
0x1a0 ADD
0x1a1 PUSH1 0x0
0x1a3 PUSH1 0x40
0x1a5 MLOAD
0x1a6 DUP1
0x1a7 DUP4
0x1a8 SUB
0x1a9 DUP2
0x1aa PUSH1 0x0
0x1ac DUP9
0x1ad DUP8
0x1ae CALL
0x1af SWAP4
0x1b0 POP
0x1b1 POP
0x1b2 POP
0x1b3 POP
0x1b4 SWAP1
0x1b5 POP
0x1b6 PUSH2 0x4e9
0x1b9 JUMP
---
0x12e: V121 = 0x1
0x130: V122 = S[0x1]
0x131: V123 = 0x1
0x133: V124 = 0xa0
0x135: V125 = 0x2
0x137: V126 = EXP 0x2 0xa0
0x138: V127 = SUB 0x10000000000000000000000000000000000000000 0x1
0x139: V128 = AND 0xffffffffffffffffffffffffffffffffffffffff V122
0x13a: V129 = 0x30d40
0x13e: V130 = 0x40
0x140: V131 = M[0x40]
0x141: V132 = 0x0
0x144: V133 = M[0x0]
0x145: V134 = 0x20
0x147: V135 = 0x4f5
0x14b: CODECOPY 0x0 0x4f5 0x20
0x14d: V136 = M[0x0]
0x14f: M[0x0] = V133
0x151: M[V131] = V136
0x152: V137 = 0x1b
0x154: V138 = ADD 0x1b V131
0x155: V139 = 0x40
0x157: V140 = M[0x40]
0x15b: V141 = SUB V138 V140
0x15d: V142 = SHA3 V140 V141
0x15e: V143 = 0x3
0x160: V144 = S[0x3]
0x161: V145 = 0xe0
0x163: V146 = 0x2
0x165: V147 = EXP 0x2 0xe0
0x168: V148 = DIV V142 0x100000000000000000000000000000000000000000000000000000000
0x16b: V149 = CALLVALUE
0x16d: V150 = 0x1
0x16f: V151 = 0xa0
0x171: V152 = 0x2
0x173: V153 = EXP 0x2 0xa0
0x174: V154 = SUB 0x10000000000000000000000000000000000000000 0x1
0x175: V155 = AND 0xffffffffffffffffffffffffffffffffffffffff V144
0x176: V156 = 0x40
0x178: V157 = M[0x40]
0x179: V158 = 0xe0
0x17b: V159 = 0x2
0x17d: V160 = EXP 0x2 0xe0
0x17e: V161 = 0xffffffff
0x184: V162 = AND V148 0xffffffff
0x185: V163 = MUL V162 0x100000000000000000000000000000000000000000000000000000000
0x187: M[V157] = V163
0x188: V164 = 0x4
0x18b: V165 = ADD V157 0x4
0x18f: M[V165] = V149
0x190: V166 = 0x1
0x192: V167 = 0xa0
0x194: V168 = 0x2
0x196: V169 = EXP 0x2 0xa0
0x197: V170 = SUB 0x10000000000000000000000000000000000000000 0x1
0x198: V171 = AND 0xffffffffffffffffffffffffffffffffffffffff V155
0x199: V172 = 0x24
0x19c: V173 = ADD V157 0x24
0x19d: M[V173] = V171
0x19e: V174 = 0x44
0x1a0: V175 = ADD 0x44 V157
0x1a1: V176 = 0x0
0x1a3: V177 = 0x40
0x1a5: V178 = M[0x40]
0x1a8: V179 = SUB V175 V178
0x1aa: V180 = 0x0
0x1ae: V181 = CALL 0x30d40 V128 0x0 V178 V179 V178 0x0
0x1b6: V182 = 0x4e9
0x1b9: JUMP 0x4e9
---
Entry stack: [V12, 0x4d, V89, V91, 0x1]
Stack pops: 1
Stack additions: [V181]
Exit stack: [V12, 0x4d, V89, V91, V181]

================================

Block 0x1ba
[0x1ba:0x1c3]
---
Predecessors: [0x124]
Successors: [0x1c4, 0x266]
---
0x1ba JUMPDEST
0x1bb DUP3
0x1bc PUSH1 0x1
0x1be EQ
0x1bf ISZERO
0x1c0 PUSH2 0x266
0x1c3 JUMPI
---
0x1ba: JUMPDEST 
0x1bc: V183 = 0x1
0x1be: V184 = EQ 0x1 V89
0x1bf: V185 = ISZERO V184
0x1c0: V186 = 0x266
0x1c3: JUMPI 0x266 V185
---
Entry stack: [V12, 0x4d, V89, V91, 0x1]
Stack pops: 3
Stack additions: [S2, S1, S0]
Exit stack: [V12, 0x4d, V89, V91, 0x1]

================================

Block 0x1c4
[0x1c4:0x250]
---
Predecessors: [0x1ba]
Successors: [0x251, 0x255]
---
0x1c4 PUSH1 0x1
0x1c6 SLOAD
0x1c7 PUSH1 0x1
0x1c9 PUSH1 0xa0
0x1cb PUSH1 0x2
0x1cd EXP
0x1ce SUB
0x1cf AND
0x1d0 PUSH1 0x40
0x1d2 MLOAD
0x1d3 PUSH1 0x0
0x1d5 DUP1
0x1d6 MLOAD
0x1d7 PUSH1 0x20
0x1d9 PUSH2 0x4f5
0x1dc DUP4
0x1dd CODECOPY
0x1de DUP2
0x1df MLOAD
0x1e0 SWAP2
0x1e1 MSTORE
0x1e2 DUP2
0x1e3 MSTORE
0x1e4 PUSH1 0x1b
0x1e6 ADD
0x1e7 PUSH1 0x40
0x1e9 MLOAD
0x1ea SWAP1
0x1eb DUP2
0x1ec SWAP1
0x1ed SUB
0x1ee SWAP1
0x1ef SHA3
0x1f0 PUSH1 0x3
0x1f2 SLOAD
0x1f3 PUSH1 0xe0
0x1f5 PUSH1 0x2
0x1f7 EXP
0x1f8 SWAP1
0x1f9 SWAP2
0x1fa DIV
0x1fb SWAP1
0x1fc CALLVALUE
0x1fd SWAP1
0x1fe PUSH1 0x1
0x200 PUSH1 0xa0
0x202 PUSH1 0x2
0x204 EXP
0x205 SUB
0x206 AND
0x207 PUSH1 0x0
0x209 PUSH1 0x40
0x20b MLOAD
0x20c PUSH1 0x20
0x20e ADD
0x20f MSTORE
0x210 PUSH1 0x40
0x212 MLOAD
0x213 PUSH1 0xe0
0x215 PUSH1 0x2
0x217 EXP
0x218 PUSH4 0xffffffff
0x21d DUP6
0x21e AND
0x21f MUL
0x220 DUP2
0x221 MSTORE
0x222 PUSH1 0x4
0x224 DUP2
0x225 ADD
0x226 SWAP3
0x227 SWAP1
0x228 SWAP3
0x229 MSTORE
0x22a PUSH1 0x1
0x22c PUSH1 0xa0
0x22e PUSH1 0x2
0x230 EXP
0x231 SUB
0x232 AND
0x233 PUSH1 0x24
0x235 DUP3
0x236 ADD
0x237 MSTORE
0x238 PUSH1 0x44
0x23a ADD
0x23b PUSH1 0x20
0x23d PUSH1 0x40
0x23f MLOAD
0x240 DUP1
0x241 DUP4
0x242 SUB
0x243 DUP2
0x244 DUP7
0x245 PUSH2 0x2c6
0x248 GAS
0x249 SUB
0x24a DELEGATECALL
0x24b ISZERO
0x24c ISZERO
0x24d PUSH2 0x255
0x250 JUMPI
---
0x1c4: V187 = 0x1
0x1c6: V188 = S[0x1]
0x1c7: V189 = 0x1
0x1c9: V190 = 0xa0
0x1cb: V191 = 0x2
0x1cd: V192 = EXP 0x2 0xa0
0x1ce: V193 = SUB 0x10000000000000000000000000000000000000000 0x1
0x1cf: V194 = AND 0xffffffffffffffffffffffffffffffffffffffff V188
0x1d0: V195 = 0x40
0x1d2: V196 = M[0x40]
0x1d3: V197 = 0x0
0x1d6: V198 = M[0x0]
0x1d7: V199 = 0x20
0x1d9: V200 = 0x4f5
0x1dd: CODECOPY 0x0 0x4f5 0x20
0x1df: V201 = M[0x0]
0x1e1: M[0x0] = V198
0x1e3: M[V196] = V201
0x1e4: V202 = 0x1b
0x1e6: V203 = ADD 0x1b V196
0x1e7: V204 = 0x40
0x1e9: V205 = M[0x40]
0x1ed: V206 = SUB V203 V205
0x1ef: V207 = SHA3 V205 V206
0x1f0: V208 = 0x3
0x1f2: V209 = S[0x3]
0x1f3: V210 = 0xe0
0x1f5: V211 = 0x2
0x1f7: V212 = EXP 0x2 0xe0
0x1fa: V213 = DIV V207 0x100000000000000000000000000000000000000000000000000000000
0x1fc: V214 = CALLVALUE
0x1fe: V215 = 0x1
0x200: V216 = 0xa0
0x202: V217 = 0x2
0x204: V218 = EXP 0x2 0xa0
0x205: V219 = SUB 0x10000000000000000000000000000000000000000 0x1
0x206: V220 = AND 0xffffffffffffffffffffffffffffffffffffffff V209
0x207: V221 = 0x0
0x209: V222 = 0x40
0x20b: V223 = M[0x40]
0x20c: V224 = 0x20
0x20e: V225 = ADD 0x20 V223
0x20f: M[V225] = 0x0
0x210: V226 = 0x40
0x212: V227 = M[0x40]
0x213: V228 = 0xe0
0x215: V229 = 0x2
0x217: V230 = EXP 0x2 0xe0
0x218: V231 = 0xffffffff
0x21e: V232 = AND V213 0xffffffff
0x21f: V233 = MUL V232 0x100000000000000000000000000000000000000000000000000000000
0x221: M[V227] = V233
0x222: V234 = 0x4
0x225: V235 = ADD V227 0x4
0x229: M[V235] = V214
0x22a: V236 = 0x1
0x22c: V237 = 0xa0
0x22e: V238 = 0x2
0x230: V239 = EXP 0x2 0xa0
0x231: V240 = SUB 0x10000000000000000000000000000000000000000 0x1
0x232: V241 = AND 0xffffffffffffffffffffffffffffffffffffffff V220
0x233: V242 = 0x24
0x236: V243 = ADD V227 0x24
0x237: M[V243] = V241
0x238: V244 = 0x44
0x23a: V245 = ADD 0x44 V227
0x23b: V246 = 0x20
0x23d: V247 = 0x40
0x23f: V248 = M[0x40]
0x242: V249 = SUB V245 V248
0x245: V250 = 0x2c6
0x248: V251 = GAS
0x249: V252 = SUB V251 0x2c6
0x24a: V253 = DELEGATECALL V252 V194 V248 V249 V248 0x20
0x24b: V254 = ISZERO V253
0x24c: V255 = ISZERO V254
0x24d: V256 = 0x255
0x250: JUMPI 0x255 V255
---
Entry stack: [V12, 0x4d, V89, V91, 0x1]
Stack pops: 0
Stack additions: [V194, V213, V245]
Exit stack: [V12, 0x4d, V89, V91, 0x1, V194, V213, V245]

================================

Block 0x251
[0x251:0x254]
---
Predecessors: [0x1c4]
Successors: []
---
0x251 PUSH1 0x0
0x253 DUP1
0x254 REVERT
---
0x251: V257 = 0x0
0x254: REVERT 0x0 0x0
---
Entry stack: [V12, 0x4d, V89, V91, 0x1, V194, V213, V245]
Stack pops: 0
Stack additions: []
Exit stack: [V12, 0x4d, V89, V91, 0x1, V194, V213, V245]

================================

Block 0x255
[0x255:0x265]
---
Predecessors: [0x1c4, 0x306]
Successors: [0x4e9]
---
0x255 JUMPDEST
0x256 POP
0x257 POP
0x258 POP
0x259 PUSH1 0x40
0x25b MLOAD
0x25c DUP1
0x25d MLOAD
0x25e SWAP1
0x25f POP
0x260 SWAP1
0x261 POP
0x262 PUSH2 0x4e9
0x265 JUMP
---
0x255: JUMPDEST 
0x259: V258 = 0x40
0x25b: V259 = M[0x40]
0x25d: V260 = M[V259]
0x262: V261 = 0x4e9
0x265: JUMP 0x4e9
---
Entry stack: [V12, 0x4d, V89, V91, 0x1, S2, S1, S0]
Stack pops: 4
Stack additions: [V260]
Exit stack: [V12, 0x4d, V89, V91, V260]

================================

Block 0x266
[0x266:0x26f]
---
Predecessors: [0x1ba]
Successors: [0x270, 0x2fc]
---
0x266 JUMPDEST
0x267 DUP3
0x268 PUSH1 0x2
0x26a EQ
0x26b ISZERO
0x26c PUSH2 0x2fc
0x26f JUMPI
---
0x266: JUMPDEST 
0x268: V262 = 0x2
0x26a: V263 = EQ 0x2 V89
0x26b: V264 = ISZERO V263
0x26c: V265 = 0x2fc
0x26f: JUMPI 0x2fc V264
---
Entry stack: [V12, 0x4d, V89, V91, 0x1]
Stack pops: 3
Stack additions: [S2, S1, S0]
Exit stack: [V12, 0x4d, V89, V91, 0x1]

================================

Block 0x270
[0x270:0x2fb]
---
Predecessors: [0x266]
Successors: [0x4e9]
---
0x270 PUSH1 0x1
0x272 SLOAD
0x273 PUSH1 0x1
0x275 PUSH1 0xa0
0x277 PUSH1 0x2
0x279 EXP
0x27a SUB
0x27b AND
0x27c PUSH3 0x30d40
0x280 PUSH1 0x40
0x282 MLOAD
0x283 PUSH1 0x0
0x285 DUP1
0x286 MLOAD
0x287 PUSH1 0x20
0x289 PUSH2 0x4f5
0x28c DUP4
0x28d CODECOPY
0x28e DUP2
0x28f MLOAD
0x290 SWAP2
0x291 MSTORE
0x292 DUP2
0x293 MSTORE
0x294 PUSH1 0x1b
0x296 ADD
0x297 PUSH1 0x40
0x299 MLOAD
0x29a SWAP1
0x29b DUP2
0x29c SWAP1
0x29d SUB
0x29e SWAP1
0x29f SHA3
0x2a0 PUSH1 0x3
0x2a2 SLOAD
0x2a3 PUSH1 0xe0
0x2a5 PUSH1 0x2
0x2a7 EXP
0x2a8 SWAP1
0x2a9 SWAP2
0x2aa DIV
0x2ab SWAP2
0x2ac SWAP1
0x2ad DUP6
0x2ae SWAP1
0x2af PUSH1 0x1
0x2b1 PUSH1 0xa0
0x2b3 PUSH1 0x2
0x2b5 EXP
0x2b6 SUB
0x2b7 AND
0x2b8 PUSH1 0x40
0x2ba MLOAD
0x2bb PUSH1 0xe0
0x2bd PUSH1 0x2
0x2bf EXP
0x2c0 PUSH4 0xffffffff
0x2c5 DUP7
0x2c6 AND
0x2c7 MUL
0x2c8 DUP2
0x2c9 MSTORE
0x2ca PUSH1 0x4
0x2cc DUP2
0x2cd ADD
0x2ce SWAP3
0x2cf SWAP1
0x2d0 SWAP3
0x2d1 MSTORE
0x2d2 PUSH1 0x1
0x2d4 PUSH1 0xa0
0x2d6 PUSH1 0x2
0x2d8 EXP
0x2d9 SUB
0x2da AND
0x2db PUSH1 0x24
0x2dd DUP3
0x2de ADD
0x2df MSTORE
0x2e0 PUSH1 0x44
0x2e2 ADD
0x2e3 PUSH1 0x0
0x2e5 PUSH1 0x40
0x2e7 MLOAD
0x2e8 DUP1
0x2e9 DUP4
0x2ea SUB
0x2eb DUP2
0x2ec PUSH1 0x0
0x2ee DUP9
0x2ef DUP8
0x2f0 CALL
0x2f1 SWAP4
0x2f2 POP
0x2f3 POP
0x2f4 POP
0x2f5 POP
0x2f6 SWAP1
0x2f7 POP
0x2f8 PUSH2 0x4e9
0x2fb JUMP
---
0x270: V266 = 0x1
0x272: V267 = S[0x1]
0x273: V268 = 0x1
0x275: V269 = 0xa0
0x277: V270 = 0x2
0x279: V271 = EXP 0x2 0xa0
0x27a: V272 = SUB 0x10000000000000000000000000000000000000000 0x1
0x27b: V273 = AND 0xffffffffffffffffffffffffffffffffffffffff V267
0x27c: V274 = 0x30d40
0x280: V275 = 0x40
0x282: V276 = M[0x40]
0x283: V277 = 0x0
0x286: V278 = M[0x0]
0x287: V279 = 0x20
0x289: V280 = 0x4f5
0x28d: CODECOPY 0x0 0x4f5 0x20
0x28f: V281 = M[0x0]
0x291: M[0x0] = V278
0x293: M[V276] = V281
0x294: V282 = 0x1b
0x296: V283 = ADD 0x1b V276
0x297: V284 = 0x40
0x299: V285 = M[0x40]
0x29d: V286 = SUB V283 V285
0x29f: V287 = SHA3 V285 V286
0x2a0: V288 = 0x3
0x2a2: V289 = S[0x3]
0x2a3: V290 = 0xe0
0x2a5: V291 = 0x2
0x2a7: V292 = EXP 0x2 0xe0
0x2aa: V293 = DIV V287 0x100000000000000000000000000000000000000000000000000000000
0x2af: V294 = 0x1
0x2b1: V295 = 0xa0
0x2b3: V296 = 0x2
0x2b5: V297 = EXP 0x2 0xa0
0x2b6: V298 = SUB 0x10000000000000000000000000000000000000000 0x1
0x2b7: V299 = AND 0xffffffffffffffffffffffffffffffffffffffff V289
0x2b8: V300 = 0x40
0x2ba: V301 = M[0x40]
0x2bb: V302 = 0xe0
0x2bd: V303 = 0x2
0x2bf: V304 = EXP 0x2 0xe0
0x2c0: V305 = 0xffffffff
0x2c6: V306 = AND V293 0xffffffff
0x2c7: V307 = MUL V306 0x100000000000000000000000000000000000000000000000000000000
0x2c9: M[V301] = V307
0x2ca: V308 = 0x4
0x2cd: V309 = ADD V301 0x4
0x2d1: M[V309] = V91
0x2d2: V310 = 0x1
0x2d4: V311 = 0xa0
0x2d6: V312 = 0x2
0x2d8: V313 = EXP 0x2 0xa0
0x2d9: V314 = SUB 0x10000000000000000000000000000000000000000 0x1
0x2da: V315 = AND 0xffffffffffffffffffffffffffffffffffffffff V299
0x2db: V316 = 0x24
0x2de: V317 = ADD V301 0x24
0x2df: M[V317] = V315
0x2e0: V318 = 0x44
0x2e2: V319 = ADD 0x44 V301
0x2e3: V320 = 0x0
0x2e5: V321 = 0x40
0x2e7: V322 = M[0x40]
0x2ea: V323 = SUB V319 V322
0x2ec: V324 = 0x0
0x2f0: V325 = CALL 0x30d40 V273 0x0 V322 V323 V322 0x0
0x2f8: V326 = 0x4e9
0x2fb: JUMP 0x4e9
---
Entry stack: [V12, 0x4d, V89, V91, 0x1]
Stack pops: 2
Stack additions: [S1, V325]
Exit stack: [V12, 0x4d, V89, V91, V325]

================================

Block 0x2fc
[0x2fc:0x305]
---
Predecessors: [0x266]
Successors: [0x306, 0x3a8]
---
0x2fc JUMPDEST
0x2fd DUP3
0x2fe PUSH1 0x3
0x300 EQ
0x301 ISZERO
0x302 PUSH2 0x3a8
0x305 JUMPI
---
0x2fc: JUMPDEST 
0x2fe: V327 = 0x3
0x300: V328 = EQ 0x3 V89
0x301: V329 = ISZERO V328
0x302: V330 = 0x3a8
0x305: JUMPI 0x3a8 V329
---
Entry stack: [V12, 0x4d, V89, V91, 0x1]
Stack pops: 3
Stack additions: [S2, S1, S0]
Exit stack: [V12, 0x4d, V89, V91, 0x1]

================================

Block 0x306
[0x306:0x392]
---
Predecessors: [0x2fc]
Successors: [0x255, 0x393]
---
0x306 PUSH1 0x1
0x308 SLOAD
0x309 PUSH1 0x1
0x30b PUSH1 0xa0
0x30d PUSH1 0x2
0x30f EXP
0x310 SUB
0x311 AND
0x312 PUSH1 0x40
0x314 MLOAD
0x315 PUSH1 0x0
0x317 DUP1
0x318 MLOAD
0x319 PUSH1 0x20
0x31b PUSH2 0x4f5
0x31e DUP4
0x31f CODECOPY
0x320 DUP2
0x321 MLOAD
0x322 SWAP2
0x323 MSTORE
0x324 DUP2
0x325 MSTORE
0x326 PUSH1 0x1b
0x328 ADD
0x329 PUSH1 0x40
0x32b MLOAD
0x32c SWAP1
0x32d DUP2
0x32e SWAP1
0x32f SUB
0x330 SWAP1
0x331 SHA3
0x332 PUSH1 0x3
0x334 SLOAD
0x335 PUSH1 0xe0
0x337 PUSH1 0x2
0x339 EXP
0x33a SWAP1
0x33b SWAP2
0x33c DIV
0x33d SWAP1
0x33e DUP5
0x33f SWAP1
0x340 PUSH1 0x1
0x342 PUSH1 0xa0
0x344 PUSH1 0x2
0x346 EXP
0x347 SUB
0x348 AND
0x349 PUSH1 0x0
0x34b PUSH1 0x40
0x34d MLOAD
0x34e PUSH1 0x20
0x350 ADD
0x351 MSTORE
0x352 PUSH1 0x40
0x354 MLOAD
0x355 PUSH1 0xe0
0x357 PUSH1 0x2
0x359 EXP
0x35a PUSH4 0xffffffff
0x35f DUP6
0x360 AND
0x361 MUL
0x362 DUP2
0x363 MSTORE
0x364 PUSH1 0x4
0x366 DUP2
0x367 ADD
0x368 SWAP3
0x369 SWAP1
0x36a SWAP3
0x36b MSTORE
0x36c PUSH1 0x1
0x36e PUSH1 0xa0
0x370 PUSH1 0x2
0x372 EXP
0x373 SUB
0x374 AND
0x375 PUSH1 0x24
0x377 DUP3
0x378 ADD
0x379 MSTORE
0x37a PUSH1 0x44
0x37c ADD
0x37d PUSH1 0x20
0x37f PUSH1 0x40
0x381 MLOAD
0x382 DUP1
0x383 DUP4
0x384 SUB
0x385 DUP2
0x386 DUP7
0x387 PUSH2 0x2c6
0x38a GAS
0x38b SUB
0x38c DELEGATECALL
0x38d ISZERO
0x38e ISZERO
0x38f PUSH2 0x255
0x392 JUMPI
---
0x306: V331 = 0x1
0x308: V332 = S[0x1]
0x309: V333 = 0x1
0x30b: V334 = 0xa0
0x30d: V335 = 0x2
0x30f: V336 = EXP 0x2 0xa0
0x310: V337 = SUB 0x10000000000000000000000000000000000000000 0x1
0x311: V338 = AND 0xffffffffffffffffffffffffffffffffffffffff V332
0x312: V339 = 0x40
0x314: V340 = M[0x40]
0x315: V341 = 0x0
0x318: V342 = M[0x0]
0x319: V343 = 0x20
0x31b: V344 = 0x4f5
0x31f: CODECOPY 0x0 0x4f5 0x20
0x321: V345 = M[0x0]
0x323: M[0x0] = V342
0x325: M[V340] = V345
0x326: V346 = 0x1b
0x328: V347 = ADD 0x1b V340
0x329: V348 = 0x40
0x32b: V349 = M[0x40]
0x32f: V350 = SUB V347 V349
0x331: V351 = SHA3 V349 V350
0x332: V352 = 0x3
0x334: V353 = S[0x3]
0x335: V354 = 0xe0
0x337: V355 = 0x2
0x339: V356 = EXP 0x2 0xe0
0x33c: V357 = DIV V351 0x100000000000000000000000000000000000000000000000000000000
0x340: V358 = 0x1
0x342: V359 = 0xa0
0x344: V360 = 0x2
0x346: V361 = EXP 0x2 0xa0
0x347: V362 = SUB 0x10000000000000000000000000000000000000000 0x1
0x348: V363 = AND 0xffffffffffffffffffffffffffffffffffffffff V353
0x349: V364 = 0x0
0x34b: V365 = 0x40
0x34d: V366 = M[0x40]
0x34e: V367 = 0x20
0x350: V368 = ADD 0x20 V366
0x351: M[V368] = 0x0
0x352: V369 = 0x40
0x354: V370 = M[0x40]
0x355: V371 = 0xe0
0x357: V372 = 0x2
0x359: V373 = EXP 0x2 0xe0
0x35a: V374 = 0xffffffff
0x360: V375 = AND V357 0xffffffff
0x361: V376 = MUL V375 0x100000000000000000000000000000000000000000000000000000000
0x363: M[V370] = V376
0x364: V377 = 0x4
0x367: V378 = ADD V370 0x4
0x36b: M[V378] = V91
0x36c: V379 = 0x1
0x36e: V380 = 0xa0
0x370: V381 = 0x2
0x372: V382 = EXP 0x2 0xa0
0x373: V383 = SUB 0x10000000000000000000000000000000000000000 0x1
0x374: V384 = AND 0xffffffffffffffffffffffffffffffffffffffff V363
0x375: V385 = 0x24
0x378: V386 = ADD V370 0x24
0x379: M[V386] = V384
0x37a: V387 = 0x44
0x37c: V388 = ADD 0x44 V370
0x37d: V389 = 0x20
0x37f: V390 = 0x40
0x381: V391 = M[0x40]
0x384: V392 = SUB V388 V391
0x387: V393 = 0x2c6
0x38a: V394 = GAS
0x38b: V395 = SUB V394 0x2c6
0x38c: V396 = DELEGATECALL V395 V338 V391 V392 V391 0x20
0x38d: V397 = ISZERO V396
0x38e: V398 = ISZERO V397
0x38f: V399 = 0x255
0x392: JUMPI 0x255 V398
---
Entry stack: [V12, 0x4d, V89, V91, 0x1]
Stack pops: 2
Stack additions: [S1, S0, V338, V357, V388]
Exit stack: [V12, 0x4d, V89, V91, 0x1, V338, V357, V388]

================================

Block 0x393
[0x393:0x396]
---
Predecessors: [0x306]
Successors: []
---
0x393 PUSH1 0x0
0x395 DUP1
0x396 REVERT
---
0x393: V400 = 0x0
0x396: REVERT 0x0 0x0
---
Entry stack: [V12, 0x4d, V89, V91, 0x1, V338, V357, V388]
Stack pops: 0
Stack additions: []
Exit stack: [V12, 0x4d, V89, V91, 0x1, V338, V357, V388]

================================

Block 0x397
[0x397:0x3a7]
---
Predecessors: []
Successors: [0x4e9]
---
0x397 JUMPDEST
0x398 POP
0x399 POP
0x39a POP
0x39b PUSH1 0x40
0x39d MLOAD
0x39e DUP1
0x39f MLOAD
0x3a0 SWAP1
0x3a1 POP
0x3a2 SWAP1
0x3a3 POP
0x3a4 PUSH2 0x4e9
0x3a7 JUMP
---
0x397: JUMPDEST 
0x39b: V401 = 0x40
0x39d: V402 = M[0x40]
0x39f: V403 = M[V402]
0x3a4: V404 = 0x4e9
0x3a7: JUMP 0x4e9
---
Entry stack: []
Stack pops: 4
Stack additions: [V403]
Exit stack: [V403]

================================

Block 0x3a8
[0x3a8:0x3b1]
---
Predecessors: [0x2fc]
Successors: [0x3b2, 0x440]
---
0x3a8 JUMPDEST
0x3a9 DUP3
0x3aa PUSH1 0x4
0x3ac EQ
0x3ad ISZERO
0x3ae PUSH2 0x440
0x3b1 JUMPI
---
0x3a8: JUMPDEST 
0x3aa: V405 = 0x4
0x3ac: V406 = EQ 0x4 V89
0x3ad: V407 = ISZERO V406
0x3ae: V408 = 0x440
0x3b1: JUMPI 0x440 V407
---
Entry stack: [V12, 0x4d, V89, V91, 0x1]
Stack pops: 3
Stack additions: [S2, S1, S0]
Exit stack: [V12, 0x4d, V89, V91, 0x1]

================================

Block 0x3b2
[0x3b2:0x43f]
---
Predecessors: [0x3a8]
Successors: [0x4e9]
---
0x3b2 PUSH1 0x1
0x3b4 SLOAD
0x3b5 PUSH1 0x1
0x3b7 PUSH1 0xa0
0x3b9 PUSH1 0x2
0x3bb EXP
0x3bc SUB
0x3bd AND
0x3be PUSH3 0x30d40
0x3c2 PUSH1 0x40
0x3c4 MLOAD
0x3c5 PUSH1 0x0
0x3c7 DUP1
0x3c8 MLOAD
0x3c9 PUSH1 0x20
0x3cb PUSH2 0x4f5
0x3ce DUP4
0x3cf CODECOPY
0x3d0 DUP2
0x3d1 MLOAD
0x3d2 SWAP2
0x3d3 MSTORE
0x3d4 DUP2
0x3d5 MSTORE
0x3d6 PUSH1 0x1b
0x3d8 ADD
0x3d9 PUSH1 0x40
0x3db MLOAD
0x3dc SWAP1
0x3dd DUP2
0x3de SWAP1
0x3df SUB
0x3e0 SWAP1
0x3e1 SHA3
0x3e2 PUSH1 0x3
0x3e4 SLOAD
0x3e5 PUSH1 0xe0
0x3e7 PUSH1 0x2
0x3e9 EXP
0x3ea SWAP1
0x3eb SWAP2
0x3ec DIV
0x3ed SWAP2
0x3ee SWAP1
0x3ef CALLVALUE
0x3f0 DUP7
0x3f1 MUL
0x3f2 SWAP1
0x3f3 PUSH1 0x1
0x3f5 PUSH1 0xa0
0x3f7 PUSH1 0x2
0x3f9 EXP
0x3fa SUB
0x3fb AND
0x3fc PUSH1 0x40
0x3fe MLOAD
0x3ff PUSH1 0xe0
0x401 PUSH1 0x2
0x403 EXP
0x404 PUSH4 0xffffffff
0x409 DUP7
0x40a AND
0x40b MUL
0x40c DUP2
0x40d MSTORE
0x40e PUSH1 0x4
0x410 DUP2
0x411 ADD
0x412 SWAP3
0x413 SWAP1
0x414 SWAP3
0x415 MSTORE
0x416 PUSH1 0x1
0x418 PUSH1 0xa0
0x41a PUSH1 0x2
0x41c EXP
0x41d SUB
0x41e AND
0x41f PUSH1 0x24
0x421 DUP3
0x422 ADD
0x423 MSTORE
0x424 PUSH1 0x44
0x426 ADD
0x427 PUSH1 0x0
0x429 PUSH1 0x40
0x42b MLOAD
0x42c DUP1
0x42d DUP4
0x42e SUB
0x42f DUP2
0x430 PUSH1 0x0
0x432 DUP9
0x433 DUP8
0x434 CALL
0x435 SWAP4
0x436 POP
0x437 POP
0x438 POP
0x439 POP
0x43a SWAP1
0x43b POP
0x43c PUSH2 0x4e9
0x43f JUMP
---
0x3b2: V409 = 0x1
0x3b4: V410 = S[0x1]
0x3b5: V411 = 0x1
0x3b7: V412 = 0xa0
0x3b9: V413 = 0x2
0x3bb: V414 = EXP 0x2 0xa0
0x3bc: V415 = SUB 0x10000000000000000000000000000000000000000 0x1
0x3bd: V416 = AND 0xffffffffffffffffffffffffffffffffffffffff V410
0x3be: V417 = 0x30d40
0x3c2: V418 = 0x40
0x3c4: V419 = M[0x40]
0x3c5: V420 = 0x0
0x3c8: V421 = M[0x0]
0x3c9: V422 = 0x20
0x3cb: V423 = 0x4f5
0x3cf: CODECOPY 0x0 0x4f5 0x20
0x3d1: V424 = M[0x0]
0x3d3: M[0x0] = V421
0x3d5: M[V419] = V424
0x3d6: V425 = 0x1b
0x3d8: V426 = ADD 0x1b V419
0x3d9: V427 = 0x40
0x3db: V428 = M[0x40]
0x3df: V429 = SUB V426 V428
0x3e1: V430 = SHA3 V428 V429
0x3e2: V431 = 0x3
0x3e4: V432 = S[0x3]
0x3e5: V433 = 0xe0
0x3e7: V434 = 0x2
0x3e9: V435 = EXP 0x2 0xe0
0x3ec: V436 = DIV V430 0x100000000000000000000000000000000000000000000000000000000
0x3ef: V437 = CALLVALUE
0x3f1: V438 = MUL V91 V437
0x3f3: V439 = 0x1
0x3f5: V440 = 0xa0
0x3f7: V441 = 0x2
0x3f9: V442 = EXP 0x2 0xa0
0x3fa: V443 = SUB 0x10000000000000000000000000000000000000000 0x1
0x3fb: V444 = AND 0xffffffffffffffffffffffffffffffffffffffff V432
0x3fc: V445 = 0x40
0x3fe: V446 = M[0x40]
0x3ff: V447 = 0xe0
0x401: V448 = 0x2
0x403: V449 = EXP 0x2 0xe0
0x404: V450 = 0xffffffff
0x40a: V451 = AND V436 0xffffffff
0x40b: V452 = MUL V451 0x100000000000000000000000000000000000000000000000000000000
0x40d: M[V446] = V452
0x40e: V453 = 0x4
0x411: V454 = ADD V446 0x4
0x415: M[V454] = V438
0x416: V455 = 0x1
0x418: V456 = 0xa0
0x41a: V457 = 0x2
0x41c: V458 = EXP 0x2 0xa0
0x41d: V459 = SUB 0x10000000000000000000000000000000000000000 0x1
0x41e: V460 = AND 0xffffffffffffffffffffffffffffffffffffffff V444
0x41f: V461 = 0x24
0x422: V462 = ADD V446 0x24
0x423: M[V462] = V460
0x424: V463 = 0x44
0x426: V464 = ADD 0x44 V446
0x427: V465 = 0x0
0x429: V466 = 0x40
0x42b: V467 = M[0x40]
0x42e: V468 = SUB V464 V467
0x430: V469 = 0x0
0x434: V470 = CALL 0x30d40 V416 0x0 V467 V468 V467 0x0
0x43c: V471 = 0x4e9
0x43f: JUMP 0x4e9
---
Entry stack: [V12, 0x4d, V89, V91, 0x1]
Stack pops: 2
Stack additions: [S1, V470]
Exit stack: [V12, 0x4d, V89, V91, V470]

================================

Block 0x440
[0x440:0x449]
---
Predecessors: [0x3a8]
Successors: [0x44a, 0x4e9]
---
0x440 JUMPDEST
0x441 DUP3
0x442 PUSH1 0x5
0x444 EQ
0x445 ISZERO
0x446 PUSH2 0x4e9
0x449 JUMPI
---
0x440: JUMPDEST 
0x442: V472 = 0x5
0x444: V473 = EQ 0x5 V89
0x445: V474 = ISZERO V473
0x446: V475 = 0x4e9
0x449: JUMPI 0x4e9 V474
---
Entry stack: [V12, 0x4d, V89, V91, 0x1]
Stack pops: 3
Stack additions: [S2, S1, S0]
Exit stack: [V12, 0x4d, V89, V91, 0x1]

================================

Block 0x44a
[0x44a:0x4d8]
---
Predecessors: [0x440]
Successors: [0x4d9, 0x4dd]
---
0x44a PUSH1 0x1
0x44c SLOAD
0x44d PUSH1 0x1
0x44f PUSH1 0xa0
0x451 PUSH1 0x2
0x453 EXP
0x454 SUB
0x455 AND
0x456 PUSH1 0x40
0x458 MLOAD
0x459 PUSH1 0x0
0x45b DUP1
0x45c MLOAD
0x45d PUSH1 0x20
0x45f PUSH2 0x4f5
0x462 DUP4
0x463 CODECOPY
0x464 DUP2
0x465 MLOAD
0x466 SWAP2
0x467 MSTORE
0x468 DUP2
0x469 MSTORE
0x46a PUSH1 0x1b
0x46c ADD
0x46d PUSH1 0x40
0x46f MLOAD
0x470 SWAP1
0x471 DUP2
0x472 SWAP1
0x473 SUB
0x474 SWAP1
0x475 SHA3
0x476 PUSH1 0x3
0x478 SLOAD
0x479 PUSH1 0xe0
0x47b PUSH1 0x2
0x47d EXP
0x47e SWAP1
0x47f SWAP2
0x480 DIV
0x481 SWAP1
0x482 CALLVALUE
0x483 DUP6
0x484 MUL
0x485 SWAP1
0x486 PUSH1 0x1
0x488 PUSH1 0xa0
0x48a PUSH1 0x2
0x48c EXP
0x48d SUB
0x48e AND
0x48f PUSH1 0x0
0x491 PUSH1 0x40
0x493 MLOAD
0x494 PUSH1 0x20
0x496 ADD
0x497 MSTORE
0x498 PUSH1 0x40
0x49a MLOAD
0x49b PUSH1 0xe0
0x49d PUSH1 0x2
0x49f EXP
0x4a0 PUSH4 0xffffffff
0x4a5 DUP6
0x4a6 AND
0x4a7 MUL
0x4a8 DUP2
0x4a9 MSTORE
0x4aa PUSH1 0x4
0x4ac DUP2
0x4ad ADD
0x4ae SWAP3
0x4af SWAP1
0x4b0 SWAP3
0x4b1 MSTORE
0x4b2 PUSH1 0x1
0x4b4 PUSH1 0xa0
0x4b6 PUSH1 0x2
0x4b8 EXP
0x4b9 SUB
0x4ba AND
0x4bb PUSH1 0x24
0x4bd DUP3
0x4be ADD
0x4bf MSTORE
0x4c0 PUSH1 0x44
0x4c2 ADD
0x4c3 PUSH1 0x20
0x4c5 PUSH1 0x40
0x4c7 MLOAD
0x4c8 DUP1
0x4c9 DUP4
0x4ca SUB
0x4cb DUP2
0x4cc DUP7
0x4cd PUSH2 0x2c6
0x4d0 GAS
0x4d1 SUB
0x4d2 DELEGATECALL
0x4d3 ISZERO
0x4d4 ISZERO
0x4d5 PUSH2 0x4dd
0x4d8 JUMPI
---
0x44a: V476 = 0x1
0x44c: V477 = S[0x1]
0x44d: V478 = 0x1
0x44f: V479 = 0xa0
0x451: V480 = 0x2
0x453: V481 = EXP 0x2 0xa0
0x454: V482 = SUB 0x10000000000000000000000000000000000000000 0x1
0x455: V483 = AND 0xffffffffffffffffffffffffffffffffffffffff V477
0x456: V484 = 0x40
0x458: V485 = M[0x40]
0x459: V486 = 0x0
0x45c: V487 = M[0x0]
0x45d: V488 = 0x20
0x45f: V489 = 0x4f5
0x463: CODECOPY 0x0 0x4f5 0x20
0x465: V490 = M[0x0]
0x467: M[0x0] = V487
0x469: M[V485] = V490
0x46a: V491 = 0x1b
0x46c: V492 = ADD 0x1b V485
0x46d: V493 = 0x40
0x46f: V494 = M[0x40]
0x473: V495 = SUB V492 V494
0x475: V496 = SHA3 V494 V495
0x476: V497 = 0x3
0x478: V498 = S[0x3]
0x479: V499 = 0xe0
0x47b: V500 = 0x2
0x47d: V501 = EXP 0x2 0xe0
0x480: V502 = DIV V496 0x100000000000000000000000000000000000000000000000000000000
0x482: V503 = CALLVALUE
0x484: V504 = MUL V91 V503
0x486: V505 = 0x1
0x488: V506 = 0xa0
0x48a: V507 = 0x2
0x48c: V508 = EXP 0x2 0xa0
0x48d: V509 = SUB 0x10000000000000000000000000000000000000000 0x1
0x48e: V510 = AND 0xffffffffffffffffffffffffffffffffffffffff V498
0x48f: V511 = 0x0
0x491: V512 = 0x40
0x493: V513 = M[0x40]
0x494: V514 = 0x20
0x496: V515 = ADD 0x20 V513
0x497: M[V515] = 0x0
0x498: V516 = 0x40
0x49a: V517 = M[0x40]
0x49b: V518 = 0xe0
0x49d: V519 = 0x2
0x49f: V520 = EXP 0x2 0xe0
0x4a0: V521 = 0xffffffff
0x4a6: V522 = AND V502 0xffffffff
0x4a7: V523 = MUL V522 0x100000000000000000000000000000000000000000000000000000000
0x4a9: M[V517] = V523
0x4aa: V524 = 0x4
0x4ad: V525 = ADD V517 0x4
0x4b1: M[V525] = V504
0x4b2: V526 = 0x1
0x4b4: V527 = 0xa0
0x4b6: V528 = 0x2
0x4b8: V529 = EXP 0x2 0xa0
0x4b9: V530 = SUB 0x10000000000000000000000000000000000000000 0x1
0x4ba: V531 = AND 0xffffffffffffffffffffffffffffffffffffffff V510
0x4bb: V532 = 0x24
0x4be: V533 = ADD V517 0x24
0x4bf: M[V533] = V531
0x4c0: V534 = 0x44
0x4c2: V535 = ADD 0x44 V517
0x4c3: V536 = 0x20
0x4c5: V537 = 0x40
0x4c7: V538 = M[0x40]
0x4ca: V539 = SUB V535 V538
0x4cd: V540 = 0x2c6
0x4d0: V541 = GAS
0x4d1: V542 = SUB V541 0x2c6
0x4d2: V543 = DELEGATECALL V542 V483 V538 V539 V538 0x20
0x4d3: V544 = ISZERO V543
0x4d4: V545 = ISZERO V544
0x4d5: V546 = 0x4dd
0x4d8: JUMPI 0x4dd V545
---
Entry stack: [V12, 0x4d, V89, V91, 0x1]
Stack pops: 2
Stack additions: [S1, S0, V483, V502, V535]
Exit stack: [V12, 0x4d, V89, V91, 0x1, V483, V502, V535]

================================

Block 0x4d9
[0x4d9:0x4dc]
---
Predecessors: [0x44a]
Successors: []
---
0x4d9 PUSH1 0x0
0x4db DUP1
0x4dc REVERT
---
0x4d9: V547 = 0x0
0x4dc: REVERT 0x0 0x0
---
Entry stack: [V12, 0x4d, V89, V91, 0x1, V483, V502, V535]
Stack pops: 0
Stack additions: []
Exit stack: [V12, 0x4d, V89, V91, 0x1, V483, V502, V535]

================================

Block 0x4dd
[0x4dd:0x4e8]
---
Predecessors: [0x44a]
Successors: [0x4e9]
---
0x4dd JUMPDEST
0x4de POP
0x4df POP
0x4e0 POP
0x4e1 PUSH1 0x40
0x4e3 MLOAD
0x4e4 DUP1
0x4e5 MLOAD
0x4e6 SWAP2
0x4e7 POP
0x4e8 POP
---
0x4dd: JUMPDEST 
0x4e1: V548 = 0x40
0x4e3: V549 = M[0x40]
0x4e5: V550 = M[V549]
---
Entry stack: [V12, 0x4d, V89, V91, 0x1, V483, V502, V535]
Stack pops: 4
Stack additions: [V550]
Exit stack: [V12, 0x4d, V89, V91, V550]

================================

Block 0x4e9
[0x4e9:0x4e9]
---
Predecessors: [0x12e, 0x255, 0x270, 0x397, 0x3b2, 0x440, 0x4dd]
Successors: [0x4ea]
---
0x4e9 JUMPDEST
---
0x4e9: JUMPDEST 
---
Entry stack: [V12, 0x4d, V89, V91, S0]
Stack pops: 0
Stack additions: []
Exit stack: [V12, 0x4d, V89, V91, S0]

================================

Block 0x4ea
[0x4ea:0x4ea]
---
Predecessors: [0x4e9]
Successors: [0x4eb]
---
0x4ea JUMPDEST
---
0x4ea: JUMPDEST 
---
Entry stack: [V12, 0x4d, V89, V91, S0]
Stack pops: 0
Stack additions: []
Exit stack: [V12, 0x4d, V89, V91, S0]

================================

Block 0x4eb
[0x4eb:0x4eb]
---
Predecessors: [0x4ea]
Successors: [0x4ec]
---
0x4eb JUMPDEST
---
0x4eb: JUMPDEST 
---
Entry stack: [V12, 0x4d, V89, V91, S0]
Stack pops: 0
Stack additions: []
Exit stack: [V12, 0x4d, V89, V91, S0]

================================

Block 0x4ec
[0x4ec:0x4ec]
---
Predecessors: [0x4eb]
Successors: [0x4ed]
---
0x4ec JUMPDEST
---
0x4ec: JUMPDEST 
---
Entry stack: [V12, 0x4d, V89, V91, S0]
Stack pops: 0
Stack additions: []
Exit stack: [V12, 0x4d, V89, V91, S0]

================================

Block 0x4ed
[0x4ed:0x4ed]
---
Predecessors: [0x4ec]
Successors: [0x4ee]
---
0x4ed JUMPDEST
---
0x4ed: JUMPDEST 
---
Entry stack: [V12, 0x4d, V89, V91, S0]
Stack pops: 0
Stack additions: []
Exit stack: [V12, 0x4d, V89, V91, S0]

================================

Block 0x4ee
[0x4ee:0x4ee]
---
Predecessors: [0x4ed]
Successors: [0x4ef]
---
0x4ee JUMPDEST
---
0x4ee: JUMPDEST 
---
Entry stack: [V12, 0x4d, V89, V91, S0]
Stack pops: 0
Stack additions: []
Exit stack: [V12, 0x4d, V89, V91, S0]

================================

Block 0x4ef
[0x4ef:0x4f3]
---
Predecessors: [0x4ee]
Successors: [0x4d]
---
0x4ef JUMPDEST
0x4f0 POP
0x4f1 POP
0x4f2 POP
0x4f3 JUMP
---
0x4ef: JUMPDEST 
0x4f3: JUMP 0x4d
---
Entry stack: [V12, 0x4d, V89, V91, S0]
Stack pops: 4
Stack additions: []
Exit stack: [V12]

================================

Block 0x4f4
[0x4f4:0x53f]
---
Predecessors: []
Successors: []
---
0x4f4 STOP
0x4f5 PUSH3 0x75792e
0x4f9 PUSH23 0x616c75652875696e743235362928616464726573732900
0x511 STOP
0x512 STOP
0x513 STOP
0x514 STOP
0x515 LOG1
0x516 PUSH6 0x627a7a723058
0x51d SHA3
0x51e SLOAD
0x51f SWAP3
0x520 SWAP10
0x521 MISSING 0xed
0x522 MISSING 0xc7
0x523 MISSING 0xa5
0x524 MISSING 0xbb
0x525 EXP
0x526 MISSING 0xc6
0x527 MISSING 0xe7
0x528 MISSING 0xc2
0x529 EQ
0x52a COINBASE
0x52b SWAP15
0x52c LOG3
0x52d PUSH4 0xbb453a97
0x532 MISSING 0xa6
0x533 MISSING 0x5e
0x534 MISSING 0xda
0x535 STATICCALL
0x536 MISSING 0xc
0x537 SLT
0x538 DUP12
0x539 MISSING 0xdf
0x53a MISSING 0xef
0x53b MISSING 0xb8
0x53c POP
0x53d MISSING 0xba
0x53e STOP
0x53f MISSING 0x29
---
0x4f4: STOP 
0x4f5: V551 = 0x75792e
0x4f9: V552 = 0x616c75652875696e743235362928616464726573732900
0x511: STOP 
0x512: STOP 
0x513: STOP 
0x514: STOP 
0x515: LOG S0 S1 S2
0x516: V553 = 0x627a7a723058
0x51d: V554 = SHA3 0x627a7a723058 S3
0x51e: V555 = S[V554]
0x521: MISSING 0xed
0x522: MISSING 0xc7
0x523: MISSING 0xa5
0x524: MISSING 0xbb
0x525: V556 = EXP S0 S1
0x526: MISSING 0xc6
0x527: MISSING 0xe7
0x528: MISSING 0xc2
0x529: V557 = EQ S0 S1
0x52a: V558 = COINBASE
0x52c: LOG S15 V557 S2 S3 S4
0x52d: V559 = 0xbb453a97
0x532: MISSING 0xa6
0x533: MISSING 0x5e
0x534: MISSING 0xda
0x535: V560 = STATICCALL S0 S1 S2 S3 S4 S5
0x536: MISSING 0xc
0x537: V561 = SLT S0 S1
0x539: MISSING 0xdf
0x53a: MISSING 0xef
0x53b: MISSING 0xb8
0x53d: MISSING 0xba
0x53e: STOP 
0x53f: MISSING 0x29
---
Entry stack: []
Stack pops: 0
Stack additions: [0x616c75652875696e743235362928616464726573732900, 0x75792e, S13, S4, S5, V555, S7, S8, S9, S10, S11, S12, S6, V556, 0xbb453a97, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, V558, V560, S12, V561, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12]
Exit stack: []

================================

Function 0:
Public function signature: 0x12e905b0
Entry block: 0x4f
Exit block: 0x62
Body: 0x4f, 0x56, 0x5a, 0x62, 0xf7

Function 1:
Public function signature: 0x1ed4f3e5
Entry block: 0x7e
Exit block: 0x62
Body: 0x62, 0x7e, 0x85, 0x89, 0x106

Function 2:
Public function signature: 0x45d364c0
Entry block: 0xad
Exit block: 0x62
Body: 0x62, 0xad, 0xb4, 0xb8, 0x115

Function 3:
Public function signature: 0xd6febde8
Entry block: 0xdc
Exit block: 0x4d
Body: 0x4d, 0xdc, 0xe3, 0xe7, 0x124, 0x12e, 0x1ba, 0x1c4, 0x251, 0x255, 0x266, 0x270, 0x2fc, 0x306, 0x393, 0x3a8, 0x3b2, 0x440, 0x44a, 0x4d9, 0x4dd, 0x4e9, 0x4ea, 0x4eb, 0x4ec, 0x4ed, 0x4ee, 0x4ef

Function 4:
Public fallback function
Entry block: 0x46
Exit block: 0x4d
Body: 0x46, 0x4a, 0x4b, 0x4d

