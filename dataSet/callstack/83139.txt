Block 0x0
[0x0:0xa]
---
Predecessors: []
Successors: [0xb, 0x61]
---
0x0 PUSH1 0x60
0x2 PUSH1 0x40
0x4 MSTORE
0x5 CALLDATASIZE
0x6 ISZERO
0x7 PUSH2 0x61
0xa JUMPI
---
0x0: V0 = 0x60
0x2: V1 = 0x40
0x4: M[0x40] = 0x60
0x5: V2 = CALLDATASIZE
0x6: V3 = ISZERO V2
0x7: V4 = 0x61
0xa: JUMPI 0x61 V3
---
Entry stack: []
Stack pops: 0
Stack additions: []
Exit stack: []

================================

Block 0xb
[0xb:0x1e]
---
Predecessors: [0x0]
Successors: [0x1f, 0x63]
---
0xb PUSH1 0xe0
0xd PUSH1 0x2
0xf EXP
0x10 PUSH1 0x0
0x12 CALLDATALOAD
0x13 DIV
0x14 PUSH4 0x8f00e31
0x19 DUP2
0x1a EQ
0x1b PUSH2 0x63
0x1e JUMPI
---
0xb: V5 = 0xe0
0xd: V6 = 0x2
0xf: V7 = EXP 0x2 0xe0
0x10: V8 = 0x0
0x12: V9 = CALLDATALOAD 0x0
0x13: V10 = DIV V9 0x100000000000000000000000000000000000000000000000000000000
0x14: V11 = 0x8f00e31
0x1a: V12 = EQ V10 0x8f00e31
0x1b: V13 = 0x63
0x1e: JUMPI 0x63 V12
---
Entry stack: []
Stack pops: 0
Stack additions: [V10]
Exit stack: [V10]

================================

Block 0x1f
[0x1f:0x29]
---
Predecessors: [0xb]
Successors: [0x2a, 0x70]
---
0x1f DUP1
0x20 PUSH4 0xdd46804
0x25 EQ
0x26 PUSH2 0x70
0x29 JUMPI
---
0x20: V14 = 0xdd46804
0x25: V15 = EQ 0xdd46804 V10
0x26: V16 = 0x70
0x29: JUMPI 0x70 V15
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x2a
[0x2a:0x34]
---
Predecessors: [0x1f]
Successors: [0x35, 0xd5]
---
0x2a DUP1
0x2b PUSH4 0x693e3776
0x30 EQ
0x31 PUSH2 0xd5
0x34 JUMPI
---
0x2b: V17 = 0x693e3776
0x30: V18 = EQ 0x693e3776 V10
0x31: V19 = 0xd5
0x34: JUMPI 0xd5 V18
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x35
[0x35:0x3f]
---
Predecessors: [0x2a]
Successors: [0x40, 0x130]
---
0x35 DUP1
0x36 PUSH4 0x730c29ef
0x3b EQ
0x3c PUSH2 0x130
0x3f JUMPI
---
0x36: V20 = 0x730c29ef
0x3b: V21 = EQ 0x730c29ef V10
0x3c: V22 = 0x130
0x3f: JUMPI 0x130 V21
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x40
[0x40:0x4a]
---
Predecessors: [0x35]
Successors: [0x4b, 0x17c]
---
0x40 DUP1
0x41 PUSH4 0x8fe58eb9
0x46 EQ
0x47 PUSH2 0x17c
0x4a JUMPI
---
0x41: V23 = 0x8fe58eb9
0x46: V24 = EQ 0x8fe58eb9 V10
0x47: V25 = 0x17c
0x4a: JUMPI 0x17c V24
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x4b
[0x4b:0x55]
---
Predecessors: [0x40]
Successors: [0x56, 0x2bd]
---
0x4b DUP1
0x4c PUSH4 0xbb6f0ac8
0x51 EQ
0x52 PUSH2 0x2bd
0x55 JUMPI
---
0x4c: V26 = 0xbb6f0ac8
0x51: V27 = EQ 0xbb6f0ac8 V10
0x52: V28 = 0x2bd
0x55: JUMPI 0x2bd V27
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x56
[0x56:0x60]
---
Predecessors: [0x4b]
Successors: [0x61, 0x2f2]
---
0x56 DUP1
0x57 PUSH4 0xeeaef8e0
0x5c EQ
0x5d PUSH2 0x2f2
0x60 JUMPI
---
0x57: V29 = 0xeeaef8e0
0x5c: V30 = EQ 0xeeaef8e0 V10
0x5d: V31 = 0x2f2
0x60: JUMPI 0x2f2 V30
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x61
[0x61:0x62]
---
Predecessors: [0x0, 0x56, 0x3c1, 0x4bc, 0x5ab]
Successors: []
---
0x61 JUMPDEST
0x62 STOP
---
0x61: JUMPDEST 
0x62: STOP 
---
Entry stack: [V10]
Stack pops: 0
Stack additions: []
Exit stack: [V10]

================================

Block 0x63
[0x63:0x6f]
---
Predecessors: [0xb]
Successors: [0x2fb]
---
0x63 JUMPDEST
0x64 PUSH2 0x2fb
0x67 PUSH1 0x4
0x69 SLOAD
0x6a PUSH2 0xffff
0x6d AND
0x6e DUP2
0x6f JUMP
---
0x63: JUMPDEST 
0x64: V32 = 0x2fb
0x67: V33 = 0x4
0x69: V34 = S[0x4]
0x6a: V35 = 0xffff
0x6d: V36 = AND 0xffff V34
0x6f: JUMP 0x2fb
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x2fb, V36]
Exit stack: [V10, 0x2fb, V36]

================================

Block 0x70
[0x70:0x89]
---
Predecessors: [0x1f]
Successors: [0x8a, 0x98]
---
0x70 JUMPDEST
0x71 PUSH2 0x61
0x74 PUSH1 0x0
0x76 PUSH1 0x0
0x78 PUSH1 0x0
0x7a PUSH8 0xde0b6b3a7640000
0x83 CALLVALUE
0x84 LT
0x85 DUP1
0x86 PUSH2 0x98
0x89 JUMPI
---
0x70: JUMPDEST 
0x71: V37 = 0x61
0x74: V38 = 0x0
0x76: V39 = 0x0
0x78: V40 = 0x0
0x7a: V41 = 0xde0b6b3a7640000
0x83: V42 = CALLVALUE
0x84: V43 = LT V42 0xde0b6b3a7640000
0x86: V44 = 0x98
0x89: JUMPI 0x98 V43
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x61, 0x0, 0x0, 0x0, V43]
Exit stack: [V10, 0x61, 0x0, 0x0, 0x0, V43]

================================

Block 0x8a
[0x8a:0x97]
---
Predecessors: [0x70]
Successors: [0x98]
---
0x8a POP
0x8b PUSH1 0x2
0x8d SLOAD
0x8e PUSH1 0xa0
0x90 PUSH1 0x2
0x92 EXP
0x93 SWAP1
0x94 DIV
0x95 PUSH1 0xff
0x97 AND
---
0x8b: V45 = 0x2
0x8d: V46 = S[0x2]
0x8e: V47 = 0xa0
0x90: V48 = 0x2
0x92: V49 = EXP 0x2 0xa0
0x94: V50 = DIV V46 0x10000000000000000000000000000000000000000
0x95: V51 = 0xff
0x97: V52 = AND 0xff V50
---
Entry stack: [V10, 0x61, 0x0, 0x0, 0x0, V43]
Stack pops: 1
Stack additions: [V52]
Exit stack: [V10, 0x61, 0x0, 0x0, 0x0, V52]

================================

Block 0x98
[0x98:0x9d]
---
Predecessors: [0x70, 0x8a]
Successors: [0x9e, 0xaa]
---
0x98 JUMPDEST
0x99 DUP1
0x9a PUSH2 0xaa
0x9d JUMPI
---
0x98: JUMPDEST 
0x9a: V53 = 0xaa
0x9d: JUMPI 0xaa S0
---
Entry stack: [V10, 0x61, 0x0, 0x0, 0x0, S0]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10, 0x61, 0x0, 0x0, 0x0, S0]

================================

Block 0x9e
[0x9e:0xa9]
---
Predecessors: [0x98]
Successors: [0xaa]
---
0x9e POP
0x9f PUSH1 0x5
0xa1 SLOAD
0xa2 PUSH1 0x3
0xa4 SLOAD
0xa5 CALLVALUE
0xa6 SWAP1
0xa7 SWAP2
0xa8 ADD
0xa9 GT
---
0x9f: V54 = 0x5
0xa1: V55 = S[0x5]
0xa2: V56 = 0x3
0xa4: V57 = S[0x3]
0xa5: V58 = CALLVALUE
0xa8: V59 = ADD V55 V58
0xa9: V60 = GT V59 V57
---
Entry stack: [V10, 0x61, 0x0, 0x0, 0x0, S0]
Stack pops: 1
Stack additions: [V60]
Exit stack: [V10, 0x61, 0x0, 0x0, 0x0, V60]

================================

Block 0xaa
[0xaa:0xaf]
---
Predecessors: [0x98, 0x9e]
Successors: [0xb0, 0x3c6]
---
0xaa JUMPDEST
0xab ISZERO
0xac PUSH2 0x3c6
0xaf JUMPI
---
0xaa: JUMPDEST 
0xab: V61 = ISZERO S0
0xac: V62 = 0x3c6
0xaf: JUMPI 0x3c6 V61
---
Entry stack: [V10, 0x61, 0x0, 0x0, 0x0, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V10, 0x61, 0x0, 0x0, 0x0]

================================

Block 0xb0
[0xb0:0xd4]
---
Predecessors: [0xaa]
Successors: [0x3c1]
---
0xb0 PUSH1 0x40
0xb2 MLOAD
0xb3 PUSH1 0x1
0xb5 PUSH1 0xa0
0xb7 PUSH1 0x2
0xb9 EXP
0xba SUB
0xbb CALLER
0xbc AND
0xbd SWAP1
0xbe PUSH1 0x0
0xc0 SWAP1
0xc1 CALLVALUE
0xc2 SWAP1
0xc3 DUP3
0xc4 DUP2
0xc5 DUP2
0xc6 DUP2
0xc7 DUP6
0xc8 DUP9
0xc9 DUP4
0xca CALL
0xcb SWAP4
0xcc POP
0xcd POP
0xce POP
0xcf POP
0xd0 POP
0xd1 PUSH2 0x3c1
0xd4 JUMP
---
0xb0: V63 = 0x40
0xb2: V64 = M[0x40]
0xb3: V65 = 0x1
0xb5: V66 = 0xa0
0xb7: V67 = 0x2
0xb9: V68 = EXP 0x2 0xa0
0xba: V69 = SUB 0x10000000000000000000000000000000000000000 0x1
0xbb: V70 = CALLER
0xbc: V71 = AND V70 0xffffffffffffffffffffffffffffffffffffffff
0xbe: V72 = 0x0
0xc1: V73 = CALLVALUE
0xca: V74 = CALL 0x0 V71 V73 V64 0x0 V64 0x0
0xd1: V75 = 0x3c1
0xd4: JUMP 0x3c1
---
Entry stack: [V10, 0x61, 0x0, 0x0, 0x0]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0x61, 0x0, 0x0, 0x0]

================================

Block 0xd5
[0xd5:0x12f]
---
Predecessors: [0x2a]
Successors: []
---
0xd5 JUMPDEST
0xd6 PUSH2 0xffff
0xd9 PUSH1 0x4
0xdb CALLDATALOAD
0xdc DUP2
0xdd AND
0xde PUSH1 0x0
0xe0 SWAP1
0xe1 DUP2
0xe2 MSTORE
0xe3 PUSH1 0x6
0xe5 PUSH1 0x20
0xe7 SWAP1
0xe8 DUP2
0xe9 MSTORE
0xea PUSH1 0x40
0xec SWAP2
0xed DUP3
0xee SWAP1
0xef SHA3
0xf0 PUSH1 0x1
0xf2 DUP2
0xf3 ADD
0xf4 SLOAD
0xf5 PUSH1 0x2
0xf7 DUP3
0xf8 ADD
0xf9 SLOAD
0xfa DUP3
0xfb SLOAD
0xfc PUSH1 0x3
0xfe SWAP4
0xff SWAP1
0x100 SWAP4
0x101 ADD
0x102 SLOAD
0x103 DUP6
0x104 MLOAD
0x105 SWAP3
0x106 DUP4
0x107 MSTORE
0x108 SWAP6
0x109 AND
0x10a SWAP3
0x10b DUP2
0x10c ADD
0x10d SWAP3
0x10e SWAP1
0x10f SWAP3
0x110 MSTORE
0x111 PUSH1 0x1
0x113 PUSH1 0xa0
0x115 PUSH1 0x2
0x117 EXP
0x118 SUB
0x119 AND
0x11a DUP2
0x11b DUP4
0x11c ADD
0x11d MSTORE
0x11e PUSH1 0x60
0x120 DUP2
0x121 ADD
0x122 SWAP3
0x123 SWAP1
0x124 SWAP3
0x125 MSTORE
0x126 MLOAD
0x127 SWAP1
0x128 DUP2
0x129 SWAP1
0x12a SUB
0x12b PUSH1 0x80
0x12d ADD
0x12e SWAP1
0x12f RETURN
---
0xd5: JUMPDEST 
0xd6: V76 = 0xffff
0xd9: V77 = 0x4
0xdb: V78 = CALLDATALOAD 0x4
0xdd: V79 = AND 0xffff V78
0xde: V80 = 0x0
0xe2: M[0x0] = V79
0xe3: V81 = 0x6
0xe5: V82 = 0x20
0xe9: M[0x20] = 0x6
0xea: V83 = 0x40
0xef: V84 = SHA3 0x0 0x40
0xf0: V85 = 0x1
0xf3: V86 = ADD V84 0x1
0xf4: V87 = S[V86]
0xf5: V88 = 0x2
0xf8: V89 = ADD V84 0x2
0xf9: V90 = S[V89]
0xfb: V91 = S[V84]
0xfc: V92 = 0x3
0x101: V93 = ADD 0x3 V84
0x102: V94 = S[V93]
0x104: V95 = M[0x40]
0x107: M[V95] = V87
0x109: V96 = AND 0xffff V90
0x10c: V97 = ADD V95 0x20
0x110: M[V97] = V96
0x111: V98 = 0x1
0x113: V99 = 0xa0
0x115: V100 = 0x2
0x117: V101 = EXP 0x2 0xa0
0x118: V102 = SUB 0x10000000000000000000000000000000000000000 0x1
0x119: V103 = AND 0xffffffffffffffffffffffffffffffffffffffff V91
0x11c: V104 = ADD 0x40 V95
0x11d: M[V104] = V103
0x11e: V105 = 0x60
0x121: V106 = ADD V95 0x60
0x125: M[V106] = V94
0x126: V107 = M[0x40]
0x12a: V108 = SUB V95 V107
0x12b: V109 = 0x80
0x12d: V110 = ADD 0x80 V108
0x12f: RETURN V107 V110
---
Entry stack: [V10]
Stack pops: 0
Stack additions: []
Exit stack: [V10]

================================

Block 0x130
[0x130:0x136]
---
Predecessors: [0x35]
Successors: [0x137]
---
0x130 JUMPDEST
0x131 PUSH2 0x2fb
0x134 PUSH1 0x4
0x136 CALLDATALOAD
---
0x130: JUMPDEST 
0x131: V111 = 0x2fb
0x134: V112 = 0x4
0x136: V113 = CALLDATALOAD 0x4
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x2fb, V113]
Exit stack: [V10, 0x2fb, V113]

================================

Block 0x137
[0x137:0x13a]
---
Predecessors: [0x130, 0x3c6]
Successors: [0x13b]
---
0x137 JUMPDEST
0x138 PUSH1 0x0
0x13a DUP1
---
0x137: JUMPDEST 
0x138: V114 = 0x0
---
Entry stack: [V10, 0x61, 0x0, 0x0, S2, {0x2fb, 0x3cf}, S0]
Stack pops: 0
Stack additions: [0x0, 0x0]
Exit stack: [V10, 0x61, 0x0, 0x0, S2, {0x2fb, 0x3cf}, S0, 0x0, 0x0]

================================

Block 0x13b
[0x13b:0x14d]
---
Predecessors: [0x137, 0x4b4]
Successors: [0x14e, 0x4a8]
---
0x13b JUMPDEST
0x13c PUSH1 0x4
0x13e SLOAD
0x13f PUSH2 0xffff
0x142 SWAP1
0x143 DUP2
0x144 AND
0x145 SWAP1
0x146 DUP3
0x147 AND
0x148 LT
0x149 ISZERO
0x14a PUSH2 0x4a8
0x14d JUMPI
---
0x13b: JUMPDEST 
0x13c: V115 = 0x4
0x13e: V116 = S[0x4]
0x13f: V117 = 0xffff
0x144: V118 = AND 0xffff V116
0x147: V119 = AND S0 0xffff
0x148: V120 = LT V119 V118
0x149: V121 = ISZERO V120
0x14a: V122 = 0x4a8
0x14d: JUMPI 0x4a8 V121
---
Entry stack: [V10, 0x61, 0x0, 0x0, S4, {0x2fb, 0x3cf}, S2, 0x0, S0]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10, 0x61, 0x0, 0x0, S4, {0x2fb, 0x3cf}, S2, 0x0, S0]

================================

Block 0x14e
[0x14e:0x174]
---
Predecessors: [0x13b]
Successors: [0x175, 0x4b4]
---
0x14e PUSH2 0xffff
0x151 DUP2
0x152 AND
0x153 PUSH1 0x0
0x155 SWAP1
0x156 DUP2
0x157 MSTORE
0x158 PUSH1 0x6
0x15a PUSH1 0x20
0x15c MSTORE
0x15d PUSH1 0x40
0x15f SWAP1
0x160 SHA3
0x161 SLOAD
0x162 PUSH1 0x1
0x164 PUSH1 0xa0
0x166 PUSH1 0x2
0x168 EXP
0x169 SUB
0x16a DUP5
0x16b DUP2
0x16c AND
0x16d SWAP2
0x16e AND
0x16f EQ
0x170 ISZERO
0x171 PUSH2 0x4b4
0x174 JUMPI
---
0x14e: V123 = 0xffff
0x152: V124 = AND S0 0xffff
0x153: V125 = 0x0
0x157: M[0x0] = V124
0x158: V126 = 0x6
0x15a: V127 = 0x20
0x15c: M[0x20] = 0x6
0x15d: V128 = 0x40
0x160: V129 = SHA3 0x0 0x40
0x161: V130 = S[V129]
0x162: V131 = 0x1
0x164: V132 = 0xa0
0x166: V133 = 0x2
0x168: V134 = EXP 0x2 0xa0
0x169: V135 = SUB 0x10000000000000000000000000000000000000000 0x1
0x16c: V136 = AND 0xffffffffffffffffffffffffffffffffffffffff S2
0x16e: V137 = AND V130 0xffffffffffffffffffffffffffffffffffffffff
0x16f: V138 = EQ V137 V136
0x170: V139 = ISZERO V138
0x171: V140 = 0x4b4
0x174: JUMPI 0x4b4 V139
---
Entry stack: [V10, 0x61, 0x0, 0x0, S4, {0x2fb, 0x3cf}, S2, 0x0, S0]
Stack pops: 3
Stack additions: [S2, S1, S0]
Exit stack: [V10, 0x61, 0x0, 0x0, S4, {0x2fb, 0x3cf}, S2, 0x0, S0]

================================

Block 0x175
[0x175:0x17b]
---
Predecessors: [0x14e]
Successors: [0x4ae]
---
0x175 DUP1
0x176 SWAP2
0x177 POP
0x178 PUSH2 0x4ae
0x17b JUMP
---
0x178: V141 = 0x4ae
0x17b: JUMP 0x4ae
---
Entry stack: [V10, 0x61, 0x0, 0x0, S4, {0x2fb, 0x3cf}, S2, 0x0, S0]
Stack pops: 2
Stack additions: [S0, S0]
Exit stack: [V10, 0x61, 0x0, 0x0, S4, {0x2fb, 0x3cf}, S2, S0, S0]

================================

Block 0x17c
[0x17c:0x1bd]
---
Predecessors: [0x40]
Successors: [0x1be]
---
0x17c JUMPDEST
0x17d PUSH2 0x61
0x180 PUSH1 0x2
0x182 SLOAD
0x183 PUSH2 0x2710
0x186 ADDRESS
0x187 PUSH1 0x1
0x189 PUSH1 0xa0
0x18b PUSH1 0x2
0x18d EXP
0x18e SUB
0x18f AND
0x190 DUP1
0x191 BALANCE
0x192 DUP3
0x193 SWAP1
0x194 DIV
0x195 PUSH1 0xa8
0x197 PUSH1 0x2
0x199 EXP
0x19a DUP5
0x19b DIV
0x19c PUSH2 0xffff
0x19f SWAP1
0x1a0 DUP2
0x1a1 AND
0x1a2 SWAP2
0x1a3 SWAP1
0x1a4 SWAP2
0x1a5 MUL
0x1a6 SWAP4
0x1a7 SWAP2
0x1a8 BALANCE
0x1a9 DUP5
0x1aa SWAP1
0x1ab SUB
0x1ac SWAP3
0x1ad SWAP1
0x1ae SWAP3
0x1af DIV
0x1b0 PUSH1 0xb8
0x1b2 PUSH1 0x2
0x1b4 EXP
0x1b5 SWAP1
0x1b6 SWAP2
0x1b7 DIV
0x1b8 SWAP1
0x1b9 SWAP2
0x1ba AND
0x1bb MUL
0x1bc PUSH1 0x0
---
0x17c: JUMPDEST 
0x17d: V142 = 0x61
0x180: V143 = 0x2
0x182: V144 = S[0x2]
0x183: V145 = 0x2710
0x186: V146 = ADDRESS
0x187: V147 = 0x1
0x189: V148 = 0xa0
0x18b: V149 = 0x2
0x18d: V150 = EXP 0x2 0xa0
0x18e: V151 = SUB 0x10000000000000000000000000000000000000000 0x1
0x18f: V152 = AND 0xffffffffffffffffffffffffffffffffffffffff V146
0x191: V153 = BALANCE V152
0x194: V154 = DIV V153 0x2710
0x195: V155 = 0xa8
0x197: V156 = 0x2
0x199: V157 = EXP 0x2 0xa8
0x19b: V158 = DIV V144 0x1000000000000000000000000000000000000000000
0x19c: V159 = 0xffff
0x1a1: V160 = AND 0xffff V158
0x1a5: V161 = MUL V160 V154
0x1a8: V162 = BALANCE V152
0x1ab: V163 = SUB V162 V161
0x1af: V164 = DIV V163 0x2710
0x1b0: V165 = 0xb8
0x1b2: V166 = 0x2
0x1b4: V167 = EXP 0x2 0xb8
0x1b7: V168 = DIV V144 0x10000000000000000000000000000000000000000000000
0x1ba: V169 = AND 0xffff V168
0x1bb: V170 = MUL V169 V164
0x1bc: V171 = 0x0
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x61, V161, V170, 0x0]
Exit stack: [V10, 0x61, V161, V170, 0x0]

================================

Block 0x1be
[0x1be:0x1d0]
---
Predecessors: [0x17c, 0x2b5]
Successors: [0x1d1, 0x4bc]
---
0x1be JUMPDEST
0x1bf PUSH1 0x4
0x1c1 SLOAD
0x1c2 PUSH2 0xffff
0x1c5 SWAP1
0x1c6 DUP2
0x1c7 AND
0x1c8 SWAP1
0x1c9 DUP3
0x1ca AND
0x1cb LT
0x1cc ISZERO
0x1cd PUSH2 0x4bc
0x1d0 JUMPI
---
0x1be: JUMPDEST 
0x1bf: V172 = 0x4
0x1c1: V173 = S[0x4]
0x1c2: V174 = 0xffff
0x1c7: V175 = AND 0xffff V173
0x1ca: V176 = AND S0 0xffff
0x1cb: V177 = LT V176 V175
0x1cc: V178 = ISZERO V177
0x1cd: V179 = 0x4bc
0x1d0: JUMPI 0x4bc V178
---
Entry stack: [V10, 0x61, V161, V170, S0]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10, 0x61, V161, V170, S0]

================================

Block 0x1d1
[0x1d1:0x20f]
---
Predecessors: [0x1be]
Successors: [0x210, 0x2b5]
---
0x1d1 PUSH2 0xffff
0x1d4 DUP2
0x1d5 DUP2
0x1d6 AND
0x1d7 PUSH1 0x0
0x1d9 SWAP1
0x1da DUP2
0x1db MSTORE
0x1dc PUSH1 0x6
0x1de PUSH1 0x20
0x1e0 MSTORE
0x1e1 PUSH1 0x40
0x1e3 SWAP1
0x1e4 SHA3
0x1e5 PUSH1 0x2
0x1e7 DUP2
0x1e8 ADD
0x1e9 SLOAD
0x1ea PUSH1 0x3
0x1ec SWAP2
0x1ed SWAP1
0x1ee SWAP2
0x1ef ADD
0x1f0 DUP1
0x1f1 SLOAD
0x1f2 SWAP2
0x1f3 SWAP1
0x1f4 SWAP3
0x1f5 AND
0x1f6 PUSH2 0x2710
0x1f9 DUP6
0x1fa DIV
0x1fb MUL
0x1fc ADD
0x1fd SWAP1
0x1fe DUP2
0x1ff SWAP1
0x200 SSTORE
0x201 PUSH8 0x16345785d8a0000
0x20a SWAP1
0x20b LT
0x20c PUSH2 0x2b5
0x20f JUMPI
---
0x1d1: V180 = 0xffff
0x1d6: V181 = AND 0xffff S0
0x1d7: V182 = 0x0
0x1db: M[0x0] = V181
0x1dc: V183 = 0x6
0x1de: V184 = 0x20
0x1e0: M[0x20] = 0x6
0x1e1: V185 = 0x40
0x1e4: V186 = SHA3 0x0 0x40
0x1e5: V187 = 0x2
0x1e8: V188 = ADD V186 0x2
0x1e9: V189 = S[V188]
0x1ea: V190 = 0x3
0x1ef: V191 = ADD 0x3 V186
0x1f1: V192 = S[V191]
0x1f5: V193 = AND 0xffff V189
0x1f6: V194 = 0x2710
0x1fa: V195 = DIV V170 0x2710
0x1fb: V196 = MUL V195 V193
0x1fc: V197 = ADD V196 V192
0x200: S[V191] = V197
0x201: V198 = 0x16345785d8a0000
0x20b: V199 = LT V197 0x16345785d8a0000
0x20c: V200 = 0x2b5
0x20f: JUMPI 0x2b5 V199
---
Entry stack: [V10, 0x61, V161, V170, S0]
Stack pops: 2
Stack additions: [S1, S0]
Exit stack: [V10, 0x61, V161, V170, S0]

================================

Block 0x210
[0x210:0x2b4]
---
Predecessors: [0x1d1]
Successors: [0x2b5]
---
0x210 PUSH1 0x6
0x212 PUSH1 0x0
0x214 POP
0x215 PUSH1 0x0
0x217 DUP3
0x218 PUSH2 0xffff
0x21b AND
0x21c DUP2
0x21d MSTORE
0x21e PUSH1 0x20
0x220 ADD
0x221 SWAP1
0x222 DUP2
0x223 MSTORE
0x224 PUSH1 0x20
0x226 ADD
0x227 PUSH1 0x0
0x229 SHA3
0x22a PUSH1 0x0
0x22c POP
0x22d PUSH1 0x0
0x22f ADD
0x230 PUSH1 0x0
0x232 SWAP1
0x233 SLOAD
0x234 SWAP1
0x235 PUSH2 0x100
0x238 EXP
0x239 SWAP1
0x23a DIV
0x23b PUSH1 0x1
0x23d PUSH1 0xa0
0x23f PUSH1 0x2
0x241 EXP
0x242 SUB
0x243 AND
0x244 PUSH1 0x1
0x246 PUSH1 0xa0
0x248 PUSH1 0x2
0x24a EXP
0x24b SUB
0x24c AND
0x24d PUSH1 0x0
0x24f PUSH1 0x6
0x251 PUSH1 0x0
0x253 POP
0x254 PUSH1 0x0
0x256 DUP5
0x257 PUSH2 0xffff
0x25a AND
0x25b DUP2
0x25c MSTORE
0x25d PUSH1 0x20
0x25f ADD
0x260 SWAP1
0x261 DUP2
0x262 MSTORE
0x263 PUSH1 0x20
0x265 ADD
0x266 PUSH1 0x0
0x268 SHA3
0x269 PUSH1 0x0
0x26b POP
0x26c PUSH1 0x3
0x26e ADD
0x26f PUSH1 0x0
0x271 POP
0x272 SLOAD
0x273 PUSH1 0x40
0x275 MLOAD
0x276 DUP1
0x277 SWAP1
0x278 POP
0x279 PUSH1 0x0
0x27b PUSH1 0x40
0x27d MLOAD
0x27e DUP1
0x27f DUP4
0x280 SUB
0x281 DUP2
0x282 DUP6
0x283 DUP9
0x284 DUP9
0x285 CALL
0x286 SWAP4
0x287 POP
0x288 POP
0x289 POP
0x28a POP
0x28b POP
0x28c PUSH1 0x0
0x28e PUSH1 0x6
0x290 PUSH1 0x0
0x292 POP
0x293 PUSH1 0x0
0x295 DUP4
0x296 PUSH2 0xffff
0x299 AND
0x29a DUP2
0x29b MSTORE
0x29c PUSH1 0x20
0x29e ADD
0x29f SWAP1
0x2a0 DUP2
0x2a1 MSTORE
0x2a2 PUSH1 0x20
0x2a4 ADD
0x2a5 PUSH1 0x0
0x2a7 SHA3
0x2a8 PUSH1 0x0
0x2aa POP
0x2ab PUSH1 0x3
0x2ad ADD
0x2ae PUSH1 0x0
0x2b0 POP
0x2b1 DUP2
0x2b2 SWAP1
0x2b3 SSTORE
0x2b4 POP
---
0x210: V201 = 0x6
0x212: V202 = 0x0
0x215: V203 = 0x0
0x218: V204 = 0xffff
0x21b: V205 = AND 0xffff S0
0x21d: M[0x0] = V205
0x21e: V206 = 0x20
0x220: V207 = ADD 0x20 0x0
0x223: M[0x20] = 0x6
0x224: V208 = 0x20
0x226: V209 = ADD 0x20 0x20
0x227: V210 = 0x0
0x229: V211 = SHA3 0x0 0x40
0x22a: V212 = 0x0
0x22d: V213 = 0x0
0x22f: V214 = ADD 0x0 V211
0x230: V215 = 0x0
0x233: V216 = S[V214]
0x235: V217 = 0x100
0x238: V218 = EXP 0x100 0x0
0x23a: V219 = DIV V216 0x1
0x23b: V220 = 0x1
0x23d: V221 = 0xa0
0x23f: V222 = 0x2
0x241: V223 = EXP 0x2 0xa0
0x242: V224 = SUB 0x10000000000000000000000000000000000000000 0x1
0x243: V225 = AND 0xffffffffffffffffffffffffffffffffffffffff V219
0x244: V226 = 0x1
0x246: V227 = 0xa0
0x248: V228 = 0x2
0x24a: V229 = EXP 0x2 0xa0
0x24b: V230 = SUB 0x10000000000000000000000000000000000000000 0x1
0x24c: V231 = AND 0xffffffffffffffffffffffffffffffffffffffff V225
0x24d: V232 = 0x0
0x24f: V233 = 0x6
0x251: V234 = 0x0
0x254: V235 = 0x0
0x257: V236 = 0xffff
0x25a: V237 = AND 0xffff S0
0x25c: M[0x0] = V237
0x25d: V238 = 0x20
0x25f: V239 = ADD 0x20 0x0
0x262: M[0x20] = 0x6
0x263: V240 = 0x20
0x265: V241 = ADD 0x20 0x20
0x266: V242 = 0x0
0x268: V243 = SHA3 0x0 0x40
0x269: V244 = 0x0
0x26c: V245 = 0x3
0x26e: V246 = ADD 0x3 V243
0x26f: V247 = 0x0
0x272: V248 = S[V246]
0x273: V249 = 0x40
0x275: V250 = M[0x40]
0x279: V251 = 0x0
0x27b: V252 = 0x40
0x27d: V253 = M[0x40]
0x280: V254 = SUB V250 V253
0x285: V255 = CALL 0x0 V231 V248 V253 V254 V253 0x0
0x28c: V256 = 0x0
0x28e: V257 = 0x6
0x290: V258 = 0x0
0x293: V259 = 0x0
0x296: V260 = 0xffff
0x299: V261 = AND 0xffff S0
0x29b: M[0x0] = V261
0x29c: V262 = 0x20
0x29e: V263 = ADD 0x20 0x0
0x2a1: M[0x20] = 0x6
0x2a2: V264 = 0x20
0x2a4: V265 = ADD 0x20 0x20
0x2a5: V266 = 0x0
0x2a7: V267 = SHA3 0x0 0x40
0x2a8: V268 = 0x0
0x2ab: V269 = 0x3
0x2ad: V270 = ADD 0x3 V267
0x2ae: V271 = 0x0
0x2b3: S[V270] = 0x0
---
Entry stack: [V10, 0x61, V161, V170, S0]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10, 0x61, V161, V170, S0]

================================

Block 0x2b5
[0x2b5:0x2bc]
---
Predecessors: [0x1d1, 0x210]
Successors: [0x1be]
---
0x2b5 JUMPDEST
0x2b6 PUSH1 0x1
0x2b8 ADD
0x2b9 PUSH2 0x1be
0x2bc JUMP
---
0x2b5: JUMPDEST 
0x2b6: V272 = 0x1
0x2b8: V273 = ADD 0x1 S0
0x2b9: V274 = 0x1be
0x2bc: JUMP 0x1be
---
Entry stack: [V10, 0x61, V161, V170, S0]
Stack pops: 1
Stack additions: [V273]
Exit stack: [V10, 0x61, V161, V170, V273]

================================

Block 0x2bd
[0x2bd:0x2ed]
---
Predecessors: [0x4b]
Successors: [0x2ee, 0x4ec]
---
0x2bd JUMPDEST
0x2be PUSH2 0x61
0x2c1 PUSH1 0x4
0x2c3 CALLDATALOAD
0x2c4 PUSH1 0x24
0x2c6 CALLDATALOAD
0x2c7 PUSH1 0x44
0x2c9 CALLDATALOAD
0x2ca PUSH1 0x64
0x2cc CALLDATALOAD
0x2cd PUSH1 0x84
0x2cf CALLDATALOAD
0x2d0 PUSH1 0xa4
0x2d2 CALLDATALOAD
0x2d3 PUSH1 0xc4
0x2d5 CALLDATALOAD
0x2d6 PUSH1 0x0
0x2d8 SLOAD
0x2d9 PUSH1 0x1
0x2db PUSH1 0xa0
0x2dd PUSH1 0x2
0x2df EXP
0x2e0 SUB
0x2e1 SWAP1
0x2e2 DUP2
0x2e3 AND
0x2e4 CALLER
0x2e5 SWAP2
0x2e6 SWAP1
0x2e7 SWAP2
0x2e8 AND
0x2e9 EQ
0x2ea PUSH2 0x4ec
0x2ed JUMPI
---
0x2bd: JUMPDEST 
0x2be: V275 = 0x61
0x2c1: V276 = 0x4
0x2c3: V277 = CALLDATALOAD 0x4
0x2c4: V278 = 0x24
0x2c6: V279 = CALLDATALOAD 0x24
0x2c7: V280 = 0x44
0x2c9: V281 = CALLDATALOAD 0x44
0x2ca: V282 = 0x64
0x2cc: V283 = CALLDATALOAD 0x64
0x2cd: V284 = 0x84
0x2cf: V285 = CALLDATALOAD 0x84
0x2d0: V286 = 0xa4
0x2d2: V287 = CALLDATALOAD 0xa4
0x2d3: V288 = 0xc4
0x2d5: V289 = CALLDATALOAD 0xc4
0x2d6: V290 = 0x0
0x2d8: V291 = S[0x0]
0x2d9: V292 = 0x1
0x2db: V293 = 0xa0
0x2dd: V294 = 0x2
0x2df: V295 = EXP 0x2 0xa0
0x2e0: V296 = SUB 0x10000000000000000000000000000000000000000 0x1
0x2e3: V297 = AND 0xffffffffffffffffffffffffffffffffffffffff V291
0x2e4: V298 = CALLER
0x2e8: V299 = AND V298 0xffffffffffffffffffffffffffffffffffffffff
0x2e9: V300 = EQ V299 V297
0x2ea: V301 = 0x4ec
0x2ed: JUMPI 0x4ec V300
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x61, V277, V279, V281, V283, V285, V287, V289]
Exit stack: [V10, 0x61, V277, V279, V281, V283, V285, V287, V289]

================================

Block 0x2ee
[0x2ee:0x2f1]
---
Predecessors: [0x2bd]
Successors: [0x5ab]
---
0x2ee PUSH2 0x5ab
0x2f1 JUMP
---
0x2ee: V302 = 0x5ab
0x2f1: JUMP 0x5ab
---
Entry stack: [V10, 0x61, V277, V279, V281, V283, V285, V287, V289]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0x61, V277, V279, V281, V283, V285, V287, V289]

================================

Block 0x2f2
[0x2f2:0x2fa]
---
Predecessors: [0x56]
Successors: [0x313]
---
0x2f2 JUMPDEST
0x2f3 PUSH2 0x313
0x2f6 PUSH1 0x5
0x2f8 SLOAD
0x2f9 DUP2
0x2fa JUMP
---
0x2f2: JUMPDEST 
0x2f3: V303 = 0x313
0x2f6: V304 = 0x5
0x2f8: V305 = S[0x5]
0x2fa: JUMP 0x313
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x313, V305]
Exit stack: [V10, 0x313, V305]

================================

Block 0x2fb
[0x2fb:0x312]
---
Predecessors: [0x63, 0x4ae]
Successors: []
---
0x2fb JUMPDEST
0x2fc PUSH1 0x40
0x2fe DUP1
0x2ff MLOAD
0x300 PUSH2 0xffff
0x303 SWAP3
0x304 SWAP1
0x305 SWAP3
0x306 AND
0x307 DUP3
0x308 MSTORE
0x309 MLOAD
0x30a SWAP1
0x30b DUP2
0x30c SWAP1
0x30d SUB
0x30e PUSH1 0x20
0x310 ADD
0x311 SWAP1
0x312 RETURN
---
0x2fb: JUMPDEST 
0x2fc: V306 = 0x40
0x2ff: V307 = M[0x40]
0x300: V308 = 0xffff
0x306: V309 = AND 0xffff S0
0x308: M[V307] = V309
0x309: V310 = M[0x40]
0x30d: V311 = SUB V307 V310
0x30e: V312 = 0x20
0x310: V313 = ADD 0x20 V311
0x312: RETURN V310 V313
---
Entry stack: [V10, 0x61, 0x0, S2, S1, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V10, 0x61, 0x0, S2, S1]

================================

Block 0x313
[0x313:0x324]
---
Predecessors: [0x2f2]
Successors: []
---
0x313 JUMPDEST
0x314 PUSH1 0x40
0x316 DUP1
0x317 MLOAD
0x318 SWAP2
0x319 DUP3
0x31a MSTORE
0x31b MLOAD
0x31c SWAP1
0x31d DUP2
0x31e SWAP1
0x31f SUB
0x320 PUSH1 0x20
0x322 ADD
0x323 SWAP1
0x324 RETURN
---
0x313: JUMPDEST 
0x314: V314 = 0x40
0x317: V315 = M[0x40]
0x31a: M[V315] = V305
0x31b: V316 = M[0x40]
0x31f: V317 = SUB V315 V316
0x320: V318 = 0x20
0x322: V319 = ADD 0x20 V317
0x324: RETURN V316 V319
---
Entry stack: [V10, 0x313, V305]
Stack pops: 1
Stack additions: []
Exit stack: [V10, 0x313]

================================

Block 0x325
[0x325:0x398]
---
Predecessors: [0x458]
Successors: [0x399]
---
0x325 JUMPDEST
0x326 PUSH1 0x2
0x328 SLOAD
0x329 PUSH1 0x40
0x32b DUP1
0x32c MLOAD
0x32d PUSH32 0x97ca0a9f00000000000000000000000000000000000000000000000000000000
0x34e DUP2
0x34f MSTORE
0x350 PUSH2 0x2710
0x353 CALLVALUE
0x354 DIV
0x355 PUSH1 0xc8
0x357 PUSH1 0x2
0x359 EXP
0x35a DUP5
0x35b DIV
0x35c PUSH2 0xffff
0x35f AND
0x360 MUL
0x361 PUSH1 0x4
0x363 DUP3
0x364 ADD
0x365 MSTORE
0x366 SWAP1
0x367 MLOAD
0x368 PUSH1 0x1
0x36a PUSH1 0xa0
0x36c PUSH1 0x2
0x36e EXP
0x36f SUB
0x370 SWAP3
0x371 SWAP1
0x372 SWAP3
0x373 AND
0x374 SWAP2
0x375 PUSH4 0x97ca0a9f
0x37a SWAP2
0x37b PUSH1 0x24
0x37d DUP2
0x37e DUP2
0x37f ADD
0x380 SWAP3
0x381 PUSH1 0x0
0x383 SWAP3
0x384 SWAP1
0x385 SWAP2
0x386 SWAP1
0x387 DUP3
0x388 SWAP1
0x389 SUB
0x38a ADD
0x38b DUP2
0x38c DUP4
0x38d DUP8
0x38e PUSH2 0x61da
0x391 GAS
0x392 SUB
0x393 CALL
0x394 ISZERO
0x395 PUSH2 0x2
0x398 JUMPI
---
0x325: JUMPDEST 
0x326: V320 = 0x2
0x328: V321 = S[0x2]
0x329: V322 = 0x40
0x32c: V323 = M[0x40]
0x32d: V324 = 0x97ca0a9f00000000000000000000000000000000000000000000000000000000
0x34f: M[V323] = 0x97ca0a9f00000000000000000000000000000000000000000000000000000000
0x350: V325 = 0x2710
0x353: V326 = CALLVALUE
0x354: V327 = DIV V326 0x2710
0x355: V328 = 0xc8
0x357: V329 = 0x2
0x359: V330 = EXP 0x2 0xc8
0x35b: V331 = DIV V321 0x100000000000000000000000000000000000000000000000000
0x35c: V332 = 0xffff
0x35f: V333 = AND 0xffff V331
0x360: V334 = MUL V333 V327
0x361: V335 = 0x4
0x364: V336 = ADD V323 0x4
0x365: M[V336] = V334
0x367: V337 = M[0x40]
0x368: V338 = 0x1
0x36a: V339 = 0xa0
0x36c: V340 = 0x2
0x36e: V341 = EXP 0x2 0xa0
0x36f: V342 = SUB 0x10000000000000000000000000000000000000000 0x1
0x373: V343 = AND 0xffffffffffffffffffffffffffffffffffffffff V321
0x375: V344 = 0x97ca0a9f
0x37b: V345 = 0x24
0x37f: V346 = ADD 0x24 V323
0x381: V347 = 0x0
0x389: V348 = SUB V323 V337
0x38a: V349 = ADD V348 0x24
0x38e: V350 = 0x61da
0x391: V351 = GAS
0x392: V352 = SUB V351 0x61da
0x393: V353 = CALL V352 V343 0x0 V337 V349 V337 0x0
0x394: V354 = ISZERO V353
0x395: V355 = 0x2
0x398: THROWI V354
---
Entry stack: [V10, 0x61, S2, V407, S0]
Stack pops: 0
Stack additions: [V343, 0x97ca0a9f, V346]
Exit stack: [V10, 0x61, S2, V407, S0, V343, 0x97ca0a9f, V346]

================================

Block 0x399
[0x399:0x3c0]
---
Predecessors: [0x325]
Successors: [0x3c1]
---
0x399 POP
0x39a POP
0x39b PUSH1 0x1
0x39d SLOAD
0x39e PUSH1 0x40
0x3a0 MLOAD
0x3a1 PUSH1 0x1
0x3a3 PUSH1 0xa0
0x3a5 PUSH1 0x2
0x3a7 EXP
0x3a8 SUB
0x3a9 SWAP2
0x3aa SWAP1
0x3ab SWAP2
0x3ac AND
0x3ad SWAP2
0x3ae POP
0x3af PUSH1 0x0
0x3b1 SWAP1
0x3b2 CALLVALUE
0x3b3 SWAP1
0x3b4 DUP3
0x3b5 DUP2
0x3b6 DUP2
0x3b7 DUP2
0x3b8 DUP6
0x3b9 DUP9
0x3ba DUP4
0x3bb CALL
0x3bc POP
0x3bd POP
0x3be POP
0x3bf POP
0x3c0 POP
---
0x39b: V356 = 0x1
0x39d: V357 = S[0x1]
0x39e: V358 = 0x40
0x3a0: V359 = M[0x40]
0x3a1: V360 = 0x1
0x3a3: V361 = 0xa0
0x3a5: V362 = 0x2
0x3a7: V363 = EXP 0x2 0xa0
0x3a8: V364 = SUB 0x10000000000000000000000000000000000000000 0x1
0x3ac: V365 = AND 0xffffffffffffffffffffffffffffffffffffffff V357
0x3af: V366 = 0x0
0x3b2: V367 = CALLVALUE
0x3bb: V368 = CALL 0x0 V365 V367 V359 0x0 V359 0x0
---
Entry stack: [V10, 0x61, S5, V407, S3, V343, 0x97ca0a9f, V346]
Stack pops: 3
Stack additions: []
Exit stack: [V10, 0x61, S5, V407, S3]

================================

Block 0x3c1
[0x3c1:0x3c5]
---
Predecessors: [0xb0, 0x399]
Successors: [0x61]
---
0x3c1 JUMPDEST
0x3c2 POP
0x3c3 POP
0x3c4 POP
0x3c5 JUMP
---
0x3c1: JUMPDEST 
0x3c5: JUMP 0x61
---
Entry stack: [V10, 0x61, S2, S1, S0]
Stack pops: 4
Stack additions: []
Exit stack: [V10]

================================

Block 0x3c6
[0x3c6:0x3ce]
---
Predecessors: [0xaa]
Successors: [0x137]
---
0x3c6 JUMPDEST
0x3c7 PUSH2 0x3cf
0x3ca CALLER
0x3cb PUSH2 0x137
0x3ce JUMP
---
0x3c6: JUMPDEST 
0x3c7: V369 = 0x3cf
0x3ca: V370 = CALLER
0x3cb: V371 = 0x137
0x3ce: JUMP 0x137
---
Entry stack: [V10, 0x61, 0x0, 0x0, 0x0]
Stack pops: 0
Stack additions: [0x3cf, V370]
Exit stack: [V10, 0x61, 0x0, 0x0, 0x0, 0x3cf, V370]

================================

Block 0x3cf
[0x3cf:0x3df]
---
Predecessors: [0x4ae]
Successors: [0x3e0, 0x42b]
---
0x3cf JUMPDEST
0x3d0 SWAP3
0x3d1 POP
0x3d2 DUP3
0x3d3 PUSH2 0xffff
0x3d6 AND
0x3d7 PUSH2 0xffff
0x3da EQ
0x3db ISZERO
0x3dc PUSH2 0x42b
0x3df JUMPI
---
0x3cf: JUMPDEST 
0x3d3: V372 = 0xffff
0x3d6: V373 = AND 0xffff S0
0x3d7: V374 = 0xffff
0x3da: V375 = EQ 0xffff V373
0x3db: V376 = ISZERO V375
0x3dc: V377 = 0x42b
0x3df: JUMPI 0x42b V376
---
Entry stack: [V10, 0x61, 0x0, 0x0, S1, S0]
Stack pops: 4
Stack additions: [S0, S2, S1]
Exit stack: [V10, 0x61, S0, 0x0, S1]

================================

Block 0x3e0
[0x3e0:0x42a]
---
Predecessors: [0x3cf]
Successors: [0x42b]
---
0x3e0 PUSH1 0x4
0x3e2 DUP1
0x3e3 SLOAD
0x3e4 PUSH2 0xffff
0x3e7 SWAP1
0x3e8 DUP2
0x3e9 AND
0x3ea PUSH1 0x0
0x3ec DUP2
0x3ed DUP2
0x3ee MSTORE
0x3ef PUSH1 0x6
0x3f1 PUSH1 0x20
0x3f3 MSTORE
0x3f4 PUSH1 0x40
0x3f6 SWAP1
0x3f7 SHA3
0x3f8 DUP1
0x3f9 SLOAD
0x3fa PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x40f NOT
0x410 AND
0x411 CALLER
0x412 OR
0x413 SWAP1
0x414 SSTORE
0x415 DUP3
0x416 SLOAD
0x417 PUSH2 0xffff
0x41a NOT
0x41b DUP2
0x41c AND
0x41d SWAP3
0x41e AND
0x41f PUSH1 0x1
0x421 ADD
0x422 SWAP2
0x423 SWAP1
0x424 SWAP2
0x425 OR
0x426 SWAP1
0x427 SWAP2
0x428 SSTORE
0x429 SWAP3
0x42a POP
---
0x3e0: V378 = 0x4
0x3e3: V379 = S[0x4]
0x3e4: V380 = 0xffff
0x3e9: V381 = AND 0xffff V379
0x3ea: V382 = 0x0
0x3ee: M[0x0] = V381
0x3ef: V383 = 0x6
0x3f1: V384 = 0x20
0x3f3: M[0x20] = 0x6
0x3f4: V385 = 0x40
0x3f7: V386 = SHA3 0x0 0x40
0x3f9: V387 = S[V386]
0x3fa: V388 = 0xffffffffffffffffffffffffffffffffffffffff
0x40f: V389 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0x410: V390 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V387
0x411: V391 = CALLER
0x412: V392 = OR V391 V390
0x414: S[V386] = V392
0x416: V393 = S[0x4]
0x417: V394 = 0xffff
0x41a: V395 = NOT 0xffff
0x41c: V396 = AND V393 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000
0x41e: V397 = AND 0xffff V393
0x41f: V398 = 0x1
0x421: V399 = ADD 0x1 V397
0x425: V400 = OR V399 V396
0x428: S[0x4] = V400
---
Entry stack: [V10, 0x61, S2, 0x0, S0]
Stack pops: 3
Stack additions: [V381, S1, S0]
Exit stack: [V10, 0x61, V381, 0x0, S0]

================================

Block 0x42b
[0x42b:0x457]
---
Predecessors: [0x3cf, 0x3e0]
Successors: [0x458]
---
0x42b JUMPDEST
0x42c POP
0x42d POP
0x42e PUSH2 0xffff
0x431 DUP2
0x432 AND
0x433 PUSH1 0x0
0x435 SWAP1
0x436 DUP2
0x437 MSTORE
0x438 PUSH1 0x6
0x43a PUSH1 0x20
0x43c MSTORE
0x43d PUSH1 0x40
0x43f DUP2
0x440 SHA3
0x441 PUSH1 0x1
0x443 DUP2
0x444 ADD
0x445 DUP1
0x446 SLOAD
0x447 CALLVALUE
0x448 SWAP1
0x449 DUP2
0x44a ADD
0x44b SWAP1
0x44c SWAP2
0x44d SSTORE
0x44e PUSH1 0x5
0x450 DUP1
0x451 SLOAD
0x452 SWAP1
0x453 SWAP2
0x454 ADD
0x455 SWAP1
0x456 SSTORE
0x457 SWAP1
---
0x42b: JUMPDEST 
0x42e: V401 = 0xffff
0x432: V402 = AND S2 0xffff
0x433: V403 = 0x0
0x437: M[0x0] = V402
0x438: V404 = 0x6
0x43a: V405 = 0x20
0x43c: M[0x20] = 0x6
0x43d: V406 = 0x40
0x440: V407 = SHA3 0x0 0x40
0x441: V408 = 0x1
0x444: V409 = ADD V407 0x1
0x446: V410 = S[V409]
0x447: V411 = CALLVALUE
0x44a: V412 = ADD V411 V410
0x44d: S[V409] = V412
0x44e: V413 = 0x5
0x451: V414 = S[0x5]
0x454: V415 = ADD V411 V414
0x456: S[0x5] = V415
---
Entry stack: [V10, 0x61, S2, 0x0, S0]
Stack pops: 3
Stack additions: [S2, V407, 0x0]
Exit stack: [V10, 0x61, S2, V407, 0x0]

================================

Block 0x458
[0x458:0x46a]
---
Predecessors: [0x42b, 0x46b]
Successors: [0x325, 0x46b]
---
0x458 JUMPDEST
0x459 PUSH1 0x4
0x45b SLOAD
0x45c PUSH2 0xffff
0x45f SWAP1
0x460 DUP2
0x461 AND
0x462 SWAP1
0x463 DUP3
0x464 AND
0x465 LT
0x466 ISZERO
0x467 PUSH2 0x325
0x46a JUMPI
---
0x458: JUMPDEST 
0x459: V416 = 0x4
0x45b: V417 = S[0x4]
0x45c: V418 = 0xffff
0x461: V419 = AND 0xffff V417
0x464: V420 = AND S0 0xffff
0x465: V421 = LT V420 V419
0x466: V422 = ISZERO V421
0x467: V423 = 0x325
0x46a: JUMPI 0x325 V422
---
Entry stack: [V10, 0x61, S2, V407, S0]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10, 0x61, S2, V407, S0]

================================

Block 0x46b
[0x46b:0x4a7]
---
Predecessors: [0x458]
Successors: [0x458]
---
0x46b PUSH1 0x5
0x46d SLOAD
0x46e PUSH2 0xffff
0x471 DUP3
0x472 AND
0x473 PUSH1 0x0
0x475 SWAP1
0x476 DUP2
0x477 MSTORE
0x478 PUSH1 0x6
0x47a PUSH1 0x20
0x47c MSTORE
0x47d PUSH1 0x40
0x47f SWAP1
0x480 SHA3
0x481 PUSH1 0x1
0x483 DUP2
0x484 ADD
0x485 SLOAD
0x486 PUSH1 0x2
0x488 SWAP2
0x489 SWAP1
0x48a SWAP2
0x48b ADD
0x48c DUP1
0x48d SLOAD
0x48e PUSH2 0xffff
0x491 NOT
0x492 AND
0x493 PUSH2 0x2710
0x496 SWAP3
0x497 SWAP1
0x498 SWAP3
0x499 MUL
0x49a SWAP3
0x49b SWAP1
0x49c SWAP3
0x49d DIV
0x49e OR
0x49f SWAP1
0x4a0 SSTORE
0x4a1 PUSH1 0x1
0x4a3 ADD
0x4a4 PUSH2 0x458
0x4a7 JUMP
---
0x46b: V424 = 0x5
0x46d: V425 = S[0x5]
0x46e: V426 = 0xffff
0x472: V427 = AND S0 0xffff
0x473: V428 = 0x0
0x477: M[0x0] = V427
0x478: V429 = 0x6
0x47a: V430 = 0x20
0x47c: M[0x20] = 0x6
0x47d: V431 = 0x40
0x480: V432 = SHA3 0x0 0x40
0x481: V433 = 0x1
0x484: V434 = ADD V432 0x1
0x485: V435 = S[V434]
0x486: V436 = 0x2
0x48b: V437 = ADD 0x2 V432
0x48d: V438 = S[V437]
0x48e: V439 = 0xffff
0x491: V440 = NOT 0xffff
0x492: V441 = AND 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000 V438
0x493: V442 = 0x2710
0x499: V443 = MUL 0x2710 V435
0x49d: V444 = DIV V443 V425
0x49e: V445 = OR V444 V441
0x4a0: S[V437] = V445
0x4a1: V446 = 0x1
0x4a3: V447 = ADD 0x1 S0
0x4a4: V448 = 0x458
0x4a7: JUMP 0x458
---
Entry stack: [V10, 0x61, S2, V407, S0]
Stack pops: 1
Stack additions: [V447]
Exit stack: [V10, 0x61, S2, V407, V447]

================================

Block 0x4a8
[0x4a8:0x4ad]
---
Predecessors: [0x13b]
Successors: [0x4ae]
---
0x4a8 JUMPDEST
0x4a9 PUSH2 0xffff
0x4ac SWAP2
0x4ad POP
---
0x4a8: JUMPDEST 
0x4a9: V449 = 0xffff
---
Entry stack: [V10, 0x61, 0x0, 0x0, S4, {0x2fb, 0x3cf}, S2, 0x0, S0]
Stack pops: 2
Stack additions: [0xffff, S0]
Exit stack: [V10, 0x61, 0x0, 0x0, S4, {0x2fb, 0x3cf}, S2, 0xffff, S0]

================================

Block 0x4ae
[0x4ae:0x4b3]
---
Predecessors: [0x175, 0x4a8]
Successors: [0x2fb, 0x3cf]
---
0x4ae JUMPDEST
0x4af POP
0x4b0 SWAP2
0x4b1 SWAP1
0x4b2 POP
0x4b3 JUMP
---
0x4ae: JUMPDEST 
0x4b3: JUMP {0x2fb, 0x3cf}
---
Entry stack: [V10, 0x61, 0x0, 0x0, S4, {0x2fb, 0x3cf}, S2, S1, S0]
Stack pops: 4
Stack additions: [S1]
Exit stack: [V10, 0x61, 0x0, 0x0, S4, S1]

================================

Block 0x4b4
[0x4b4:0x4bb]
---
Predecessors: [0x14e]
Successors: [0x13b]
---
0x4b4 JUMPDEST
0x4b5 PUSH1 0x1
0x4b7 ADD
0x4b8 PUSH2 0x13b
0x4bb JUMP
---
0x4b4: JUMPDEST 
0x4b5: V450 = 0x1
0x4b7: V451 = ADD 0x1 S0
0x4b8: V452 = 0x13b
0x4bb: JUMP 0x13b
---
Entry stack: [V10, 0x61, 0x0, 0x0, S4, {0x2fb, 0x3cf}, S2, 0x0, S0]
Stack pops: 1
Stack additions: [V451]
Exit stack: [V10, 0x61, 0x0, 0x0, S4, {0x2fb, 0x3cf}, S2, 0x0, V451]

================================

Block 0x4bc
[0x4bc:0x4eb]
---
Predecessors: [0x1be]
Successors: [0x61]
---
0x4bc JUMPDEST
0x4bd PUSH1 0x1
0x4bf SLOAD
0x4c0 PUSH1 0x40
0x4c2 MLOAD
0x4c3 PUSH1 0x1
0x4c5 PUSH1 0xa0
0x4c7 PUSH1 0x2
0x4c9 EXP
0x4ca SUB
0x4cb SWAP2
0x4cc DUP3
0x4cd AND
0x4ce SWAP2
0x4cf PUSH1 0x0
0x4d1 SWAP2
0x4d2 ADDRESS
0x4d3 SWAP1
0x4d4 SWAP2
0x4d5 AND
0x4d6 BALANCE
0x4d7 DUP6
0x4d8 SWAP1
0x4d9 SUB
0x4da SWAP1
0x4db DUP3
0x4dc DUP2
0x4dd DUP2
0x4de DUP2
0x4df DUP6
0x4e0 DUP9
0x4e1 DUP4
0x4e2 CALL
0x4e3 POP
0x4e4 POP
0x4e5 POP
0x4e6 POP
0x4e7 POP
0x4e8 POP
0x4e9 POP
0x4ea POP
0x4eb JUMP
---
0x4bc: JUMPDEST 
0x4bd: V453 = 0x1
0x4bf: V454 = S[0x1]
0x4c0: V455 = 0x40
0x4c2: V456 = M[0x40]
0x4c3: V457 = 0x1
0x4c5: V458 = 0xa0
0x4c7: V459 = 0x2
0x4c9: V460 = EXP 0x2 0xa0
0x4ca: V461 = SUB 0x10000000000000000000000000000000000000000 0x1
0x4cd: V462 = AND 0xffffffffffffffffffffffffffffffffffffffff V454
0x4cf: V463 = 0x0
0x4d2: V464 = ADDRESS
0x4d5: V465 = AND 0xffffffffffffffffffffffffffffffffffffffff V464
0x4d6: V466 = BALANCE V465
0x4d9: V467 = SUB V466 V170
0x4e2: V468 = CALL 0x0 V462 V467 V456 0x0 V456 0x0
0x4eb: JUMP 0x61
---
Entry stack: [V10, 0x61, V161, V170, S0]
Stack pops: 4
Stack additions: []
Exit stack: [V10]

================================

Block 0x4ec
[0x4ec:0x5aa]
---
Predecessors: [0x2bd]
Successors: [0x5ab]
---
0x4ec JUMPDEST
0x4ed PUSH1 0x1
0x4ef DUP1
0x4f0 SLOAD
0x4f1 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x506 NOT
0x507 SWAP1
0x508 DUP2
0x509 AND
0x50a DUP10
0x50b OR
0x50c SWAP1
0x50d SWAP2
0x50e SSTORE
0x50f PUSH1 0x2
0x511 DUP1
0x512 SLOAD
0x513 PUSH1 0x3
0x515 DUP6
0x516 SWAP1
0x517 SSTORE
0x518 SWAP1
0x519 SWAP2
0x51a AND
0x51b DUP8
0x51c OR
0x51d PUSH23 0xffff000000000000000000000000000000000000000000
0x535 NOT
0x536 AND
0x537 PUSH1 0xa8
0x539 PUSH1 0x2
0x53b EXP
0x53c DUP8
0x53d MUL
0x53e OR
0x53f PUSH25 0xffff0000000000000000000000000000000000000000000000
0x559 NOT
0x55a AND
0x55b PUSH1 0xb8
0x55d PUSH1 0x2
0x55f EXP
0x560 DUP7
0x561 MUL
0x562 OR
0x563 PUSH27 0xffff00000000000000000000000000000000000000000000000000
0x57f NOT
0x580 AND
0x581 PUSH1 0xc8
0x583 PUSH1 0x2
0x585 EXP
0x586 DUP6
0x587 MUL
0x588 OR
0x589 PUSH21 0xff0000000000000000000000000000000000000000
0x59f NOT
0x5a0 AND
0x5a1 PUSH1 0xa0
0x5a3 PUSH1 0x2
0x5a5 EXP
0x5a6 DUP4
0x5a7 MUL
0x5a8 OR
0x5a9 SWAP1
0x5aa SSTORE
---
0x4ec: JUMPDEST 
0x4ed: V469 = 0x1
0x4f0: V470 = S[0x1]
0x4f1: V471 = 0xffffffffffffffffffffffffffffffffffffffff
0x506: V472 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0x509: V473 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V470
0x50b: V474 = OR V277 V473
0x50e: S[0x1] = V474
0x50f: V475 = 0x2
0x512: V476 = S[0x2]
0x513: V477 = 0x3
0x517: S[0x3] = V287
0x51a: V478 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V476
0x51c: V479 = OR V279 V478
0x51d: V480 = 0xffff000000000000000000000000000000000000000000
0x535: V481 = NOT 0xffff000000000000000000000000000000000000000000
0x536: V482 = AND 0xffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffff V479
0x537: V483 = 0xa8
0x539: V484 = 0x2
0x53b: V485 = EXP 0x2 0xa8
0x53d: V486 = MUL V281 0x1000000000000000000000000000000000000000000
0x53e: V487 = OR V486 V482
0x53f: V488 = 0xffff0000000000000000000000000000000000000000000000
0x559: V489 = NOT 0xffff0000000000000000000000000000000000000000000000
0x55a: V490 = AND 0xffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffff V487
0x55b: V491 = 0xb8
0x55d: V492 = 0x2
0x55f: V493 = EXP 0x2 0xb8
0x561: V494 = MUL V283 0x10000000000000000000000000000000000000000000000
0x562: V495 = OR V494 V490
0x563: V496 = 0xffff00000000000000000000000000000000000000000000000000
0x57f: V497 = NOT 0xffff00000000000000000000000000000000000000000000000000
0x580: V498 = AND 0xffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffff V495
0x581: V499 = 0xc8
0x583: V500 = 0x2
0x585: V501 = EXP 0x2 0xc8
0x587: V502 = MUL V285 0x100000000000000000000000000000000000000000000000000
0x588: V503 = OR V502 V498
0x589: V504 = 0xff0000000000000000000000000000000000000000
0x59f: V505 = NOT 0xff0000000000000000000000000000000000000000
0x5a0: V506 = AND 0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff V503
0x5a1: V507 = 0xa0
0x5a3: V508 = 0x2
0x5a5: V509 = EXP 0x2 0xa0
0x5a7: V510 = MUL V289 0x10000000000000000000000000000000000000000
0x5a8: V511 = OR V510 V506
0x5aa: S[0x2] = V511
---
Entry stack: [V10, 0x61, V277, V279, V281, V283, V285, V287, V289]
Stack pops: 7
Stack additions: [S6, S5, S4, S3, S2, S1, S0]
Exit stack: [V10, 0x61, V277, V279, V281, V283, V285, V287, V289]

================================

Block 0x5ab
[0x5ab:0x5b3]
---
Predecessors: [0x2ee, 0x4ec]
Successors: [0x61]
---
0x5ab JUMPDEST
0x5ac POP
0x5ad POP
0x5ae POP
0x5af POP
0x5b0 POP
0x5b1 POP
0x5b2 POP
0x5b3 JUMP
---
0x5ab: JUMPDEST 
0x5b3: JUMP 0x61
---
Entry stack: [V10, 0x61, V277, V279, V281, V283, V285, V287, V289]
Stack pops: 8
Stack additions: []
Exit stack: [V10]

================================

Function 0:
Public function signature: 0x8f00e31
Entry block: 0x63
Exit block: 0x2fb
Body: 0x63, 0x2fb

Function 1:
Public function signature: 0xdd46804
Entry block: 0x70
Exit block: 0x61
Body: 0x61, 0x70, 0x8a, 0x98, 0x9e, 0xaa, 0xb0, 0x325, 0x399, 0x3c1, 0x3c6, 0x3cf, 0x3e0, 0x42b, 0x458, 0x46b

Function 2:
Public function signature: 0x693e3776
Entry block: 0xd5
Exit block: 0xd5
Body: 0xd5

Function 3:
Public function signature: 0x730c29ef
Entry block: 0x130
Exit block: 0x2fb
Body: 0x130, 0x2fb

Function 4:
Public function signature: 0x8fe58eb9
Entry block: 0x17c
Exit block: 0x61
Body: 0x61, 0x17c, 0x1be, 0x1d1, 0x210, 0x2b5, 0x4bc

Function 5:
Public function signature: 0xbb6f0ac8
Entry block: 0x2bd
Exit block: 0x61
Body: 0x61, 0x2bd, 0x2ee, 0x4ec, 0x5ab

Function 6:
Public function signature: 0xeeaef8e0
Entry block: 0x2f2
Exit block: 0x313
Body: 0x2f2, 0x313

Function 7:
Public fallback function
Entry block: 0x61
Exit block: 0x61
Body: 0x61

Function 8:
Private function
Entry block: 0x137
Exit block: 0x4ae
Body: 0x137, 0x13b, 0x14e, 0x175, 0x4a8, 0x4ae, 0x4b4

