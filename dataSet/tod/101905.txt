Block 0x0
[0x0:0x9]
---
Predecessors: []
Successors: [0xa, 0x31]
---
0x0 PUSH1 0x60
0x2 PUSH1 0x40
0x4 MSTORE
0x5 CALLDATASIZE
0x6 ISZERO
0x7 PUSH1 0x31
0x9 JUMPI
---
0x0: V0 = 0x60
0x2: V1 = 0x40
0x4: M[0x40] = 0x60
0x5: V2 = CALLDATASIZE
0x6: V3 = ISZERO V2
0x7: V4 = 0x31
0x9: JUMPI 0x31 V3
---
Entry stack: []
Stack pops: 0
Stack additions: []
Exit stack: []

================================

Block 0xa
[0xa:0x1c]
---
Predecessors: [0x0]
Successors: [0x1d, 0x54]
---
0xa PUSH1 0xe0
0xc PUSH1 0x2
0xe EXP
0xf PUSH1 0x0
0x11 CALLDATALOAD
0x12 DIV
0x13 PUSH4 0x686e8aaa
0x18 DUP2
0x19 EQ
0x1a PUSH1 0x54
0x1c JUMPI
---
0xa: V5 = 0xe0
0xc: V6 = 0x2
0xe: V7 = EXP 0x2 0xe0
0xf: V8 = 0x0
0x11: V9 = CALLDATALOAD 0x0
0x12: V10 = DIV V9 0x100000000000000000000000000000000000000000000000000000000
0x13: V11 = 0x686e8aaa
0x19: V12 = EQ V10 0x686e8aaa
0x1a: V13 = 0x54
0x1c: JUMPI 0x54 V12
---
Entry stack: []
Stack pops: 0
Stack additions: [V10]
Exit stack: [V10]

================================

Block 0x1d
[0x1d:0x26]
---
Predecessors: [0xa]
Successors: [0x27, 0x6f]
---
0x1d DUP1
0x1e PUSH4 0xaf6499c5
0x23 EQ
0x24 PUSH1 0x6f
0x26 JUMPI
---
0x1e: V14 = 0xaf6499c5
0x23: V15 = EQ 0xaf6499c5 V10
0x24: V16 = 0x6f
0x26: JUMPI 0x6f V15
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x27
[0x27:0x30]
---
Predecessors: [0x1d]
Successors: [0x31, 0x80]
---
0x27 DUP1
0x28 PUSH4 0xdabdc1f2
0x2d EQ
0x2e PUSH1 0x80
0x30 JUMPI
---
0x28: V17 = 0xdabdc1f2
0x2d: V18 = EQ 0xdabdc1f2 V10
0x2e: V19 = 0x80
0x30: JUMPI 0x80 V18
---
Entry stack: [V10]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10]

================================

Block 0x31
[0x31:0x51]
---
Predecessors: [0x0, 0x27]
Successors: [0x52]
---
0x31 JUMPDEST
0x32 PUSH1 0x9e
0x34 PUSH1 0x1
0x36 SLOAD
0x37 PUSH1 0x1
0x39 PUSH1 0xa0
0x3b PUSH1 0x2
0x3d EXP
0x3e SUB
0x3f AND
0x40 PUSH1 0x0
0x42 CALLVALUE
0x43 PUSH1 0x60
0x45 DUP3
0x46 DUP2
0x47 DUP2
0x48 DUP2
0x49 DUP6
0x4a DUP9
0x4b DUP4
0x4c CALL
0x4d POP
0x4e POP
0x4f POP
0x50 POP
0x51 POP
---
0x31: JUMPDEST 
0x32: V20 = 0x9e
0x34: V21 = 0x1
0x36: V22 = S[0x1]
0x37: V23 = 0x1
0x39: V24 = 0xa0
0x3b: V25 = 0x2
0x3d: V26 = EXP 0x2 0xa0
0x3e: V27 = SUB 0x10000000000000000000000000000000000000000 0x1
0x3f: V28 = AND 0xffffffffffffffffffffffffffffffffffffffff V22
0x40: V29 = 0x0
0x42: V30 = CALLVALUE
0x43: V31 = 0x60
0x4c: V32 = CALL 0x0 V28 V30 0x60 0x0 0x60 0x0
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x9e]
Exit stack: [V10, 0x9e]

================================

Block 0x52
[0x52:0x53]
---
Predecessors: [0x31, 0x6c]
Successors: [0x9e]
---
0x52 JUMPDEST
0x53 JUMP
---
0x52: JUMPDEST 
0x53: JUMP 0x9e
---
Entry stack: [V10, 0x9e]
Stack pops: 1
Stack additions: []
Exit stack: [V10]

================================

Block 0x54
[0x54:0x6b]
---
Predecessors: [0xa]
Successors: [0x6c, 0xaa]
---
0x54 JUMPDEST
0x55 PUSH1 0x9e
0x57 PUSH1 0x0
0x59 SLOAD
0x5a CALLER
0x5b PUSH1 0x1
0x5d PUSH1 0xa0
0x5f PUSH1 0x2
0x61 EXP
0x62 SUB
0x63 SWAP1
0x64 DUP2
0x65 AND
0x66 SWAP2
0x67 AND
0x68 EQ
0x69 PUSH1 0xaa
0x6b JUMPI
---
0x54: JUMPDEST 
0x55: V33 = 0x9e
0x57: V34 = 0x0
0x59: V35 = S[0x0]
0x5a: V36 = CALLER
0x5b: V37 = 0x1
0x5d: V38 = 0xa0
0x5f: V39 = 0x2
0x61: V40 = EXP 0x2 0xa0
0x62: V41 = SUB 0x10000000000000000000000000000000000000000 0x1
0x65: V42 = AND 0xffffffffffffffffffffffffffffffffffffffff V36
0x67: V43 = AND V35 0xffffffffffffffffffffffffffffffffffffffff
0x68: V44 = EQ V43 V42
0x69: V45 = 0xaa
0x6b: JUMPI 0xaa V44
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x9e]
Exit stack: [V10, 0x9e]

================================

Block 0x6c
[0x6c:0x6e]
---
Predecessors: [0x54]
Successors: [0x52]
---
0x6c PUSH1 0x52
0x6e JUMP
---
0x6c: V46 = 0x52
0x6e: JUMP 0x52
---
Entry stack: [V10, 0x9e]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0x9e]

================================

Block 0x6f
[0x6f:0x7f]
---
Predecessors: [0x1d]
Successors: [0xa0]
---
0x6f JUMPDEST
0x70 PUSH1 0xa0
0x72 PUSH1 0x1
0x74 SLOAD
0x75 PUSH1 0x1
0x77 PUSH1 0xa0
0x79 PUSH1 0x2
0x7b EXP
0x7c SUB
0x7d AND
0x7e DUP2
0x7f JUMP
---
0x6f: JUMPDEST 
0x70: V47 = 0xa0
0x72: V48 = 0x1
0x74: V49 = S[0x1]
0x75: V50 = 0x1
0x77: V51 = 0xa0
0x79: V52 = 0x2
0x7b: V53 = EXP 0x2 0xa0
0x7c: V54 = SUB 0x10000000000000000000000000000000000000000 0x1
0x7d: V55 = AND 0xffffffffffffffffffffffffffffffffffffffff V49
0x7f: JUMP 0xa0
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0xa0, V55]
Exit stack: [V10, 0xa0, V55]

================================

Block 0x80
[0x80:0x9a]
---
Predecessors: [0x27]
Successors: [0x9b, 0xcf]
---
0x80 JUMPDEST
0x81 PUSH1 0x9e
0x83 PUSH1 0x4
0x85 CALLDATALOAD
0x86 PUSH1 0x0
0x88 SLOAD
0x89 CALLER
0x8a PUSH1 0x1
0x8c PUSH1 0xa0
0x8e PUSH1 0x2
0x90 EXP
0x91 SUB
0x92 SWAP1
0x93 DUP2
0x94 AND
0x95 SWAP2
0x96 AND
0x97 EQ
0x98 PUSH1 0xcf
0x9a JUMPI
---
0x80: JUMPDEST 
0x81: V56 = 0x9e
0x83: V57 = 0x4
0x85: V58 = CALLDATALOAD 0x4
0x86: V59 = 0x0
0x88: V60 = S[0x0]
0x89: V61 = CALLER
0x8a: V62 = 0x1
0x8c: V63 = 0xa0
0x8e: V64 = 0x2
0x90: V65 = EXP 0x2 0xa0
0x91: V66 = SUB 0x10000000000000000000000000000000000000000 0x1
0x94: V67 = AND 0xffffffffffffffffffffffffffffffffffffffff V61
0x96: V68 = AND V60 0xffffffffffffffffffffffffffffffffffffffff
0x97: V69 = EQ V68 V67
0x98: V70 = 0xcf
0x9a: JUMPI 0xcf V69
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0x9e, V58]
Exit stack: [V10, 0x9e, V58]

================================

Block 0x9b
[0x9b:0x9d]
---
Predecessors: [0x80]
Successors: [0xef]
---
0x9b PUSH1 0xef
0x9d JUMP
---
0x9b: V71 = 0xef
0x9d: JUMP 0xef
---
Entry stack: [V10, 0x9e, V58]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0x9e, V58]

================================

Block 0x9e
[0x9e:0x9f]
---
Predecessors: [0x52, 0xaa, 0xef]
Successors: []
---
0x9e JUMPDEST
0x9f STOP
---
0x9e: JUMPDEST 
0x9f: STOP 
---
Entry stack: [V10]
Stack pops: 0
Stack additions: []
Exit stack: [V10]

================================

Block 0xa0
[0xa0:0xa9]
---
Predecessors: [0x6f]
Successors: []
---
0xa0 JUMPDEST
0xa1 PUSH1 0x60
0xa3 SWAP1
0xa4 DUP2
0xa5 MSTORE
0xa6 PUSH1 0x20
0xa8 SWAP1
0xa9 RETURN
---
0xa0: JUMPDEST 
0xa1: V72 = 0x60
0xa5: M[0x60] = V55
0xa6: V73 = 0x20
0xa9: RETURN 0x60 0x20
---
Entry stack: [V10, 0xa0, V55]
Stack pops: 1
Stack additions: []
Exit stack: [V10, 0xa0]

================================

Block 0xaa
[0xaa:0xce]
---
Predecessors: [0x54]
Successors: [0x9e]
---
0xaa JUMPDEST
0xab PUSH1 0x0
0xad DUP1
0xae SLOAD
0xaf PUSH1 0x1
0xb1 PUSH1 0xa0
0xb3 PUSH1 0x2
0xb5 EXP
0xb6 SUB
0xb7 SWAP1
0xb8 DUP2
0xb9 AND
0xba SWAP2
0xbb SWAP1
0xbc ADDRESS
0xbd AND
0xbe BALANCE
0xbf PUSH1 0x60
0xc1 DUP3
0xc2 DUP2
0xc3 DUP2
0xc4 DUP2
0xc5 DUP6
0xc6 DUP9
0xc7 DUP4
0xc8 CALL
0xc9 POP
0xca POP
0xcb POP
0xcc POP
0xcd POP
0xce JUMP
---
0xaa: JUMPDEST 
0xab: V74 = 0x0
0xae: V75 = S[0x0]
0xaf: V76 = 0x1
0xb1: V77 = 0xa0
0xb3: V78 = 0x2
0xb5: V79 = EXP 0x2 0xa0
0xb6: V80 = SUB 0x10000000000000000000000000000000000000000 0x1
0xb9: V81 = AND 0xffffffffffffffffffffffffffffffffffffffff V75
0xbc: V82 = ADDRESS
0xbd: V83 = AND V82 0xffffffffffffffffffffffffffffffffffffffff
0xbe: V84 = BALANCE V83
0xbf: V85 = 0x60
0xc8: V86 = CALL 0x0 V81 V84 0x60 0x0 0x60 0x0
0xce: JUMP 0x9e
---
Entry stack: [V10, 0x9e]
Stack pops: 1
Stack additions: []
Exit stack: [V10]

================================

Block 0xcf
[0xcf:0xee]
---
Predecessors: [0x80]
Successors: [0xef]
---
0xcf JUMPDEST
0xd0 PUSH1 0x1
0xd2 DUP1
0xd3 SLOAD
0xd4 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0xe9 NOT
0xea AND
0xeb DUP3
0xec OR
0xed SWAP1
0xee SSTORE
---
0xcf: JUMPDEST 
0xd0: V87 = 0x1
0xd3: V88 = S[0x1]
0xd4: V89 = 0xffffffffffffffffffffffffffffffffffffffff
0xe9: V90 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0xea: V91 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V88
0xec: V92 = OR V58 V91
0xee: S[0x1] = V92
---
Entry stack: [V10, 0x9e, V58]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10, 0x9e, V58]

================================

Block 0xef
[0xef:0xf1]
---
Predecessors: [0x9b, 0xcf]
Successors: [0x9e]
---
0xef JUMPDEST
0xf0 POP
0xf1 JUMP
---
0xef: JUMPDEST 
0xf1: JUMP 0x9e
---
Entry stack: [V10, 0x9e, V58]
Stack pops: 2
Stack additions: []
Exit stack: [V10]

================================

Function 0:
Public function signature: 0x686e8aaa
Entry block: 0x54
Exit block: 0x9e
Body: 0x52, 0x54, 0x6c, 0x9e, 0xaa

Function 1:
Public function signature: 0xaf6499c5
Entry block: 0x6f
Exit block: 0xa0
Body: 0x6f, 0xa0

Function 2:
Public function signature: 0xdabdc1f2
Entry block: 0x80
Exit block: 0x9e
Body: 0x80, 0x9b, 0x9e, 0xcf, 0xef

Function 3:
Public fallback function
Entry block: 0x31
Exit block: 0x9e
Body: 0x31, 0x52, 0x9e

