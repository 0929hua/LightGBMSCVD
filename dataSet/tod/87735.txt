Block 0x0
[0x0:0xa]
---
Predecessors: []
Successors: [0xb, 0x1f]
---
0x0 PUSH1 0x60
0x2 PUSH1 0x40
0x4 MSTORE
0x5 CALLDATASIZE
0x6 ISZERO
0x7 PUSH2 0x1f
0xa JUMPI
---
0x0: V0 = 0x60
0x2: V1 = 0x40
0x4: M[0x40] = 0x60
0x5: V2 = CALLDATASIZE
0x6: V3 = ISZERO V2
0x7: V4 = 0x1f
0xa: JUMPI 0x1f V3
---
Entry stack: []
Stack pops: 0
Stack additions: []
Exit stack: []

================================

Block 0xb
[0xb:0x1e]
---
Predecessors: [0x0]
Successors: [0x1f, 0x85]
---
0xb PUSH1 0xe0
0xd PUSH1 0x2
0xf EXP
0x10 PUSH1 0x0
0x12 CALLDATALOAD
0x13 DIV
0x14 PUSH4 0x8f1e5f0b
0x19 DUP2
0x1a EQ
0x1b PUSH2 0x85
0x1e JUMPI
---
0xb: V5 = 0xe0
0xd: V6 = 0x2
0xf: V7 = EXP 0x2 0xe0
0x10: V8 = 0x0
0x12: V9 = CALLDATALOAD 0x0
0x13: V10 = DIV V9 0x100000000000000000000000000000000000000000000000000000000
0x14: V11 = 0x8f1e5f0b
0x1a: V12 = EQ V10 0x8f1e5f0b
0x1b: V13 = 0x85
0x1e: JUMPI 0x85 V12
---
Entry stack: []
Stack pops: 0
Stack additions: [V10]
Exit stack: [V10]

================================

Block 0x1f
[0x1f:0x4a]
---
Predecessors: [0x0, 0xb]
Successors: [0x4b, 0x100]
---
0x1f JUMPDEST
0x20 PUSH2 0xfe
0x23 PUSH1 0x1
0x25 PUSH1 0xa0
0x27 PUSH1 0x2
0x29 EXP
0x2a SUB
0x2b CALLER
0x2c DUP2
0x2d AND
0x2e PUSH1 0x0
0x30 SWAP1
0x31 DUP2
0x32 MSTORE
0x33 PUSH1 0x20
0x35 DUP2
0x36 SWAP1
0x37 MSTORE
0x38 PUSH1 0x40
0x3a DUP2
0x3b SHA3
0x3c PUSH1 0x2
0x3e ADD
0x3f SLOAD
0x40 SWAP1
0x41 SWAP2
0x42 AND
0x43 SWAP1
0x44 DUP2
0x45 GT
0x46 ISZERO
0x47 PUSH2 0x100
0x4a JUMPI
---
0x1f: JUMPDEST 
0x20: V14 = 0xfe
0x23: V15 = 0x1
0x25: V16 = 0xa0
0x27: V17 = 0x2
0x29: V18 = EXP 0x2 0xa0
0x2a: V19 = SUB 0x10000000000000000000000000000000000000000 0x1
0x2b: V20 = CALLER
0x2d: V21 = AND 0xffffffffffffffffffffffffffffffffffffffff V20
0x2e: V22 = 0x0
0x32: M[0x0] = V21
0x33: V23 = 0x20
0x37: M[0x20] = 0x0
0x38: V24 = 0x40
0x3b: V25 = SHA3 0x0 0x40
0x3c: V26 = 0x2
0x3e: V27 = ADD 0x2 V25
0x3f: V28 = S[V27]
0x42: V29 = AND 0xffffffffffffffffffffffffffffffffffffffff V28
0x45: V30 = GT V29 0x0
0x46: V31 = ISZERO V30
0x47: V32 = 0x100
0x4a: JUMPI 0x100 V31
---
Entry stack: [V10]
Stack pops: 0
Stack additions: [0xfe, V29]
Exit stack: [V10, 0xfe, V29]

================================

Block 0x4b
[0x4b:0x74]
---
Predecessors: [0x1f]
Successors: [0x75]
---
0x4b DUP1
0x4c PUSH1 0x0
0x4e CALLDATASIZE
0x4f PUSH1 0x60
0x51 DUP1
0x52 DUP4
0x53 DUP4
0x54 DUP1
0x55 DUP3
0x56 DUP5
0x57 CALLDATACOPY
0x58 DUP3
0x59 ADD
0x5a SWAP2
0x5b POP
0x5c POP
0x5d SWAP3
0x5e POP
0x5f POP
0x60 POP
0x61 PUSH1 0x20
0x63 PUSH1 0x40
0x65 MLOAD
0x66 DUP1
0x67 DUP4
0x68 SUB
0x69 DUP2
0x6a DUP6
0x6b PUSH1 0x32
0x6d GAS
0x6e SUB
0x6f DELEGATECALL
0x70 ISZERO
0x71 PUSH2 0x2
0x74 JUMPI
---
0x4c: V33 = 0x0
0x4e: V34 = CALLDATASIZE
0x4f: V35 = 0x60
0x57: CALLDATACOPY 0x60 0x0 V34
0x59: V36 = ADD 0x60 V34
0x61: V37 = 0x20
0x63: V38 = 0x40
0x65: V39 = M[0x40]
0x68: V40 = SUB V36 V39
0x6b: V41 = 0x32
0x6d: V42 = GAS
0x6e: V43 = SUB V42 0x32
0x6f: V44 = DELEGATECALL V43 V29 V39 V40 V39 0x20
0x70: V45 = ISZERO V44
0x71: V46 = 0x2
0x74: THROWI V45
---
Entry stack: [V10, 0xfe, V29]
Stack pops: 1
Stack additions: [S0, S0, V36]
Exit stack: [V10, 0xfe, V29, V29, V36]

================================

Block 0x75
[0x75:0x80]
---
Predecessors: [0x4b]
Successors: [0x81, 0x127]
---
0x75 POP
0x76 POP
0x77 PUSH1 0x40
0x79 MLOAD
0x7a MLOAD
0x7b ISZERO
0x7c ISZERO
0x7d PUSH2 0x127
0x80 JUMPI
---
0x77: V47 = 0x40
0x79: V48 = M[0x40]
0x7a: V49 = M[V48]
0x7b: V50 = ISZERO V49
0x7c: V51 = ISZERO V50
0x7d: V52 = 0x127
0x80: JUMPI 0x127 V51
---
Entry stack: [V10, 0xfe, V29, V29, V36]
Stack pops: 2
Stack additions: []
Exit stack: [V10, 0xfe, V29]

================================

Block 0x81
[0x81:0x84]
---
Predecessors: [0x75]
Successors: []
---
0x81 PUSH2 0x2
0x84 JUMP
---
0x81: V53 = 0x2
0x84: THROW 
---
Entry stack: [V10, 0xfe, V29]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xfe, V29]

================================

Block 0x85
[0x85:0xfd]
---
Predecessors: [0xb]
Successors: [0xfe]
---
0x85 JUMPDEST
0x86 PUSH2 0xfe
0x89 PUSH1 0x4
0x8b CALLDATALOAD
0x8c CALLER
0x8d PUSH1 0x60
0x8f DUP2
0x90 SWAP1
0x91 MSTORE
0x92 PUSH1 0x0
0x94 PUSH1 0x80
0x96 DUP2
0x97 SWAP1
0x98 MSTORE
0x99 PUSH2 0x100
0x9c PUSH1 0x40
0x9e SWAP1
0x9f DUP2
0xa0 MSTORE
0xa1 PUSH1 0xc0
0xa3 DUP5
0xa4 DUP2
0xa5 MSTORE
0xa6 PUSH1 0xe0
0xa8 DUP4
0xa9 SWAP1
0xaa MSTORE
0xab PUSH1 0xa0
0xad MSTORE
0xae PUSH1 0x1
0xb0 PUSH1 0xa0
0xb2 PUSH1 0x2
0xb4 EXP
0xb5 SUB
0xb6 DUP4
0xb7 AND
0xb8 DUP3
0xb9 MSTORE
0xba PUSH1 0x20
0xbc DUP3
0xbd SWAP1
0xbe MSTORE
0xbf DUP2
0xc0 SHA3
0xc1 DUP1
0xc2 SLOAD
0xc3 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0xd8 NOT
0xd9 SWAP1
0xda DUP2
0xdb AND
0xdc SWAP1
0xdd SWAP4
0xde OR
0xdf DUP2
0xe0 SSTORE
0xe1 PUSH1 0x1
0xe3 DUP2
0xe4 ADD
0xe5 DUP3
0xe6 SWAP1
0xe7 SSTORE
0xe8 PUSH1 0x2
0xea DUP2
0xeb ADD
0xec DUP1
0xed SLOAD
0xee SWAP1
0xef SWAP4
0xf0 AND
0xf1 DUP5
0xf2 OR
0xf3 SWAP1
0xf4 SWAP3
0xf5 SSTORE
0xf6 PUSH1 0x3
0xf8 SWAP1
0xf9 SWAP2
0xfa ADD
0xfb SSTORE
0xfc POP
0xfd JUMP
---
0x85: JUMPDEST 
0x86: V54 = 0xfe
0x89: V55 = 0x4
0x8b: V56 = CALLDATALOAD 0x4
0x8c: V57 = CALLER
0x8d: V58 = 0x60
0x91: M[0x60] = V57
0x92: V59 = 0x0
0x94: V60 = 0x80
0x98: M[0x80] = 0x0
0x99: V61 = 0x100
0x9c: V62 = 0x40
0xa0: M[0x40] = 0x100
0xa1: V63 = 0xc0
0xa5: M[0xc0] = V56
0xa6: V64 = 0xe0
0xaa: M[0xe0] = 0x0
0xab: V65 = 0xa0
0xad: M[0xa0] = 0xc0
0xae: V66 = 0x1
0xb0: V67 = 0xa0
0xb2: V68 = 0x2
0xb4: V69 = EXP 0x2 0xa0
0xb5: V70 = SUB 0x10000000000000000000000000000000000000000 0x1
0xb7: V71 = AND V57 0xffffffffffffffffffffffffffffffffffffffff
0xb9: M[0x0] = V71
0xba: V72 = 0x20
0xbe: M[0x20] = 0x0
0xc0: V73 = SHA3 0x0 0x40
0xc2: V74 = S[V73]
0xc3: V75 = 0xffffffffffffffffffffffffffffffffffffffff
0xd8: V76 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0xdb: V77 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V74
0xde: V78 = OR V57 V77
0xe0: S[V73] = V78
0xe1: V79 = 0x1
0xe4: V80 = ADD V73 0x1
0xe7: S[V80] = 0x0
0xe8: V81 = 0x2
0xeb: V82 = ADD V73 0x2
0xed: V83 = S[V82]
0xf0: V84 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V83
0xf2: V85 = OR V56 V84
0xf5: S[V82] = V85
0xf6: V86 = 0x3
0xfa: V87 = ADD V73 0x3
0xfb: S[V87] = 0x0
0xfd: JUMP 0xfe
---
Entry stack: [V10]
Stack pops: 0
Stack additions: []
Exit stack: [V10]

================================

Block 0xfe
[0xfe:0xff]
---
Predecessors: [0x85, 0x152]
Successors: []
---
0xfe JUMPDEST
0xff STOP
---
0xfe: JUMPDEST 
0xff: STOP 
---
Entry stack: [V10]
Stack pops: 0
Stack additions: []
Exit stack: [V10]

================================

Block 0x100
[0x100:0x122]
---
Predecessors: [0x1f]
Successors: [0x123, 0x152]
---
0x100 JUMPDEST
0x101 PUSH1 0x1
0x103 PUSH1 0xa0
0x105 PUSH1 0x2
0x107 EXP
0x108 SUB
0x109 CALLER
0x10a AND
0x10b PUSH1 0x0
0x10d CALLVALUE
0x10e PUSH1 0x60
0x110 DUP3
0x111 DUP2
0x112 DUP2
0x113 DUP2
0x114 DUP6
0x115 DUP9
0x116 DUP4
0x117 CALL
0x118 SWAP4
0x119 POP
0x11a POP
0x11b POP
0x11c POP
0x11d ISZERO
0x11e ISZERO
0x11f PUSH2 0x152
0x122 JUMPI
---
0x100: JUMPDEST 
0x101: V88 = 0x1
0x103: V89 = 0xa0
0x105: V90 = 0x2
0x107: V91 = EXP 0x2 0xa0
0x108: V92 = SUB 0x10000000000000000000000000000000000000000 0x1
0x109: V93 = CALLER
0x10a: V94 = AND V93 0xffffffffffffffffffffffffffffffffffffffff
0x10b: V95 = 0x0
0x10d: V96 = CALLVALUE
0x10e: V97 = 0x60
0x117: V98 = CALL 0x0 V94 V96 0x60 0x0 0x60 0x0
0x11d: V99 = ISZERO V98
0x11e: V100 = ISZERO V99
0x11f: V101 = 0x152
0x122: JUMPI 0x152 V100
---
Entry stack: [V10, 0xfe, V29]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xfe, V29]

================================

Block 0x123
[0x123:0x126]
---
Predecessors: [0x100]
Successors: []
---
0x123 PUSH2 0x2
0x126 JUMP
---
0x123: V102 = 0x2
0x126: THROW 
---
Entry stack: [V10, 0xfe, V29]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xfe, V29]

================================

Block 0x127
[0x127:0x130]
---
Predecessors: [0x75]
Successors: [0x131, 0x152]
---
0x127 JUMPDEST
0x128 PUSH1 0x0
0x12a CALLVALUE
0x12b GT
0x12c ISZERO
0x12d PUSH2 0x152
0x130 JUMPI
---
0x127: JUMPDEST 
0x128: V103 = 0x0
0x12a: V104 = CALLVALUE
0x12b: V105 = GT V104 0x0
0x12c: V106 = ISZERO V105
0x12d: V107 = 0x152
0x130: JUMPI 0x152 V106
---
Entry stack: [V10, 0xfe, V29]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xfe, V29]

================================

Block 0x131
[0x131:0x14d]
---
Predecessors: [0x127]
Successors: [0x14e, 0x152]
---
0x131 PUSH1 0x40
0x133 MLOAD
0x134 DUP2
0x135 SWAP1
0x136 PUSH1 0x0
0x138 SWAP1
0x139 CALLVALUE
0x13a SWAP1
0x13b DUP3
0x13c DUP2
0x13d DUP2
0x13e DUP2
0x13f DUP6
0x140 DUP9
0x141 DUP4
0x142 CALL
0x143 SWAP4
0x144 POP
0x145 POP
0x146 POP
0x147 POP
0x148 ISZERO
0x149 ISZERO
0x14a PUSH2 0x152
0x14d JUMPI
---
0x131: V108 = 0x40
0x133: V109 = M[0x40]
0x136: V110 = 0x0
0x139: V111 = CALLVALUE
0x142: V112 = CALL 0x0 V29 V111 V109 0x0 V109 0x0
0x148: V113 = ISZERO V112
0x149: V114 = ISZERO V113
0x14a: V115 = 0x152
0x14d: JUMPI 0x152 V114
---
Entry stack: [V10, 0xfe, V29]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V10, 0xfe, V29]

================================

Block 0x14e
[0x14e:0x151]
---
Predecessors: [0x131]
Successors: []
---
0x14e PUSH2 0x2
0x151 JUMP
---
0x14e: V116 = 0x2
0x151: THROW 
---
Entry stack: [V10, 0xfe, V29]
Stack pops: 0
Stack additions: []
Exit stack: [V10, 0xfe, V29]

================================

Block 0x152
[0x152:0x17d]
---
Predecessors: [0x100, 0x127, 0x131]
Successors: [0xfe]
---
0x152 JUMPDEST
0x153 PUSH1 0x40
0x155 MLOAD
0x156 PUSH32 0xd2e2337ae233b24118ddb3b70a50fc174811cd16ce07a27faf89988ba2b1d40d
0x177 SWAP1
0x178 PUSH1 0x0
0x17a SWAP1
0x17b LOG1
0x17c POP
0x17d JUMP
---
0x152: JUMPDEST 
0x153: V117 = 0x40
0x155: V118 = M[0x40]
0x156: V119 = 0xd2e2337ae233b24118ddb3b70a50fc174811cd16ce07a27faf89988ba2b1d40d
0x178: V120 = 0x0
0x17b: LOG V118 0x0 0xd2e2337ae233b24118ddb3b70a50fc174811cd16ce07a27faf89988ba2b1d40d
0x17d: JUMP 0xfe
---
Entry stack: [V10, 0xfe, V29]
Stack pops: 2
Stack additions: []
Exit stack: [V10]

================================

Function 0:
Public function signature: 0x8f1e5f0b
Entry block: 0x85
Exit block: 0xfe
Body: 0x85, 0xfe

Function 1:
Public fallback function
Entry block: 0x1f
Exit block: 0x14e
Body: 0x1f, 0x4b, 0x75, 0x81, 0xfe, 0x100, 0x123, 0x127, 0x131, 0x14e, 0x152

