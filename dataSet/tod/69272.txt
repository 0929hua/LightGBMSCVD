Block 0x0
[0x0:0x38]
---
Predecessors: []
Successors: [0x39, 0x53]
---
0x0 PUSH1 0x60
0x2 PUSH1 0x40
0x4 MSTORE
0x5 PUSH1 0x0
0x7 CALLDATALOAD
0x8 PUSH29 0x100000000000000000000000000000000000000000000000000000000
0x26 SWAP1
0x27 DIV
0x28 PUSH4 0xffffffff
0x2d AND
0x2e DUP1
0x2f PUSH4 0x4d21c7e
0x34 EQ
0x35 PUSH2 0x53
0x38 JUMPI
---
0x0: V0 = 0x60
0x2: V1 = 0x40
0x4: M[0x40] = 0x60
0x5: V2 = 0x0
0x7: V3 = CALLDATALOAD 0x0
0x8: V4 = 0x100000000000000000000000000000000000000000000000000000000
0x27: V5 = DIV V3 0x100000000000000000000000000000000000000000000000000000000
0x28: V6 = 0xffffffff
0x2d: V7 = AND 0xffffffff V5
0x2f: V8 = 0x4d21c7e
0x34: V9 = EQ 0x4d21c7e V7
0x35: V10 = 0x53
0x38: JUMPI 0x53 V9
---
Entry stack: []
Stack pops: 0
Stack additions: [V7]
Exit stack: [V7]

================================

Block 0x39
[0x39:0x43]
---
Predecessors: [0x0]
Successors: [0x44, 0x8c]
---
0x39 DUP1
0x3a PUSH4 0x2878e131
0x3f EQ
0x40 PUSH2 0x8c
0x43 JUMPI
---
0x3a: V11 = 0x2878e131
0x3f: V12 = EQ 0x2878e131 V7
0x40: V13 = 0x8c
0x43: JUMPI 0x8c V12
---
Entry stack: [V7]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V7]

================================

Block 0x44
[0x44:0x4e]
---
Predecessors: [0x39]
Successors: [0x4f, 0xcc]
---
0x44 DUP1
0x45 PUSH4 0x41c0e1b5
0x4a EQ
0x4b PUSH2 0xcc
0x4e JUMPI
---
0x45: V14 = 0x41c0e1b5
0x4a: V15 = EQ 0x41c0e1b5 V7
0x4b: V16 = 0xcc
0x4e: JUMPI 0xcc V15
---
Entry stack: [V7]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V7]

================================

Block 0x4f
[0x4f:0x52]
---
Predecessors: [0x44]
Successors: []
---
0x4f PUSH1 0x0
0x51 DUP1
0x52 REVERT
---
0x4f: V17 = 0x0
0x52: REVERT 0x0 0x0
---
Entry stack: [V7]
Stack pops: 0
Stack additions: []
Exit stack: [V7]

================================

Block 0x53
[0x53:0x59]
---
Predecessors: [0x0]
Successors: [0x5a, 0x5e]
---
0x53 JUMPDEST
0x54 CALLVALUE
0x55 ISZERO
0x56 PUSH2 0x5e
0x59 JUMPI
---
0x53: JUMPDEST 
0x54: V18 = CALLVALUE
0x55: V19 = ISZERO V18
0x56: V20 = 0x5e
0x59: JUMPI 0x5e V19
---
Entry stack: [V7]
Stack pops: 0
Stack additions: []
Exit stack: [V7]

================================

Block 0x5a
[0x5a:0x5d]
---
Predecessors: [0x53]
Successors: []
---
0x5a PUSH1 0x0
0x5c DUP1
0x5d REVERT
---
0x5a: V21 = 0x0
0x5d: REVERT 0x0 0x0
---
Entry stack: [V7]
Stack pops: 0
Stack additions: []
Exit stack: [V7]

================================

Block 0x5e
[0x5e:0x89]
---
Predecessors: [0x53]
Successors: [0xe1]
---
0x5e JUMPDEST
0x5f PUSH2 0x8a
0x62 PUSH1 0x4
0x64 DUP1
0x65 DUP1
0x66 CALLDATALOAD
0x67 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x7c AND
0x7d SWAP1
0x7e PUSH1 0x20
0x80 ADD
0x81 SWAP1
0x82 SWAP2
0x83 SWAP1
0x84 POP
0x85 POP
0x86 PUSH2 0xe1
0x89 JUMP
---
0x5e: JUMPDEST 
0x5f: V22 = 0x8a
0x62: V23 = 0x4
0x66: V24 = CALLDATALOAD 0x4
0x67: V25 = 0xffffffffffffffffffffffffffffffffffffffff
0x7c: V26 = AND 0xffffffffffffffffffffffffffffffffffffffff V24
0x7e: V27 = 0x20
0x80: V28 = ADD 0x20 0x4
0x86: V29 = 0xe1
0x89: JUMP 0xe1
---
Entry stack: [V7]
Stack pops: 0
Stack additions: [0x8a, V26]
Exit stack: [V7, 0x8a, V26]

================================

Block 0x8a
[0x8a:0x8b]
---
Predecessors: [0x138]
Successors: []
---
0x8a JUMPDEST
0x8b STOP
---
0x8a: JUMPDEST 
0x8b: STOP 
---
Entry stack: [V7]
Stack pops: 0
Stack additions: []
Exit stack: [V7]

================================

Block 0x8c
[0x8c:0x92]
---
Predecessors: [0x39]
Successors: [0x93, 0x97]
---
0x8c JUMPDEST
0x8d CALLVALUE
0x8e ISZERO
0x8f PUSH2 0x97
0x92 JUMPI
---
0x8c: JUMPDEST 
0x8d: V30 = CALLVALUE
0x8e: V31 = ISZERO V30
0x8f: V32 = 0x97
0x92: JUMPI 0x97 V31
---
Entry stack: [V7]
Stack pops: 0
Stack additions: []
Exit stack: [V7]

================================

Block 0x93
[0x93:0x96]
---
Predecessors: [0x8c]
Successors: []
---
0x93 PUSH1 0x0
0x95 DUP1
0x96 REVERT
---
0x93: V33 = 0x0
0x96: REVERT 0x0 0x0
---
Entry stack: [V7]
Stack pops: 0
Stack additions: []
Exit stack: [V7]

================================

Block 0x97
[0x97:0xb5]
---
Predecessors: [0x8c]
Successors: [0x13b]
---
0x97 JUMPDEST
0x98 PUSH2 0xb6
0x9b PUSH1 0x4
0x9d DUP1
0x9e DUP1
0x9f CALLDATALOAD
0xa0 SWAP1
0xa1 PUSH1 0x20
0xa3 ADD
0xa4 SWAP1
0xa5 SWAP2
0xa6 SWAP1
0xa7 DUP1
0xa8 CALLDATALOAD
0xa9 SWAP1
0xaa PUSH1 0x20
0xac ADD
0xad SWAP1
0xae SWAP2
0xaf SWAP1
0xb0 POP
0xb1 POP
0xb2 PUSH2 0x13b
0xb5 JUMP
---
0x97: JUMPDEST 
0x98: V34 = 0xb6
0x9b: V35 = 0x4
0x9f: V36 = CALLDATALOAD 0x4
0xa1: V37 = 0x20
0xa3: V38 = ADD 0x20 0x4
0xa8: V39 = CALLDATALOAD 0x24
0xaa: V40 = 0x20
0xac: V41 = ADD 0x20 0x24
0xb2: V42 = 0x13b
0xb5: JUMP 0x13b
---
Entry stack: [V7]
Stack pops: 0
Stack additions: [0xb6, V36, V39]
Exit stack: [V7, 0xb6, V36, V39]

================================

Block 0xb6
[0xb6:0xcb]
---
Predecessors: [0x13b]
Successors: []
---
0xb6 JUMPDEST
0xb7 PUSH1 0x40
0xb9 MLOAD
0xba DUP1
0xbb DUP3
0xbc DUP2
0xbd MSTORE
0xbe PUSH1 0x20
0xc0 ADD
0xc1 SWAP2
0xc2 POP
0xc3 POP
0xc4 PUSH1 0x40
0xc6 MLOAD
0xc7 DUP1
0xc8 SWAP2
0xc9 SUB
0xca SWAP1
0xcb RETURN
---
0xb6: JUMPDEST 
0xb7: V43 = 0x40
0xb9: V44 = M[0x40]
0xbd: M[V44] = V77
0xbe: V45 = 0x20
0xc0: V46 = ADD 0x20 V44
0xc4: V47 = 0x40
0xc6: V48 = M[0x40]
0xc9: V49 = SUB V46 V48
0xcb: RETURN V48 V49
---
Entry stack: [V7, V77]
Stack pops: 1
Stack additions: []
Exit stack: [V7]

================================

Block 0xcc
[0xcc:0xd2]
---
Predecessors: [0x44]
Successors: [0xd3, 0xd7]
---
0xcc JUMPDEST
0xcd CALLVALUE
0xce ISZERO
0xcf PUSH2 0xd7
0xd2 JUMPI
---
0xcc: JUMPDEST 
0xcd: V50 = CALLVALUE
0xce: V51 = ISZERO V50
0xcf: V52 = 0xd7
0xd2: JUMPI 0xd7 V51
---
Entry stack: [V7]
Stack pops: 0
Stack additions: []
Exit stack: [V7]

================================

Block 0xd3
[0xd3:0xd6]
---
Predecessors: [0xcc]
Successors: []
---
0xd3 PUSH1 0x0
0xd5 DUP1
0xd6 REVERT
---
0xd3: V53 = 0x0
0xd6: REVERT 0x0 0x0
---
Entry stack: [V7]
Stack pops: 0
Stack additions: []
Exit stack: [V7]

================================

Block 0xd7
[0xd7:0xde]
---
Predecessors: [0xcc]
Successors: [0x148]
---
0xd7 JUMPDEST
0xd8 PUSH2 0xdf
0xdb PUSH2 0x148
0xde JUMP
---
0xd7: JUMPDEST 
0xd8: V54 = 0xdf
0xdb: V55 = 0x148
0xde: JUMP 0x148
---
Entry stack: [V7]
Stack pops: 0
Stack additions: [0xdf]
Exit stack: [V7, 0xdf]

================================

Block 0xdf
[0xdf:0xe0]
---
Predecessors: [0x1d7]
Successors: []
---
0xdf JUMPDEST
0xe0 STOP
---
0xdf: JUMPDEST 
0xe0: STOP 
---
Entry stack: [V7]
Stack pops: 0
Stack additions: []
Exit stack: [V7]

================================

Block 0xe1
[0xe1:0x133]
---
Predecessors: [0x5e]
Successors: [0x134, 0x138]
---
0xe1 JUMPDEST
0xe2 DUP1
0xe3 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0xf8 AND
0xf9 PUSH2 0x8fc
0xfc ADDRESS
0xfd PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x112 AND
0x113 BALANCE
0x114 SWAP1
0x115 DUP2
0x116 ISZERO
0x117 MUL
0x118 SWAP1
0x119 PUSH1 0x40
0x11b MLOAD
0x11c PUSH1 0x0
0x11e PUSH1 0x40
0x120 MLOAD
0x121 DUP1
0x122 DUP4
0x123 SUB
0x124 DUP2
0x125 DUP6
0x126 DUP9
0x127 DUP9
0x128 CALL
0x129 SWAP4
0x12a POP
0x12b POP
0x12c POP
0x12d POP
0x12e ISZERO
0x12f ISZERO
0x130 PUSH2 0x138
0x133 JUMPI
---
0xe1: JUMPDEST 
0xe3: V56 = 0xffffffffffffffffffffffffffffffffffffffff
0xf8: V57 = AND 0xffffffffffffffffffffffffffffffffffffffff V26
0xf9: V58 = 0x8fc
0xfc: V59 = ADDRESS
0xfd: V60 = 0xffffffffffffffffffffffffffffffffffffffff
0x112: V61 = AND 0xffffffffffffffffffffffffffffffffffffffff V59
0x113: V62 = BALANCE V61
0x116: V63 = ISZERO V62
0x117: V64 = MUL V63 0x8fc
0x119: V65 = 0x40
0x11b: V66 = M[0x40]
0x11c: V67 = 0x0
0x11e: V68 = 0x40
0x120: V69 = M[0x40]
0x123: V70 = SUB V66 V69
0x128: V71 = CALL V64 V57 V62 V69 V70 V69 0x0
0x12e: V72 = ISZERO V71
0x12f: V73 = ISZERO V72
0x130: V74 = 0x138
0x133: JUMPI 0x138 V73
---
Entry stack: [V7, 0x8a, V26]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V7, 0x8a, V26]

================================

Block 0x134
[0x134:0x137]
---
Predecessors: [0xe1]
Successors: []
---
0x134 PUSH1 0x0
0x136 DUP1
0x137 REVERT
---
0x134: V75 = 0x0
0x137: REVERT 0x0 0x0
---
Entry stack: [V7, 0x8a, V26]
Stack pops: 0
Stack additions: []
Exit stack: [V7, 0x8a, V26]

================================

Block 0x138
[0x138:0x13a]
---
Predecessors: [0xe1]
Successors: [0x8a]
---
0x138 JUMPDEST
0x139 POP
0x13a JUMP
---
0x138: JUMPDEST 
0x13a: JUMP 0x8a
---
Entry stack: [V7, 0x8a, V26]
Stack pops: 2
Stack additions: []
Exit stack: [V7]

================================

Block 0x13b
[0x13b:0x147]
---
Predecessors: [0x97]
Successors: [0xb6]
---
0x13b JUMPDEST
0x13c PUSH1 0x0
0x13e DUP2
0x13f DUP4
0x140 ADD
0x141 SWAP1
0x142 POP
0x143 SWAP3
0x144 SWAP2
0x145 POP
0x146 POP
0x147 JUMP
---
0x13b: JUMPDEST 
0x13c: V76 = 0x0
0x140: V77 = ADD V36 V39
0x147: JUMP 0xb6
---
Entry stack: [V7, 0xb6, V36, V39]
Stack pops: 3
Stack additions: [V77]
Exit stack: [V7, V77]

================================

Block 0x148
[0x148:0x19d]
---
Predecessors: [0xd7]
Successors: [0x19e, 0x1d7]
---
0x148 JUMPDEST
0x149 PUSH1 0x0
0x14b DUP1
0x14c SWAP1
0x14d SLOAD
0x14e SWAP1
0x14f PUSH2 0x100
0x152 EXP
0x153 SWAP1
0x154 DIV
0x155 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x16a AND
0x16b PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x180 AND
0x181 CALLER
0x182 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x197 AND
0x198 EQ
0x199 ISZERO
0x19a PUSH2 0x1d7
0x19d JUMPI
---
0x148: JUMPDEST 
0x149: V78 = 0x0
0x14d: V79 = S[0x0]
0x14f: V80 = 0x100
0x152: V81 = EXP 0x100 0x0
0x154: V82 = DIV V79 0x1
0x155: V83 = 0xffffffffffffffffffffffffffffffffffffffff
0x16a: V84 = AND 0xffffffffffffffffffffffffffffffffffffffff V82
0x16b: V85 = 0xffffffffffffffffffffffffffffffffffffffff
0x180: V86 = AND 0xffffffffffffffffffffffffffffffffffffffff V84
0x181: V87 = CALLER
0x182: V88 = 0xffffffffffffffffffffffffffffffffffffffff
0x197: V89 = AND 0xffffffffffffffffffffffffffffffffffffffff V87
0x198: V90 = EQ V89 V86
0x199: V91 = ISZERO V90
0x19a: V92 = 0x1d7
0x19d: JUMPI 0x1d7 V91
---
Entry stack: [V7, 0xdf]
Stack pops: 0
Stack additions: []
Exit stack: [V7, 0xdf]

================================

Block 0x19e
[0x19e:0x1d6]
---
Predecessors: [0x148]
Successors: []
---
0x19e PUSH1 0x0
0x1a0 DUP1
0x1a1 SWAP1
0x1a2 SLOAD
0x1a3 SWAP1
0x1a4 PUSH2 0x100
0x1a7 EXP
0x1a8 SWAP1
0x1a9 DIV
0x1aa PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x1bf AND
0x1c0 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x1d5 AND
0x1d6 SELFDESTRUCT
---
0x19e: V93 = 0x0
0x1a2: V94 = S[0x0]
0x1a4: V95 = 0x100
0x1a7: V96 = EXP 0x100 0x0
0x1a9: V97 = DIV V94 0x1
0x1aa: V98 = 0xffffffffffffffffffffffffffffffffffffffff
0x1bf: V99 = AND 0xffffffffffffffffffffffffffffffffffffffff V97
0x1c0: V100 = 0xffffffffffffffffffffffffffffffffffffffff
0x1d5: V101 = AND 0xffffffffffffffffffffffffffffffffffffffff V99
0x1d6: SELFDESTRUCT V101
---
Entry stack: [V7, 0xdf]
Stack pops: 0
Stack additions: []
Exit stack: [V7, 0xdf]

================================

Block 0x1d7
[0x1d7:0x1d8]
---
Predecessors: [0x148]
Successors: [0xdf]
---
0x1d7 JUMPDEST
0x1d8 JUMP
---
0x1d7: JUMPDEST 
0x1d8: JUMP 0xdf
---
Entry stack: [V7, 0xdf]
Stack pops: 1
Stack additions: []
Exit stack: [V7]

================================

Block 0x1d9
[0x1d9:0x204]
---
Predecessors: []
Successors: []
---
0x1d9 STOP
0x1da LOG1
0x1db PUSH6 0x627a7a723058
0x1e2 SHA3
0x1e3 MISSING 0xdb
0x1e4 DUP13
0x1e5 DUP13
0x1e6 DUP3
0x1e7 MISSING 0xc9
0x1e8 PUSH24 0x35a5863c4b1d38c4cd220085f96a84bcadf8f1dab52e29d4
0x201 DUP4
0x202 DUP9
0x203 STOP
0x204 MISSING 0x29
---
0x1d9: STOP 
0x1da: LOG S0 S1 S2
0x1db: V102 = 0x627a7a723058
0x1e2: V103 = SHA3 0x627a7a723058 S3
0x1e3: MISSING 0xdb
0x1e7: MISSING 0xc9
0x1e8: V104 = 0x35a5863c4b1d38c4cd220085f96a84bcadf8f1dab52e29d4
0x203: STOP 
0x204: MISSING 0x29
---
Entry stack: []
Stack pops: 0
Stack additions: [V103, S0, S11, S12, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S6, S2, 0x35a5863c4b1d38c4cd220085f96a84bcadf8f1dab52e29d4, S0, S1, S2, S3, S4, S5, S6]
Exit stack: []

================================

Function 0:
Public function signature: 0x4d21c7e
Entry block: 0x53
Exit block: 0x8a
Body: 0x53, 0x5a, 0x5e, 0x8a, 0xe1, 0x134, 0x138

Function 1:
Public function signature: 0x2878e131
Entry block: 0x8c
Exit block: 0xb6
Body: 0x8c, 0x93, 0x97, 0xb6, 0x13b

Function 2:
Public function signature: 0x41c0e1b5
Entry block: 0xcc
Exit block: 0xdf
Body: 0xcc, 0xd3, 0xd7, 0xdf, 0x148, 0x19e, 0x1d7

Function 3:
Public fallback function
Entry block: 0x4f
Exit block: 0x4f
Body: 0x4f

